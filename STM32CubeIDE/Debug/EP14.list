
EP14.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fc0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  0800407c  0800407c  0000507c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042d0  080042d0  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080042d0  080042d0  000052d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042d8  080042d8  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042d8  080042d8  000052d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042dc  080042dc  000052dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080042e0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  2000006c  0800434c  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  0800434c  0000629c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c246  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002396  00000000  00000000  000122da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  00014670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000780  00000000  00000000  00015060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019392  00000000  00000000  000157e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed4d  00000000  00000000  0002eb72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000993ca  00000000  00000000  0003d8bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6c89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002880  00000000  00000000  000d6ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d954c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000006c 	.word	0x2000006c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004064 	.word	0x08004064

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000070 	.word	0x20000070
 8000100:	08004064 	.word	0x08004064

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	@ (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	@ (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000634:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <MX_CRC_Init+0x40>)
 8000636:	4a0f      	ldr	r2, [pc, #60]	@ (8000674 <MX_CRC_Init+0x44>)
 8000638:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800063a:	4b0d      	ldr	r3, [pc, #52]	@ (8000670 <MX_CRC_Init+0x40>)
 800063c:	2200      	movs	r2, #0
 800063e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000640:	4b0b      	ldr	r3, [pc, #44]	@ (8000670 <MX_CRC_Init+0x40>)
 8000642:	2200      	movs	r2, #0
 8000644:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000646:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <MX_CRC_Init+0x40>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800064c:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <MX_CRC_Init+0x40>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8000652:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <MX_CRC_Init+0x40>)
 8000654:	2203      	movs	r2, #3
 8000656:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000658:	4b05      	ldr	r3, [pc, #20]	@ (8000670 <MX_CRC_Init+0x40>)
 800065a:	0018      	movs	r0, r3
 800065c:	f000 fc84 	bl	8000f68 <HAL_CRC_Init>
 8000660:	1e03      	subs	r3, r0, #0
 8000662:	d001      	beq.n	8000668 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000664:	f000 f968 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000668:	46c0      	nop			@ (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	20000088 	.word	0x20000088
 8000674:	40023000 	.word	0x40023000

08000678 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a0a      	ldr	r2, [pc, #40]	@ (80006b0 <HAL_CRC_MspInit+0x38>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d10d      	bne.n	80006a6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800068a:	4b0a      	ldr	r3, [pc, #40]	@ (80006b4 <HAL_CRC_MspInit+0x3c>)
 800068c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800068e:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <HAL_CRC_MspInit+0x3c>)
 8000690:	2180      	movs	r1, #128	@ 0x80
 8000692:	0149      	lsls	r1, r1, #5
 8000694:	430a      	orrs	r2, r1
 8000696:	639a      	str	r2, [r3, #56]	@ 0x38
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <HAL_CRC_MspInit+0x3c>)
 800069a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800069c:	2380      	movs	r3, #128	@ 0x80
 800069e:	015b      	lsls	r3, r3, #5
 80006a0:	4013      	ands	r3, r2
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80006a6:	46c0      	nop			@ (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b004      	add	sp, #16
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	40023000 	.word	0x40023000
 80006b4:	40021000 	.word	0x40021000

080006b8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b08      	ldr	r3, [pc, #32]	@ (80006e0 <MX_GPIO_Init+0x28>)
 80006c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006c2:	4b07      	ldr	r3, [pc, #28]	@ (80006e0 <MX_GPIO_Init+0x28>)
 80006c4:	2101      	movs	r1, #1
 80006c6:	430a      	orrs	r2, r1
 80006c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ca:	4b05      	ldr	r3, [pc, #20]	@ (80006e0 <MX_GPIO_Init+0x28>)
 80006cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006ce:	2201      	movs	r2, #1
 80006d0:	4013      	ands	r3, r2
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

}
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b002      	add	sp, #8
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	46c0      	nop			@ (mov r8, r8)
 80006e0:	40021000 	.word	0x40021000

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint16_t u16myDataBufferCount = BUFFER_SIZE;
 80006ea:	1dbb      	adds	r3, r7, #6
 80006ec:	4a36      	ldr	r2, [pc, #216]	@ (80007c8 <main+0xe4>)
 80006ee:	801a      	strh	r2, [r3, #0]
	myDataBuffer = (uint32_t*) 0x08000000;
 80006f0:	4b36      	ldr	r3, [pc, #216]	@ (80007cc <main+0xe8>)
 80006f2:	2280      	movs	r2, #128	@ 0x80
 80006f4:	0512      	lsls	r2, r2, #20
 80006f6:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f000 fad8 	bl	8000cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fc:	f000 f880 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f7ff ffda 	bl	80006b8 <MX_GPIO_Init>
  MX_CRC_Init();
 8000704:	f7ff ff94 	bl	8000630 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000708:	f000 f9f4 	bl	8000af4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("\n\r================================ CRC TEST ================================\n\r");
 800070c:	4b30      	ldr	r3, [pc, #192]	@ (80007d0 <main+0xec>)
 800070e:	0018      	movs	r0, r3
 8000710:	f002 fe0c 	bl	800332c <iprintf>

  	/* 1 - Compute the CRC by STM32 CRC Peripheral */
  	/* CRC calculation by Hardware (peripheral) */
  	u32CRCValueHw = HAL_CRC_Accumulate(&hcrc, (uint32_t *)FLASH_BASE, BUFFER_SIZE);
 8000714:	4a2c      	ldr	r2, [pc, #176]	@ (80007c8 <main+0xe4>)
 8000716:	2380      	movs	r3, #128	@ 0x80
 8000718:	0519      	lsls	r1, r3, #20
 800071a:	4b2e      	ldr	r3, [pc, #184]	@ (80007d4 <main+0xf0>)
 800071c:	0018      	movs	r0, r3
 800071e:	f000 fc89 	bl	8001034 <HAL_CRC_Accumulate>
 8000722:	0002      	movs	r2, r0
 8000724:	4b2c      	ldr	r3, [pc, #176]	@ (80007d8 <main+0xf4>)
 8000726:	601a      	str	r2, [r3, #0]

  	/* CRC calculation by software */
  	while (u16myDataBufferCount--)
 8000728:	e00d      	b.n	8000746 <main+0x62>
  	{
  		u32CRCValueSoft= Crc32(u32CRCValueSoft, *myDataBuffer++);
 800072a:	4b2c      	ldr	r3, [pc, #176]	@ (80007dc <main+0xf8>)
 800072c:	6818      	ldr	r0, [r3, #0]
 800072e:	4b27      	ldr	r3, [pc, #156]	@ (80007cc <main+0xe8>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	1d19      	adds	r1, r3, #4
 8000734:	4a25      	ldr	r2, [pc, #148]	@ (80007cc <main+0xe8>)
 8000736:	6011      	str	r1, [r2, #0]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	0019      	movs	r1, r3
 800073c:	f000 f8d0 	bl	80008e0 <Crc32>
 8000740:	0002      	movs	r2, r0
 8000742:	4b26      	ldr	r3, [pc, #152]	@ (80007dc <main+0xf8>)
 8000744:	601a      	str	r2, [r3, #0]
  	while (u16myDataBufferCount--)
 8000746:	1dbb      	adds	r3, r7, #6
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	1dba      	adds	r2, r7, #6
 800074c:	1e59      	subs	r1, r3, #1
 800074e:	8011      	strh	r1, [r2, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1ea      	bne.n	800072a <main+0x46>
  	}

  	/* 2 - Print the calculated checksum */
  	printf("\tChecksum generated by STM32 hardware CRC Unit = 0x%08X\n\r", (unsigned int)u32CRCValueHw);
 8000754:	4b20      	ldr	r3, [pc, #128]	@ (80007d8 <main+0xf4>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <main+0xfc>)
 800075a:	0011      	movs	r1, r2
 800075c:	0018      	movs	r0, r3
 800075e:	f002 fde5 	bl	800332c <iprintf>
  	printf("\tChecksum generated by STM32 software CRC      = 0x%08X\n\r", (unsigned int)u32CRCValueSoft);
 8000762:	4b1e      	ldr	r3, [pc, #120]	@ (80007dc <main+0xf8>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b1f      	ldr	r3, [pc, #124]	@ (80007e4 <main+0x100>)
 8000768:	0011      	movs	r1, r2
 800076a:	0018      	movs	r0, r3
 800076c:	f002 fdde 	bl	800332c <iprintf>

  	/* 3 - Print the stored CRC */
  	printf("\tChecksum stored at 0x%08X                 = 0x%08X\n\r", (unsigned int)STD_CRC_ADDR, *(unsigned int *)STD_CRC_ADDR);
 8000770:	4b1d      	ldr	r3, [pc, #116]	@ (80007e8 <main+0x104>)
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	491c      	ldr	r1, [pc, #112]	@ (80007e8 <main+0x104>)
 8000776:	4b1d      	ldr	r3, [pc, #116]	@ (80007ec <main+0x108>)
 8000778:	0018      	movs	r0, r3
 800077a:	f002 fdd7 	bl	800332c <iprintf>

  	/* 4 - Check if the calculated CRC is equal the stored value */
  	if(u32CRCValueHw == *(uint32_t *)STD_CRC_ADDR)
 800077e:	4b1a      	ldr	r3, [pc, #104]	@ (80007e8 <main+0x104>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <main+0xf4>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	429a      	cmp	r2, r3
 8000788:	d108      	bne.n	800079c <main+0xb8>
  	{
  		printf("CRC Check: OK...\n\r");
 800078a:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <main+0x10c>)
 800078c:	0018      	movs	r0, r3
 800078e:	f002 fdcd 	bl	800332c <iprintf>
  		printf("==========================================================================\n\r");
 8000792:	4b18      	ldr	r3, [pc, #96]	@ (80007f4 <main+0x110>)
 8000794:	0018      	movs	r0, r3
 8000796:	f002 fdc9 	bl	800332c <iprintf>
 800079a:	e009      	b.n	80007b0 <main+0xcc>
  	}
  	else
  	{
  		printf("CRC Check: Fail...\n\r");
 800079c:	4b16      	ldr	r3, [pc, #88]	@ (80007f8 <main+0x114>)
 800079e:	0018      	movs	r0, r3
 80007a0:	f002 fdc4 	bl	800332c <iprintf>
  		printf("==========================================================================\n\r");
 80007a4:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <main+0x110>)
 80007a6:	0018      	movs	r0, r3
 80007a8:	f002 fdc0 	bl	800332c <iprintf>
  		Error_Handler();
 80007ac:	f000 f8c4 	bl	8000938 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Application running... \n\r");
 80007b0:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <main+0x118>)
 80007b2:	0018      	movs	r0, r3
 80007b4:	f002 fdba 	bl	800332c <iprintf>
	  HAL_Delay(1000);
 80007b8:	23fa      	movs	r3, #250	@ 0xfa
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	0018      	movs	r0, r3
 80007be:	f000 fafb 	bl	8000db8 <HAL_Delay>
	  printf("Application running... \n\r");
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	e7f4      	b.n	80007b0 <main+0xcc>
 80007c6:	46c0      	nop			@ (mov r8, r8)
 80007c8:	000010ff 	.word	0x000010ff
 80007cc:	200000b0 	.word	0x200000b0
 80007d0:	0800407c 	.word	0x0800407c
 80007d4:	20000088 	.word	0x20000088
 80007d8:	200000ac 	.word	0x200000ac
 80007dc:	20000000 	.word	0x20000000
 80007e0:	080040cc 	.word	0x080040cc
 80007e4:	08004108 	.word	0x08004108
 80007e8:	080043fc 	.word	0x080043fc
 80007ec:	08004144 	.word	0x08004144
 80007f0:	0800417c 	.word	0x0800417c
 80007f4:	08004190 	.word	0x08004190
 80007f8:	080041e0 	.word	0x080041e0
 80007fc:	080041f8 	.word	0x080041f8

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b093      	sub	sp, #76	@ 0x4c
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	2410      	movs	r4, #16
 8000808:	193b      	adds	r3, r7, r4
 800080a:	0018      	movs	r0, r3
 800080c:	2338      	movs	r3, #56	@ 0x38
 800080e:	001a      	movs	r2, r3
 8000810:	2100      	movs	r1, #0
 8000812:	f002 fde7 	bl	80033e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000816:	003b      	movs	r3, r7
 8000818:	0018      	movs	r0, r3
 800081a:	2310      	movs	r3, #16
 800081c:	001a      	movs	r2, r3
 800081e:	2100      	movs	r1, #0
 8000820:	f002 fde0 	bl	80033e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000824:	2380      	movs	r3, #128	@ 0x80
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	0018      	movs	r0, r3
 800082a:	f000 feed 	bl	8001608 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800082e:	193b      	adds	r3, r7, r4
 8000830:	2202      	movs	r2, #2
 8000832:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000834:	193b      	adds	r3, r7, r4
 8000836:	2280      	movs	r2, #128	@ 0x80
 8000838:	0052      	lsls	r2, r2, #1
 800083a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800083c:	0021      	movs	r1, r4
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2240      	movs	r2, #64	@ 0x40
 8000848:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2202      	movs	r2, #2
 800084e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2202      	movs	r2, #2
 8000854:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2208      	movs	r2, #8
 8000860:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2280      	movs	r2, #128	@ 0x80
 8000866:	0292      	lsls	r2, r2, #10
 8000868:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2280      	movs	r2, #128	@ 0x80
 800086e:	0492      	lsls	r2, r2, #18
 8000870:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2280      	movs	r2, #128	@ 0x80
 8000876:	0592      	lsls	r2, r2, #22
 8000878:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087a:	187b      	adds	r3, r7, r1
 800087c:	0018      	movs	r0, r3
 800087e:	f000 ff0f 	bl	80016a0 <HAL_RCC_OscConfig>
 8000882:	1e03      	subs	r3, r0, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000886:	f000 f857 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088a:	003b      	movs	r3, r7
 800088c:	2207      	movs	r2, #7
 800088e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000890:	003b      	movs	r3, r7
 8000892:	2202      	movs	r2, #2
 8000894:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000896:	003b      	movs	r3, r7
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800089c:	003b      	movs	r3, r7
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008a2:	003b      	movs	r3, r7
 80008a4:	2102      	movs	r1, #2
 80008a6:	0018      	movs	r0, r3
 80008a8:	f001 fa14 	bl	8001cd4 <HAL_RCC_ClockConfig>
 80008ac:	1e03      	subs	r3, r0, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008b0:	f000 f842 	bl	8000938 <Error_Handler>
  }
}
 80008b4:	46c0      	nop			@ (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b013      	add	sp, #76	@ 0x4c
 80008ba:	bd90      	pop	{r4, r7, pc}

080008bc <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80008c4:	2301      	movs	r3, #1
 80008c6:	425b      	negs	r3, r3
 80008c8:	1d39      	adds	r1, r7, #4
 80008ca:	4804      	ldr	r0, [pc, #16]	@ (80008dc <__io_putchar+0x20>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	f001 fdb9 	bl	8002444 <HAL_UART_Transmit>

	return ch;
 80008d2:	687b      	ldr	r3, [r7, #4]
}
 80008d4:	0018      	movs	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b002      	add	sp, #8
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200000b8 	.word	0x200000b8

080008e0 <Crc32>:

/* CRC Calculation by software function */
uint32_t Crc32(uint32_t Crc, uint32_t Data)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
	uint8_t index;

	Crc = Crc ^ Data;
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	4053      	eors	r3, r2
 80008f0:	607b      	str	r3, [r7, #4]
	for(index=0; index<32; index++)
 80008f2:	230f      	movs	r3, #15
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
 80008fa:	e011      	b.n	8000920 <Crc32+0x40>
	{
		if (Crc & 0x80000000)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	da05      	bge.n	800090e <Crc32+0x2e>
			Crc = (Crc << 1) ^ 0x04C11DB7; // Polynomial used in STM32
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	4a0b      	ldr	r2, [pc, #44]	@ (8000934 <Crc32+0x54>)
 8000908:	4053      	eors	r3, r2
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	e002      	b.n	8000914 <Crc32+0x34>
		else
			Crc = (Crc << 1);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	607b      	str	r3, [r7, #4]
	for(index=0; index<32; index++)
 8000914:	210f      	movs	r1, #15
 8000916:	187b      	adds	r3, r7, r1
 8000918:	781a      	ldrb	r2, [r3, #0]
 800091a:	187b      	adds	r3, r7, r1
 800091c:	3201      	adds	r2, #1
 800091e:	701a      	strb	r2, [r3, #0]
 8000920:	230f      	movs	r3, #15
 8000922:	18fb      	adds	r3, r7, r3
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b1f      	cmp	r3, #31
 8000928:	d9e8      	bls.n	80008fc <Crc32+0x1c>
	}
	return(Crc);
 800092a:	687b      	ldr	r3, [r7, #4]
}
 800092c:	0018      	movs	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	b004      	add	sp, #16
 8000932:	bd80      	pop	{r7, pc}
 8000934:	04c11db7 	.word	0x04c11db7

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	46c0      	nop			@ (mov r8, r8)
 8000942:	e7fd      	b.n	8000940 <Error_Handler+0x8>

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <HAL_MspInit+0x44>)
 800094c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800094e:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <HAL_MspInit+0x44>)
 8000950:	2101      	movs	r1, #1
 8000952:	430a      	orrs	r2, r1
 8000954:	641a      	str	r2, [r3, #64]	@ 0x40
 8000956:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <HAL_MspInit+0x44>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095a:	2201      	movs	r2, #1
 800095c:	4013      	ands	r3, r2
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <HAL_MspInit+0x44>)
 8000964:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000966:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <HAL_MspInit+0x44>)
 8000968:	2180      	movs	r1, #128	@ 0x80
 800096a:	0549      	lsls	r1, r1, #21
 800096c:	430a      	orrs	r2, r1
 800096e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000970:	4b05      	ldr	r3, [pc, #20]	@ (8000988 <HAL_MspInit+0x44>)
 8000972:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000974:	2380      	movs	r3, #128	@ 0x80
 8000976:	055b      	lsls	r3, r3, #21
 8000978:	4013      	ands	r3, r2
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	46c0      	nop			@ (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b002      	add	sp, #8
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	40021000 	.word	0x40021000

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000990:	46c0      	nop			@ (mov r8, r8)
 8000992:	e7fd      	b.n	8000990 <NMI_Handler+0x4>

08000994 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000998:	46c0      	nop			@ (mov r8, r8)
 800099a:	e7fd      	b.n	8000998 <HardFault_Handler+0x4>

0800099c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009a0:	46c0      	nop			@ (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b4:	f000 f9e4 	bl	8000d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b8:	46c0      	nop			@ (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b086      	sub	sp, #24
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	60f8      	str	r0, [r7, #12]
 80009c6:	60b9      	str	r1, [r7, #8]
 80009c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
 80009ce:	e00a      	b.n	80009e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009d0:	e000      	b.n	80009d4 <_read+0x16>
 80009d2:	bf00      	nop
 80009d4:	0001      	movs	r1, r0
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	1c5a      	adds	r2, r3, #1
 80009da:	60ba      	str	r2, [r7, #8]
 80009dc:	b2ca      	uxtb	r2, r1
 80009de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	3301      	adds	r3, #1
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697a      	ldr	r2, [r7, #20]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	dbf0      	blt.n	80009d0 <_read+0x12>
  }

  return len;
 80009ee:	687b      	ldr	r3, [r7, #4]
}
 80009f0:	0018      	movs	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b006      	add	sp, #24
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	e009      	b.n	8000a1e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	1c5a      	adds	r2, r3, #1
 8000a0e:	60ba      	str	r2, [r7, #8]
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	0018      	movs	r0, r3
 8000a14:	f7ff ff52 	bl	80008bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	697a      	ldr	r2, [r7, #20]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	dbf1      	blt.n	8000a0a <_write+0x12>
  }
  return len;
 8000a26:	687b      	ldr	r3, [r7, #4]
}
 8000a28:	0018      	movs	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b006      	add	sp, #24
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <_close>:

int _close(int file)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	425b      	negs	r3, r3
}
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b002      	add	sp, #8
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	2280      	movs	r2, #128	@ 0x80
 8000a52:	0192      	lsls	r2, r2, #6
 8000a54:	605a      	str	r2, [r3, #4]
  return 0;
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	0018      	movs	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b002      	add	sp, #8
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <_isatty>:

int _isatty(int file)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a68:	2301      	movs	r3, #1
}
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b084      	sub	sp, #16
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	60f8      	str	r0, [r7, #12]
 8000a7a:	60b9      	str	r1, [r7, #8]
 8000a7c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a7e:	2300      	movs	r3, #0
}
 8000a80:	0018      	movs	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b004      	add	sp, #16
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a90:	4a14      	ldr	r2, [pc, #80]	@ (8000ae4 <_sbrk+0x5c>)
 8000a92:	4b15      	ldr	r3, [pc, #84]	@ (8000ae8 <_sbrk+0x60>)
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a9c:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <_sbrk+0x64>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d102      	bne.n	8000aaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <_sbrk+0x64>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	@ (8000af0 <_sbrk+0x68>)
 8000aa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <_sbrk+0x64>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	18d3      	adds	r3, r2, r3
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d207      	bcs.n	8000ac8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab8:	f002 fcea 	bl	8003490 <__errno>
 8000abc:	0003      	movs	r3, r0
 8000abe:	220c      	movs	r2, #12
 8000ac0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	425b      	negs	r3, r3
 8000ac6:	e009      	b.n	8000adc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac8:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <_sbrk+0x64>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ace:	4b07      	ldr	r3, [pc, #28]	@ (8000aec <_sbrk+0x64>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	18d2      	adds	r2, r2, r3
 8000ad6:	4b05      	ldr	r3, [pc, #20]	@ (8000aec <_sbrk+0x64>)
 8000ad8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000ada:	68fb      	ldr	r3, [r7, #12]
}
 8000adc:	0018      	movs	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b006      	add	sp, #24
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20009000 	.word	0x20009000
 8000ae8:	00000400 	.word	0x00000400
 8000aec:	200000b4 	.word	0x200000b4
 8000af0:	200002a0 	.word	0x200002a0

08000af4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000af8:	4b23      	ldr	r3, [pc, #140]	@ (8000b88 <MX_USART2_UART_Init+0x94>)
 8000afa:	4a24      	ldr	r2, [pc, #144]	@ (8000b8c <MX_USART2_UART_Init+0x98>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000afe:	4b22      	ldr	r3, [pc, #136]	@ (8000b88 <MX_USART2_UART_Init+0x94>)
 8000b00:	22e1      	movs	r2, #225	@ 0xe1
 8000b02:	0252      	lsls	r2, r2, #9
 8000b04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b20      	ldr	r3, [pc, #128]	@ (8000b88 <MX_USART2_UART_Init+0x94>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b88 <MX_USART2_UART_Init+0x94>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <MX_USART2_UART_Init+0x94>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b1b      	ldr	r3, [pc, #108]	@ (8000b88 <MX_USART2_UART_Init+0x94>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b88 <MX_USART2_UART_Init+0x94>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b18      	ldr	r3, [pc, #96]	@ (8000b88 <MX_USART2_UART_Init+0x94>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <MX_USART2_UART_Init+0x94>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b30:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <MX_USART2_UART_Init+0x94>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b36:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <MX_USART2_UART_Init+0x94>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b3c:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <MX_USART2_UART_Init+0x94>)
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f001 fc2a 	bl	8002398 <HAL_UART_Init>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d001      	beq.n	8000b4c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b48:	f7ff fef6 	bl	8000938 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <MX_USART2_UART_Init+0x94>)
 8000b4e:	2100      	movs	r1, #0
 8000b50:	0018      	movs	r0, r3
 8000b52:	f002 fa47 	bl	8002fe4 <HAL_UARTEx_SetTxFifoThreshold>
 8000b56:	1e03      	subs	r3, r0, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b5a:	f7ff feed 	bl	8000938 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <MX_USART2_UART_Init+0x94>)
 8000b60:	2100      	movs	r1, #0
 8000b62:	0018      	movs	r0, r3
 8000b64:	f002 fa7e 	bl	8003064 <HAL_UARTEx_SetRxFifoThreshold>
 8000b68:	1e03      	subs	r3, r0, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b6c:	f7ff fee4 	bl	8000938 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b70:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <MX_USART2_UART_Init+0x94>)
 8000b72:	0018      	movs	r0, r3
 8000b74:	f002 f9fc 	bl	8002f70 <HAL_UARTEx_DisableFifoMode>
 8000b78:	1e03      	subs	r3, r0, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b7c:	f7ff fedc 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b80:	46c0      	nop			@ (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	200000b8 	.word	0x200000b8
 8000b8c:	40004400 	.word	0x40004400

08000b90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b097      	sub	sp, #92	@ 0x5c
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	2344      	movs	r3, #68	@ 0x44
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	2314      	movs	r3, #20
 8000ba0:	001a      	movs	r2, r3
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	f002 fc1e 	bl	80033e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba8:	2410      	movs	r4, #16
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	0018      	movs	r0, r3
 8000bae:	2334      	movs	r3, #52	@ 0x34
 8000bb0:	001a      	movs	r2, r3
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	f002 fc16 	bl	80033e4 <memset>
  if(uartHandle->Instance==USART2)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a22      	ldr	r2, [pc, #136]	@ (8000c48 <HAL_UART_MspInit+0xb8>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d13e      	bne.n	8000c40 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f001 fa29 	bl	8002028 <HAL_RCCEx_PeriphCLKConfig>
 8000bd6:	1e03      	subs	r3, r0, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bda:	f7ff fead 	bl	8000938 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bde:	4b1b      	ldr	r3, [pc, #108]	@ (8000c4c <HAL_UART_MspInit+0xbc>)
 8000be0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000be2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c4c <HAL_UART_MspInit+0xbc>)
 8000be4:	2180      	movs	r1, #128	@ 0x80
 8000be6:	0289      	lsls	r1, r1, #10
 8000be8:	430a      	orrs	r2, r1
 8000bea:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bec:	4b17      	ldr	r3, [pc, #92]	@ (8000c4c <HAL_UART_MspInit+0xbc>)
 8000bee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bf0:	2380      	movs	r3, #128	@ 0x80
 8000bf2:	029b      	lsls	r3, r3, #10
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	4b14      	ldr	r3, [pc, #80]	@ (8000c4c <HAL_UART_MspInit+0xbc>)
 8000bfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bfe:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <HAL_UART_MspInit+0xbc>)
 8000c00:	2101      	movs	r1, #1
 8000c02:	430a      	orrs	r2, r1
 8000c04:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c06:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <HAL_UART_MspInit+0xbc>)
 8000c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c12:	2144      	movs	r1, #68	@ 0x44
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	220c      	movs	r2, #12
 8000c18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	2201      	movs	r2, #1
 8000c30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	187a      	adds	r2, r7, r1
 8000c34:	23a0      	movs	r3, #160	@ 0xa0
 8000c36:	05db      	lsls	r3, r3, #23
 8000c38:	0011      	movs	r1, r2
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f000 fb80 	bl	8001340 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c40:	46c0      	nop			@ (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b017      	add	sp, #92	@ 0x5c
 8000c46:	bd90      	pop	{r4, r7, pc}
 8000c48:	40004400 	.word	0x40004400
 8000c4c:	40021000 	.word	0x40021000

08000c50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c50:	480d      	ldr	r0, [pc, #52]	@ (8000c88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c52:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c54:	f000 f825 	bl	8000ca2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c58:	480c      	ldr	r0, [pc, #48]	@ (8000c8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5a:	490d      	ldr	r1, [pc, #52]	@ (8000c90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c94 <LoopForever+0xe>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c60:	e002      	b.n	8000c68 <LoopCopyDataInit>

08000c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c66:	3304      	adds	r3, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c6c:	d3f9      	bcc.n	8000c62 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c70:	4c0a      	ldr	r4, [pc, #40]	@ (8000c9c <LoopForever+0x16>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c74:	e001      	b.n	8000c7a <LoopFillZerobss>

08000c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c78:	3204      	adds	r2, #4

08000c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c7c:	d3fb      	bcc.n	8000c76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c7e:	f002 fc0d 	bl	800349c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c82:	f7ff fd2f 	bl	80006e4 <main>

08000c86 <LoopForever>:

LoopForever:
  b LoopForever
 8000c86:	e7fe      	b.n	8000c86 <LoopForever>
  ldr   r0, =_estack
 8000c88:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c94:	080042e0 	.word	0x080042e0
  ldr r2, =_sbss
 8000c98:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c9c:	2000029c 	.word	0x2000029c

08000ca0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC1_COMP_IRQHandler>

08000ca2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <HAL_Init+0x3c>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <HAL_Init+0x3c>)
 8000cbe:	2180      	movs	r1, #128	@ 0x80
 8000cc0:	0049      	lsls	r1, r1, #1
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cc6:	2003      	movs	r0, #3
 8000cc8:	f000 f810 	bl	8000cec <HAL_InitTick>
 8000ccc:	1e03      	subs	r3, r0, #0
 8000cce:	d003      	beq.n	8000cd8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000cd0:	1dfb      	adds	r3, r7, #7
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	701a      	strb	r2, [r3, #0]
 8000cd6:	e001      	b.n	8000cdc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000cd8:	f7ff fe34 	bl	8000944 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cdc:	1dfb      	adds	r3, r7, #7
 8000cde:	781b      	ldrb	r3, [r3, #0]
}
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b002      	add	sp, #8
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40022000 	.word	0x40022000

08000cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d74 <HAL_InitTick+0x88>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d02b      	beq.n	8000d5c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d04:	4b1c      	ldr	r3, [pc, #112]	@ (8000d78 <HAL_InitTick+0x8c>)
 8000d06:	681c      	ldr	r4, [r3, #0]
 8000d08:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <HAL_InitTick+0x88>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	0019      	movs	r1, r3
 8000d0e:	23fa      	movs	r3, #250	@ 0xfa
 8000d10:	0098      	lsls	r0, r3, #2
 8000d12:	f7ff fa01 	bl	8000118 <__udivsi3>
 8000d16:	0003      	movs	r3, r0
 8000d18:	0019      	movs	r1, r3
 8000d1a:	0020      	movs	r0, r4
 8000d1c:	f7ff f9fc 	bl	8000118 <__udivsi3>
 8000d20:	0003      	movs	r3, r0
 8000d22:	0018      	movs	r0, r3
 8000d24:	f000 f913 	bl	8000f4e <HAL_SYSTICK_Config>
 8000d28:	1e03      	subs	r3, r0, #0
 8000d2a:	d112      	bne.n	8000d52 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	d80a      	bhi.n	8000d48 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	2301      	movs	r3, #1
 8000d36:	425b      	negs	r3, r3
 8000d38:	2200      	movs	r2, #0
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f000 f8f2 	bl	8000f24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d40:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <HAL_InitTick+0x90>)
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	e00d      	b.n	8000d64 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d48:	230f      	movs	r3, #15
 8000d4a:	18fb      	adds	r3, r7, r3
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	701a      	strb	r2, [r3, #0]
 8000d50:	e008      	b.n	8000d64 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d52:	230f      	movs	r3, #15
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
 8000d5a:	e003      	b.n	8000d64 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	18fb      	adds	r3, r7, r3
 8000d60:	2201      	movs	r2, #1
 8000d62:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d64:	230f      	movs	r3, #15
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	781b      	ldrb	r3, [r3, #0]
}
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b005      	add	sp, #20
 8000d70:	bd90      	pop	{r4, r7, pc}
 8000d72:	46c0      	nop			@ (mov r8, r8)
 8000d74:	2000000c 	.word	0x2000000c
 8000d78:	20000004 	.word	0x20000004
 8000d7c:	20000008 	.word	0x20000008

08000d80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d84:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <HAL_IncTick+0x1c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	001a      	movs	r2, r3
 8000d8a:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <HAL_IncTick+0x20>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	18d2      	adds	r2, r2, r3
 8000d90:	4b03      	ldr	r3, [pc, #12]	@ (8000da0 <HAL_IncTick+0x20>)
 8000d92:	601a      	str	r2, [r3, #0]
}
 8000d94:	46c0      	nop			@ (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	2000000c 	.word	0x2000000c
 8000da0:	2000014c 	.word	0x2000014c

08000da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b02      	ldr	r3, [pc, #8]	@ (8000db4 <HAL_GetTick+0x10>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	0018      	movs	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	2000014c 	.word	0x2000014c

08000db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc0:	f7ff fff0 	bl	8000da4 <HAL_GetTick>
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	d005      	beq.n	8000dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <HAL_Delay+0x44>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	001a      	movs	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	189b      	adds	r3, r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dde:	46c0      	nop			@ (mov r8, r8)
 8000de0:	f7ff ffe0 	bl	8000da4 <HAL_GetTick>
 8000de4:	0002      	movs	r2, r0
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d8f7      	bhi.n	8000de0 <HAL_Delay+0x28>
  {
  }
}
 8000df0:	46c0      	nop			@ (mov r8, r8)
 8000df2:	46c0      	nop			@ (mov r8, r8)
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b004      	add	sp, #16
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	2000000c 	.word	0x2000000c

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	0002      	movs	r2, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	1dfb      	adds	r3, r7, #7
 8000e0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e14:	d828      	bhi.n	8000e68 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e16:	4a2f      	ldr	r2, [pc, #188]	@ (8000ed4 <__NVIC_SetPriority+0xd4>)
 8000e18:	1dfb      	adds	r3, r7, #7
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	089b      	lsrs	r3, r3, #2
 8000e20:	33c0      	adds	r3, #192	@ 0xc0
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	589b      	ldr	r3, [r3, r2]
 8000e26:	1dfa      	adds	r2, r7, #7
 8000e28:	7812      	ldrb	r2, [r2, #0]
 8000e2a:	0011      	movs	r1, r2
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	400a      	ands	r2, r1
 8000e30:	00d2      	lsls	r2, r2, #3
 8000e32:	21ff      	movs	r1, #255	@ 0xff
 8000e34:	4091      	lsls	r1, r2
 8000e36:	000a      	movs	r2, r1
 8000e38:	43d2      	mvns	r2, r2
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	019b      	lsls	r3, r3, #6
 8000e42:	22ff      	movs	r2, #255	@ 0xff
 8000e44:	401a      	ands	r2, r3
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	4003      	ands	r3, r0
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e54:	481f      	ldr	r0, [pc, #124]	@ (8000ed4 <__NVIC_SetPriority+0xd4>)
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b25b      	sxtb	r3, r3
 8000e5c:	089b      	lsrs	r3, r3, #2
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	33c0      	adds	r3, #192	@ 0xc0
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e66:	e031      	b.n	8000ecc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e68:	4a1b      	ldr	r2, [pc, #108]	@ (8000ed8 <__NVIC_SetPriority+0xd8>)
 8000e6a:	1dfb      	adds	r3, r7, #7
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	0019      	movs	r1, r3
 8000e70:	230f      	movs	r3, #15
 8000e72:	400b      	ands	r3, r1
 8000e74:	3b08      	subs	r3, #8
 8000e76:	089b      	lsrs	r3, r3, #2
 8000e78:	3306      	adds	r3, #6
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	18d3      	adds	r3, r2, r3
 8000e7e:	3304      	adds	r3, #4
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	1dfa      	adds	r2, r7, #7
 8000e84:	7812      	ldrb	r2, [r2, #0]
 8000e86:	0011      	movs	r1, r2
 8000e88:	2203      	movs	r2, #3
 8000e8a:	400a      	ands	r2, r1
 8000e8c:	00d2      	lsls	r2, r2, #3
 8000e8e:	21ff      	movs	r1, #255	@ 0xff
 8000e90:	4091      	lsls	r1, r2
 8000e92:	000a      	movs	r2, r1
 8000e94:	43d2      	mvns	r2, r2
 8000e96:	401a      	ands	r2, r3
 8000e98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	019b      	lsls	r3, r3, #6
 8000e9e:	22ff      	movs	r2, #255	@ 0xff
 8000ea0:	401a      	ands	r2, r3
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	4003      	ands	r3, r0
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eb0:	4809      	ldr	r0, [pc, #36]	@ (8000ed8 <__NVIC_SetPriority+0xd8>)
 8000eb2:	1dfb      	adds	r3, r7, #7
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	001c      	movs	r4, r3
 8000eb8:	230f      	movs	r3, #15
 8000eba:	4023      	ands	r3, r4
 8000ebc:	3b08      	subs	r3, #8
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	3306      	adds	r3, #6
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	18c3      	adds	r3, r0, r3
 8000ec8:	3304      	adds	r3, #4
 8000eca:	601a      	str	r2, [r3, #0]
}
 8000ecc:	46c0      	nop			@ (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b003      	add	sp, #12
 8000ed2:	bd90      	pop	{r4, r7, pc}
 8000ed4:	e000e100 	.word	0xe000e100
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	1e5a      	subs	r2, r3, #1
 8000ee8:	2380      	movs	r3, #128	@ 0x80
 8000eea:	045b      	lsls	r3, r3, #17
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d301      	bcc.n	8000ef4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e010      	b.n	8000f16 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <SysTick_Config+0x44>)
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	3a01      	subs	r2, #1
 8000efa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000efc:	2301      	movs	r3, #1
 8000efe:	425b      	negs	r3, r3
 8000f00:	2103      	movs	r1, #3
 8000f02:	0018      	movs	r0, r3
 8000f04:	f7ff ff7c 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <SysTick_Config+0x44>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f0e:	4b04      	ldr	r3, [pc, #16]	@ (8000f20 <SysTick_Config+0x44>)
 8000f10:	2207      	movs	r2, #7
 8000f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	0018      	movs	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b002      	add	sp, #8
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			@ (mov r8, r8)
 8000f20:	e000e010 	.word	0xe000e010

08000f24 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
 8000f2e:	210f      	movs	r1, #15
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	1c02      	adds	r2, r0, #0
 8000f34:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	187b      	adds	r3, r7, r1
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	0011      	movs	r1, r2
 8000f40:	0018      	movs	r0, r3
 8000f42:	f7ff ff5d 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b004      	add	sp, #16
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f7ff ffbf 	bl	8000edc <SysTick_Config>
 8000f5e:	0003      	movs	r3, r0
}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b002      	add	sp, #8
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e056      	b.n	8001028 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	7f5b      	ldrb	r3, [r3, #29]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d106      	bne.n	8000f92 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f7ff fb73 	bl	8000678 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2202      	movs	r2, #2
 8000f96:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	791b      	ldrb	r3, [r3, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d10c      	bne.n	8000fba <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a22      	ldr	r2, [pc, #136]	@ (8001030 <HAL_CRC_Init+0xc8>)
 8000fa6:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2118      	movs	r1, #24
 8000fb4:	438a      	bics	r2, r1
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	e00b      	b.n	8000fd2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6899      	ldr	r1, [r3, #8]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68da      	ldr	r2, [r3, #12]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f000 f946 	bl	8001256 <HAL_CRCEx_Polynomial_Set>
 8000fca:	1e03      	subs	r3, r0, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e02a      	b.n	8001028 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	795b      	ldrb	r3, [r3, #5]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d105      	bne.n	8000fe6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4252      	negs	r2, r2
 8000fe2:	611a      	str	r2, [r3, #16]
 8000fe4:	e004      	b.n	8000ff0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	6912      	ldr	r2, [r2, #16]
 8000fee:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	2260      	movs	r2, #96	@ 0x60
 8000ff8:	4393      	bics	r3, r2
 8000ffa:	0019      	movs	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	695a      	ldr	r2, [r3, #20]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	430a      	orrs	r2, r1
 8001006:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	2280      	movs	r2, #128	@ 0x80
 8001010:	4393      	bics	r3, r2
 8001012:	0019      	movs	r1, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	699a      	ldr	r2, [r3, #24]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	430a      	orrs	r2, r1
 800101e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2201      	movs	r2, #1
 8001024:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
}
 8001028:	0018      	movs	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	b002      	add	sp, #8
 800102e:	bd80      	pop	{r7, pc}
 8001030:	04c11db7 	.word	0x04c11db7

08001034 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001040:	2300      	movs	r3, #0
 8001042:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2202      	movs	r2, #2
 8001048:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6a1b      	ldr	r3, [r3, #32]
 800104e:	2b03      	cmp	r3, #3
 8001050:	d005      	beq.n	800105e <HAL_CRC_Accumulate+0x2a>
 8001052:	d82d      	bhi.n	80010b0 <HAL_CRC_Accumulate+0x7c>
 8001054:	2b01      	cmp	r3, #1
 8001056:	d019      	beq.n	800108c <HAL_CRC_Accumulate+0x58>
 8001058:	2b02      	cmp	r3, #2
 800105a:	d020      	beq.n	800109e <HAL_CRC_Accumulate+0x6a>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 800105c:	e028      	b.n	80010b0 <HAL_CRC_Accumulate+0x7c>
      for (index = 0U; index < BufferLength; index++)
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	e00a      	b.n	800107a <HAL_CRC_Accumulate+0x46>
        hcrc->Instance->DR = pBuffer[index];
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	18d2      	adds	r2, r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6812      	ldr	r2, [r2, #0]
 8001072:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	3301      	adds	r3, #1
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	429a      	cmp	r2, r3
 8001080:	d3f0      	bcc.n	8001064 <HAL_CRC_Accumulate+0x30>
      temp = hcrc->Instance->DR;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	613b      	str	r3, [r7, #16]
      break;
 800108a:	e012      	b.n	80010b2 <HAL_CRC_Accumulate+0x7e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	68b9      	ldr	r1, [r7, #8]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	0018      	movs	r0, r3
 8001094:	f000 f815 	bl	80010c2 <CRC_Handle_8>
 8001098:	0003      	movs	r3, r0
 800109a:	613b      	str	r3, [r7, #16]
      break;
 800109c:	e009      	b.n	80010b2 <HAL_CRC_Accumulate+0x7e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	0018      	movs	r0, r3
 80010a6:	f000 f89f 	bl	80011e8 <CRC_Handle_16>
 80010aa:	0003      	movs	r3, r0
 80010ac:	613b      	str	r3, [r7, #16]
      break;
 80010ae:	e000      	b.n	80010b2 <HAL_CRC_Accumulate+0x7e>
      break;
 80010b0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2201      	movs	r2, #1
 80010b6:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80010b8:	693b      	ldr	r3, [r7, #16]
}
 80010ba:	0018      	movs	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	b006      	add	sp, #24
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b088      	sub	sp, #32
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
 80010d2:	e023      	b.n	800111c <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	18d3      	adds	r3, r2, r3
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	3301      	adds	r3, #1
 80010e6:	68b9      	ldr	r1, [r7, #8]
 80010e8:	18cb      	adds	r3, r1, r3
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80010ee:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	3302      	adds	r3, #2
 80010f6:	68b9      	ldr	r1, [r7, #8]
 80010f8:	18cb      	adds	r3, r1, r3
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80010fe:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	3303      	adds	r3, #3
 8001106:	68b9      	ldr	r1, [r7, #8]
 8001108:	18cb      	adds	r3, r1, r3
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	0019      	movs	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001112:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001114:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3301      	adds	r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	089b      	lsrs	r3, r3, #2
 8001120:	69fa      	ldr	r2, [r7, #28]
 8001122:	429a      	cmp	r2, r3
 8001124:	d3d6      	bcc.n	80010d4 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2203      	movs	r2, #3
 800112a:	4013      	ands	r3, r2
 800112c:	d055      	beq.n	80011da <CRC_Handle_8+0x118>
  {
    if ((BufferLength % 4U) == 1U)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2203      	movs	r2, #3
 8001132:	4013      	ands	r3, r2
 8001134:	2b01      	cmp	r3, #1
 8001136:	d107      	bne.n	8001148 <CRC_Handle_8+0x86>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	68ba      	ldr	r2, [r7, #8]
 800113e:	18d2      	adds	r2, r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	7812      	ldrb	r2, [r2, #0]
 8001146:	701a      	strb	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2203      	movs	r2, #3
 800114c:	4013      	ands	r3, r2
 800114e:	2b02      	cmp	r3, #2
 8001150:	d11a      	bne.n	8001188 <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	18d3      	adds	r3, r2, r3
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b21b      	sxth	r3, r3
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	b21a      	sxth	r2, r3
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	3301      	adds	r3, #1
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	18cb      	adds	r3, r1, r3
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	b21b      	sxth	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	b21a      	sxth	r2, r3
 8001174:	211a      	movs	r1, #26
 8001176:	187b      	adds	r3, r7, r1
 8001178:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	187a      	adds	r2, r7, r1
 8001184:	8812      	ldrh	r2, [r2, #0]
 8001186:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2203      	movs	r2, #3
 800118c:	4013      	ands	r3, r2
 800118e:	2b03      	cmp	r3, #3
 8001190:	d123      	bne.n	80011da <CRC_Handle_8+0x118>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	18d3      	adds	r3, r2, r3
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b21b      	sxth	r3, r3
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	3301      	adds	r3, #1
 80011a8:	68b9      	ldr	r1, [r7, #8]
 80011aa:	18cb      	adds	r3, r1, r3
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	211a      	movs	r1, #26
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	187a      	adds	r2, r7, r1
 80011c4:	8812      	ldrh	r2, [r2, #0]
 80011c6:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	3302      	adds	r3, #2
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	18d2      	adds	r2, r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	7812      	ldrb	r2, [r2, #0]
 80011d8:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
}
 80011e0:	0018      	movs	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b008      	add	sp, #32
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	e013      	b.n	8001222 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	18d3      	adds	r3, r2, r3
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	041a      	lsls	r2, r3, #16
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	68b9      	ldr	r1, [r7, #8]
 800120e:	18cb      	adds	r3, r1, r3
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	0019      	movs	r1, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	430a      	orrs	r2, r1
 800121a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	3301      	adds	r3, #1
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	085b      	lsrs	r3, r3, #1
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	429a      	cmp	r2, r3
 800122a:	d3e6      	bcc.n	80011fa <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	4013      	ands	r3, r2
 8001232:	d009      	beq.n	8001248 <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	18d3      	adds	r3, r2, r3
 8001242:	881a      	ldrh	r2, [r3, #0]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
}
 800124e:	0018      	movs	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	b006      	add	sp, #24
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b086      	sub	sp, #24
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001262:	2117      	movs	r1, #23
 8001264:	187b      	adds	r3, r7, r1
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800126a:	231f      	movs	r3, #31
 800126c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	2201      	movs	r2, #1
 8001272:	4013      	ands	r3, r2
 8001274:	d103      	bne.n	800127e <HAL_CRCEx_Polynomial_Set+0x28>
  {
    status =  HAL_ERROR;
 8001276:	187b      	adds	r3, r7, r1
 8001278:	2201      	movs	r2, #1
 800127a:	701a      	strb	r2, [r3, #0]
 800127c:	e045      	b.n	800130a <HAL_CRCEx_Polynomial_Set+0xb4>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800127e:	46c0      	nop			@ (mov r8, r8)
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1e5a      	subs	r2, r3, #1
 8001284:	613a      	str	r2, [r7, #16]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d008      	beq.n	800129c <HAL_CRCEx_Polynomial_Set+0x46>
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	221f      	movs	r2, #31
 800128e:	4013      	ands	r3, r2
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	40da      	lsrs	r2, r3
 8001294:	0013      	movs	r3, r2
 8001296:	2201      	movs	r2, #1
 8001298:	4013      	ands	r3, r2
 800129a:	d0f1      	beq.n	8001280 <HAL_CRCEx_Polynomial_Set+0x2a>
    {
    }

    switch (PolyLength)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b18      	cmp	r3, #24
 80012a0:	d00f      	beq.n	80012c2 <HAL_CRCEx_Polynomial_Set+0x6c>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b18      	cmp	r3, #24
 80012a6:	d824      	bhi.n	80012f2 <HAL_CRCEx_Polynomial_Set+0x9c>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b10      	cmp	r3, #16
 80012ac:	d011      	beq.n	80012d2 <HAL_CRCEx_Polynomial_Set+0x7c>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b10      	cmp	r3, #16
 80012b2:	d81e      	bhi.n	80012f2 <HAL_CRCEx_Polynomial_Set+0x9c>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d020      	beq.n	80012fc <HAL_CRCEx_Polynomial_Set+0xa6>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b08      	cmp	r3, #8
 80012be:	d010      	beq.n	80012e2 <HAL_CRCEx_Polynomial_Set+0x8c>
 80012c0:	e017      	b.n	80012f2 <HAL_CRCEx_Polynomial_Set+0x9c>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	2b06      	cmp	r3, #6
 80012c6:	d91b      	bls.n	8001300 <HAL_CRCEx_Polynomial_Set+0xaa>
        {
          status =   HAL_ERROR;
 80012c8:	2317      	movs	r3, #23
 80012ca:	18fb      	adds	r3, r7, r3
 80012cc:	2201      	movs	r2, #1
 80012ce:	701a      	strb	r2, [r3, #0]
        }
        break;
 80012d0:	e016      	b.n	8001300 <HAL_CRCEx_Polynomial_Set+0xaa>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	2b07      	cmp	r3, #7
 80012d6:	d915      	bls.n	8001304 <HAL_CRCEx_Polynomial_Set+0xae>
        {
          status =   HAL_ERROR;
 80012d8:	2317      	movs	r3, #23
 80012da:	18fb      	adds	r3, r7, r3
 80012dc:	2201      	movs	r2, #1
 80012de:	701a      	strb	r2, [r3, #0]
        }
        break;
 80012e0:	e010      	b.n	8001304 <HAL_CRCEx_Polynomial_Set+0xae>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	d90f      	bls.n	8001308 <HAL_CRCEx_Polynomial_Set+0xb2>
        {
          status =   HAL_ERROR;
 80012e8:	2317      	movs	r3, #23
 80012ea:	18fb      	adds	r3, r7, r3
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
        }
        break;
 80012f0:	e00a      	b.n	8001308 <HAL_CRCEx_Polynomial_Set+0xb2>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80012f2:	2317      	movs	r3, #23
 80012f4:	18fb      	adds	r3, r7, r3
 80012f6:	2201      	movs	r2, #1
 80012f8:	701a      	strb	r2, [r3, #0]
        break;
 80012fa:	e006      	b.n	800130a <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 80012fc:	46c0      	nop			@ (mov r8, r8)
 80012fe:	e004      	b.n	800130a <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8001300:	46c0      	nop			@ (mov r8, r8)
 8001302:	e002      	b.n	800130a <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8001304:	46c0      	nop			@ (mov r8, r8)
 8001306:	e000      	b.n	800130a <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8001308:	46c0      	nop			@ (mov r8, r8)
    }
  }
  if (status == HAL_OK)
 800130a:	2317      	movs	r3, #23
 800130c:	18fb      	adds	r3, r7, r3
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10e      	bne.n	8001332 <HAL_CRCEx_Polynomial_Set+0xdc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68ba      	ldr	r2, [r7, #8]
 800131a:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	2218      	movs	r2, #24
 8001324:	4393      	bics	r3, r2
 8001326:	0019      	movs	r1, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	430a      	orrs	r2, r1
 8001330:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001332:	2317      	movs	r3, #23
 8001334:	18fb      	adds	r3, r7, r3
 8001336:	781b      	ldrb	r3, [r3, #0]
}
 8001338:	0018      	movs	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	b006      	add	sp, #24
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800134e:	e147      	b.n	80015e0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2101      	movs	r1, #1
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	4091      	lsls	r1, r2
 800135a:	000a      	movs	r2, r1
 800135c:	4013      	ands	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d100      	bne.n	8001368 <HAL_GPIO_Init+0x28>
 8001366:	e138      	b.n	80015da <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2203      	movs	r2, #3
 800136e:	4013      	ands	r3, r2
 8001370:	2b01      	cmp	r3, #1
 8001372:	d005      	beq.n	8001380 <HAL_GPIO_Init+0x40>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2203      	movs	r2, #3
 800137a:	4013      	ands	r3, r2
 800137c:	2b02      	cmp	r3, #2
 800137e:	d130      	bne.n	80013e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	2203      	movs	r2, #3
 800138c:	409a      	lsls	r2, r3
 800138e:	0013      	movs	r3, r2
 8001390:	43da      	mvns	r2, r3
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	68da      	ldr	r2, [r3, #12]
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	409a      	lsls	r2, r3
 80013a2:	0013      	movs	r3, r2
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013b6:	2201      	movs	r2, #1
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
 80013bc:	0013      	movs	r3, r2
 80013be:	43da      	mvns	r2, r3
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	091b      	lsrs	r3, r3, #4
 80013cc:	2201      	movs	r2, #1
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
 80013d4:	0013      	movs	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2203      	movs	r2, #3
 80013e8:	4013      	ands	r3, r2
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d017      	beq.n	800141e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	2203      	movs	r2, #3
 80013fa:	409a      	lsls	r2, r3
 80013fc:	0013      	movs	r3, r2
 80013fe:	43da      	mvns	r2, r3
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	409a      	lsls	r2, r3
 8001410:	0013      	movs	r3, r2
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2203      	movs	r2, #3
 8001424:	4013      	ands	r3, r2
 8001426:	2b02      	cmp	r3, #2
 8001428:	d123      	bne.n	8001472 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	08da      	lsrs	r2, r3, #3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3208      	adds	r2, #8
 8001432:	0092      	lsls	r2, r2, #2
 8001434:	58d3      	ldr	r3, [r2, r3]
 8001436:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	2207      	movs	r2, #7
 800143c:	4013      	ands	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	220f      	movs	r2, #15
 8001442:	409a      	lsls	r2, r3
 8001444:	0013      	movs	r3, r2
 8001446:	43da      	mvns	r2, r3
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	691a      	ldr	r2, [r3, #16]
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	2107      	movs	r1, #7
 8001456:	400b      	ands	r3, r1
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	409a      	lsls	r2, r3
 800145c:	0013      	movs	r3, r2
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	08da      	lsrs	r2, r3, #3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3208      	adds	r2, #8
 800146c:	0092      	lsls	r2, r2, #2
 800146e:	6939      	ldr	r1, [r7, #16]
 8001470:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	2203      	movs	r2, #3
 800147e:	409a      	lsls	r2, r3
 8001480:	0013      	movs	r3, r2
 8001482:	43da      	mvns	r2, r3
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2203      	movs	r2, #3
 8001490:	401a      	ands	r2, r3
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	409a      	lsls	r2, r3
 8001498:	0013      	movs	r3, r2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	23c0      	movs	r3, #192	@ 0xc0
 80014ac:	029b      	lsls	r3, r3, #10
 80014ae:	4013      	ands	r3, r2
 80014b0:	d100      	bne.n	80014b4 <HAL_GPIO_Init+0x174>
 80014b2:	e092      	b.n	80015da <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80014b4:	4a50      	ldr	r2, [pc, #320]	@ (80015f8 <HAL_GPIO_Init+0x2b8>)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	089b      	lsrs	r3, r3, #2
 80014ba:	3318      	adds	r3, #24
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	589b      	ldr	r3, [r3, r2]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	2203      	movs	r2, #3
 80014c6:	4013      	ands	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	220f      	movs	r2, #15
 80014cc:	409a      	lsls	r2, r3
 80014ce:	0013      	movs	r3, r2
 80014d0:	43da      	mvns	r2, r3
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	23a0      	movs	r3, #160	@ 0xa0
 80014dc:	05db      	lsls	r3, r3, #23
 80014de:	429a      	cmp	r2, r3
 80014e0:	d013      	beq.n	800150a <HAL_GPIO_Init+0x1ca>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a45      	ldr	r2, [pc, #276]	@ (80015fc <HAL_GPIO_Init+0x2bc>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d00d      	beq.n	8001506 <HAL_GPIO_Init+0x1c6>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a44      	ldr	r2, [pc, #272]	@ (8001600 <HAL_GPIO_Init+0x2c0>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d007      	beq.n	8001502 <HAL_GPIO_Init+0x1c2>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a43      	ldr	r2, [pc, #268]	@ (8001604 <HAL_GPIO_Init+0x2c4>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d101      	bne.n	80014fe <HAL_GPIO_Init+0x1be>
 80014fa:	2303      	movs	r3, #3
 80014fc:	e006      	b.n	800150c <HAL_GPIO_Init+0x1cc>
 80014fe:	2305      	movs	r3, #5
 8001500:	e004      	b.n	800150c <HAL_GPIO_Init+0x1cc>
 8001502:	2302      	movs	r3, #2
 8001504:	e002      	b.n	800150c <HAL_GPIO_Init+0x1cc>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <HAL_GPIO_Init+0x1cc>
 800150a:	2300      	movs	r3, #0
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	2103      	movs	r1, #3
 8001510:	400a      	ands	r2, r1
 8001512:	00d2      	lsls	r2, r2, #3
 8001514:	4093      	lsls	r3, r2
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800151c:	4936      	ldr	r1, [pc, #216]	@ (80015f8 <HAL_GPIO_Init+0x2b8>)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	089b      	lsrs	r3, r3, #2
 8001522:	3318      	adds	r3, #24
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800152a:	4b33      	ldr	r3, [pc, #204]	@ (80015f8 <HAL_GPIO_Init+0x2b8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	43da      	mvns	r2, r3
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	2380      	movs	r3, #128	@ 0x80
 8001540:	035b      	lsls	r3, r3, #13
 8001542:	4013      	ands	r3, r2
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4313      	orrs	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800154e:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <HAL_GPIO_Init+0x2b8>)
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001554:	4b28      	ldr	r3, [pc, #160]	@ (80015f8 <HAL_GPIO_Init+0x2b8>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	43da      	mvns	r2, r3
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	2380      	movs	r3, #128	@ 0x80
 800156a:	039b      	lsls	r3, r3, #14
 800156c:	4013      	ands	r3, r2
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001578:	4b1f      	ldr	r3, [pc, #124]	@ (80015f8 <HAL_GPIO_Init+0x2b8>)
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800157e:	4a1e      	ldr	r2, [pc, #120]	@ (80015f8 <HAL_GPIO_Init+0x2b8>)
 8001580:	2384      	movs	r3, #132	@ 0x84
 8001582:	58d3      	ldr	r3, [r2, r3]
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	43da      	mvns	r2, r3
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	2380      	movs	r3, #128	@ 0x80
 8001596:	029b      	lsls	r3, r3, #10
 8001598:	4013      	ands	r3, r2
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015a4:	4914      	ldr	r1, [pc, #80]	@ (80015f8 <HAL_GPIO_Init+0x2b8>)
 80015a6:	2284      	movs	r2, #132	@ 0x84
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80015ac:	4a12      	ldr	r2, [pc, #72]	@ (80015f8 <HAL_GPIO_Init+0x2b8>)
 80015ae:	2380      	movs	r3, #128	@ 0x80
 80015b0:	58d3      	ldr	r3, [r2, r3]
 80015b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	43da      	mvns	r2, r3
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	2380      	movs	r3, #128	@ 0x80
 80015c4:	025b      	lsls	r3, r3, #9
 80015c6:	4013      	ands	r3, r2
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015d2:	4909      	ldr	r1, [pc, #36]	@ (80015f8 <HAL_GPIO_Init+0x2b8>)
 80015d4:	2280      	movs	r2, #128	@ 0x80
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	3301      	adds	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	40da      	lsrs	r2, r3
 80015e8:	1e13      	subs	r3, r2, #0
 80015ea:	d000      	beq.n	80015ee <HAL_GPIO_Init+0x2ae>
 80015ec:	e6b0      	b.n	8001350 <HAL_GPIO_Init+0x10>
  }
}
 80015ee:	46c0      	nop			@ (mov r8, r8)
 80015f0:	46c0      	nop			@ (mov r8, r8)
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b006      	add	sp, #24
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40021800 	.word	0x40021800
 80015fc:	50000400 	.word	0x50000400
 8001600:	50000800 	.word	0x50000800
 8001604:	50000c00 	.word	0x50000c00

08001608 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001610:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a19      	ldr	r2, [pc, #100]	@ (800167c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001616:	4013      	ands	r3, r2
 8001618:	0019      	movs	r1, r3
 800161a:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	430a      	orrs	r2, r1
 8001620:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	2380      	movs	r3, #128	@ 0x80
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	429a      	cmp	r2, r3
 800162a:	d11f      	bne.n	800166c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800162c:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	0013      	movs	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	189b      	adds	r3, r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4912      	ldr	r1, [pc, #72]	@ (8001684 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800163a:	0018      	movs	r0, r3
 800163c:	f7fe fd6c 	bl	8000118 <__udivsi3>
 8001640:	0003      	movs	r3, r0
 8001642:	3301      	adds	r3, #1
 8001644:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001646:	e008      	b.n	800165a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	3b01      	subs	r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	e001      	b.n	800165a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e009      	b.n	800166e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800165a:	4b07      	ldr	r3, [pc, #28]	@ (8001678 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800165c:	695a      	ldr	r2, [r3, #20]
 800165e:	2380      	movs	r3, #128	@ 0x80
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	401a      	ands	r2, r3
 8001664:	2380      	movs	r3, #128	@ 0x80
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	429a      	cmp	r2, r3
 800166a:	d0ed      	beq.n	8001648 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	0018      	movs	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	b004      	add	sp, #16
 8001674:	bd80      	pop	{r7, pc}
 8001676:	46c0      	nop			@ (mov r8, r8)
 8001678:	40007000 	.word	0x40007000
 800167c:	fffff9ff 	.word	0xfffff9ff
 8001680:	20000004 	.word	0x20000004
 8001684:	000f4240 	.word	0x000f4240

08001688 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800168c:	4b03      	ldr	r3, [pc, #12]	@ (800169c <LL_RCC_GetAPB1Prescaler+0x14>)
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	23e0      	movs	r3, #224	@ 0xe0
 8001692:	01db      	lsls	r3, r3, #7
 8001694:	4013      	ands	r3, r2
}
 8001696:	0018      	movs	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40021000 	.word	0x40021000

080016a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e2fe      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2201      	movs	r2, #1
 80016b8:	4013      	ands	r3, r2
 80016ba:	d100      	bne.n	80016be <HAL_RCC_OscConfig+0x1e>
 80016bc:	e07c      	b.n	80017b8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016be:	4bc3      	ldr	r3, [pc, #780]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2238      	movs	r2, #56	@ 0x38
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016c8:	4bc0      	ldr	r3, [pc, #768]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	2203      	movs	r2, #3
 80016ce:	4013      	ands	r3, r2
 80016d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	2b10      	cmp	r3, #16
 80016d6:	d102      	bne.n	80016de <HAL_RCC_OscConfig+0x3e>
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d002      	beq.n	80016e4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d10b      	bne.n	80016fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e4:	4bb9      	ldr	r3, [pc, #740]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	2380      	movs	r3, #128	@ 0x80
 80016ea:	029b      	lsls	r3, r3, #10
 80016ec:	4013      	ands	r3, r2
 80016ee:	d062      	beq.n	80017b6 <HAL_RCC_OscConfig+0x116>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d15e      	bne.n	80017b6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e2d9      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	2380      	movs	r3, #128	@ 0x80
 8001702:	025b      	lsls	r3, r3, #9
 8001704:	429a      	cmp	r2, r3
 8001706:	d107      	bne.n	8001718 <HAL_RCC_OscConfig+0x78>
 8001708:	4bb0      	ldr	r3, [pc, #704]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4baf      	ldr	r3, [pc, #700]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 800170e:	2180      	movs	r1, #128	@ 0x80
 8001710:	0249      	lsls	r1, r1, #9
 8001712:	430a      	orrs	r2, r1
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	e020      	b.n	800175a <HAL_RCC_OscConfig+0xba>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	23a0      	movs	r3, #160	@ 0xa0
 800171e:	02db      	lsls	r3, r3, #11
 8001720:	429a      	cmp	r2, r3
 8001722:	d10e      	bne.n	8001742 <HAL_RCC_OscConfig+0xa2>
 8001724:	4ba9      	ldr	r3, [pc, #676]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4ba8      	ldr	r3, [pc, #672]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 800172a:	2180      	movs	r1, #128	@ 0x80
 800172c:	02c9      	lsls	r1, r1, #11
 800172e:	430a      	orrs	r2, r1
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	4ba6      	ldr	r3, [pc, #664]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4ba5      	ldr	r3, [pc, #660]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001738:	2180      	movs	r1, #128	@ 0x80
 800173a:	0249      	lsls	r1, r1, #9
 800173c:	430a      	orrs	r2, r1
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e00b      	b.n	800175a <HAL_RCC_OscConfig+0xba>
 8001742:	4ba2      	ldr	r3, [pc, #648]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	4ba1      	ldr	r3, [pc, #644]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001748:	49a1      	ldr	r1, [pc, #644]	@ (80019d0 <HAL_RCC_OscConfig+0x330>)
 800174a:	400a      	ands	r2, r1
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	4b9f      	ldr	r3, [pc, #636]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	4b9e      	ldr	r3, [pc, #632]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001754:	499f      	ldr	r1, [pc, #636]	@ (80019d4 <HAL_RCC_OscConfig+0x334>)
 8001756:	400a      	ands	r2, r1
 8001758:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d014      	beq.n	800178c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001762:	f7ff fb1f 	bl	8000da4 <HAL_GetTick>
 8001766:	0003      	movs	r3, r0
 8001768:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800176c:	f7ff fb1a 	bl	8000da4 <HAL_GetTick>
 8001770:	0002      	movs	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b64      	cmp	r3, #100	@ 0x64
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e298      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800177e:	4b93      	ldr	r3, [pc, #588]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	2380      	movs	r3, #128	@ 0x80
 8001784:	029b      	lsls	r3, r3, #10
 8001786:	4013      	ands	r3, r2
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0xcc>
 800178a:	e015      	b.n	80017b8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff fb0a 	bl	8000da4 <HAL_GetTick>
 8001790:	0003      	movs	r3, r0
 8001792:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001796:	f7ff fb05 	bl	8000da4 <HAL_GetTick>
 800179a:	0002      	movs	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b64      	cmp	r3, #100	@ 0x64
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e283      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017a8:	4b88      	ldr	r3, [pc, #544]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2380      	movs	r3, #128	@ 0x80
 80017ae:	029b      	lsls	r3, r3, #10
 80017b0:	4013      	ands	r3, r2
 80017b2:	d1f0      	bne.n	8001796 <HAL_RCC_OscConfig+0xf6>
 80017b4:	e000      	b.n	80017b8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2202      	movs	r2, #2
 80017be:	4013      	ands	r3, r2
 80017c0:	d100      	bne.n	80017c4 <HAL_RCC_OscConfig+0x124>
 80017c2:	e099      	b.n	80018f8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c4:	4b81      	ldr	r3, [pc, #516]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2238      	movs	r2, #56	@ 0x38
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017ce:	4b7f      	ldr	r3, [pc, #508]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	2203      	movs	r2, #3
 80017d4:	4013      	ands	r3, r2
 80017d6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	2b10      	cmp	r3, #16
 80017dc:	d102      	bne.n	80017e4 <HAL_RCC_OscConfig+0x144>
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d002      	beq.n	80017ea <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d135      	bne.n	8001856 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017ea:	4b78      	ldr	r3, [pc, #480]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	2380      	movs	r3, #128	@ 0x80
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	4013      	ands	r3, r2
 80017f4:	d005      	beq.n	8001802 <HAL_RCC_OscConfig+0x162>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e256      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001802:	4b72      	ldr	r3, [pc, #456]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4a74      	ldr	r2, [pc, #464]	@ (80019d8 <HAL_RCC_OscConfig+0x338>)
 8001808:	4013      	ands	r3, r2
 800180a:	0019      	movs	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	021a      	lsls	r2, r3, #8
 8001812:	4b6e      	ldr	r3, [pc, #440]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001814:	430a      	orrs	r2, r1
 8001816:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d112      	bne.n	8001844 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800181e:	4b6b      	ldr	r3, [pc, #428]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a6e      	ldr	r2, [pc, #440]	@ (80019dc <HAL_RCC_OscConfig+0x33c>)
 8001824:	4013      	ands	r3, r2
 8001826:	0019      	movs	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691a      	ldr	r2, [r3, #16]
 800182c:	4b67      	ldr	r3, [pc, #412]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 800182e:	430a      	orrs	r2, r1
 8001830:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001832:	4b66      	ldr	r3, [pc, #408]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	0adb      	lsrs	r3, r3, #11
 8001838:	2207      	movs	r2, #7
 800183a:	4013      	ands	r3, r2
 800183c:	4a68      	ldr	r2, [pc, #416]	@ (80019e0 <HAL_RCC_OscConfig+0x340>)
 800183e:	40da      	lsrs	r2, r3
 8001840:	4b68      	ldr	r3, [pc, #416]	@ (80019e4 <HAL_RCC_OscConfig+0x344>)
 8001842:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001844:	4b68      	ldr	r3, [pc, #416]	@ (80019e8 <HAL_RCC_OscConfig+0x348>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	0018      	movs	r0, r3
 800184a:	f7ff fa4f 	bl	8000cec <HAL_InitTick>
 800184e:	1e03      	subs	r3, r0, #0
 8001850:	d051      	beq.n	80018f6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e22c      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d030      	beq.n	80018c0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800185e:	4b5b      	ldr	r3, [pc, #364]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a5e      	ldr	r2, [pc, #376]	@ (80019dc <HAL_RCC_OscConfig+0x33c>)
 8001864:	4013      	ands	r3, r2
 8001866:	0019      	movs	r1, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	4b57      	ldr	r3, [pc, #348]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 800186e:	430a      	orrs	r2, r1
 8001870:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001872:	4b56      	ldr	r3, [pc, #344]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4b55      	ldr	r3, [pc, #340]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001878:	2180      	movs	r1, #128	@ 0x80
 800187a:	0049      	lsls	r1, r1, #1
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff fa90 	bl	8000da4 <HAL_GetTick>
 8001884:	0003      	movs	r3, r0
 8001886:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188a:	f7ff fa8b 	bl	8000da4 <HAL_GetTick>
 800188e:	0002      	movs	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e209      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800189c:	4b4b      	ldr	r3, [pc, #300]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	2380      	movs	r3, #128	@ 0x80
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	4013      	ands	r3, r2
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a8:	4b48      	ldr	r3, [pc, #288]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	4a4a      	ldr	r2, [pc, #296]	@ (80019d8 <HAL_RCC_OscConfig+0x338>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	0019      	movs	r1, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	021a      	lsls	r2, r3, #8
 80018b8:	4b44      	ldr	r3, [pc, #272]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80018ba:	430a      	orrs	r2, r1
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	e01b      	b.n	80018f8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80018c0:	4b42      	ldr	r3, [pc, #264]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b41      	ldr	r3, [pc, #260]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80018c6:	4949      	ldr	r1, [pc, #292]	@ (80019ec <HAL_RCC_OscConfig+0x34c>)
 80018c8:	400a      	ands	r2, r1
 80018ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018cc:	f7ff fa6a 	bl	8000da4 <HAL_GetTick>
 80018d0:	0003      	movs	r3, r0
 80018d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d6:	f7ff fa65 	bl	8000da4 <HAL_GetTick>
 80018da:	0002      	movs	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e1e3      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018e8:	4b38      	ldr	r3, [pc, #224]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	2380      	movs	r3, #128	@ 0x80
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	4013      	ands	r3, r2
 80018f2:	d1f0      	bne.n	80018d6 <HAL_RCC_OscConfig+0x236>
 80018f4:	e000      	b.n	80018f8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2208      	movs	r2, #8
 80018fe:	4013      	ands	r3, r2
 8001900:	d047      	beq.n	8001992 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001902:	4b32      	ldr	r3, [pc, #200]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2238      	movs	r2, #56	@ 0x38
 8001908:	4013      	ands	r3, r2
 800190a:	2b18      	cmp	r3, #24
 800190c:	d10a      	bne.n	8001924 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800190e:	4b2f      	ldr	r3, [pc, #188]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001912:	2202      	movs	r2, #2
 8001914:	4013      	ands	r3, r2
 8001916:	d03c      	beq.n	8001992 <HAL_RCC_OscConfig+0x2f2>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d138      	bne.n	8001992 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e1c5      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d019      	beq.n	8001960 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800192c:	4b27      	ldr	r3, [pc, #156]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 800192e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001930:	4b26      	ldr	r3, [pc, #152]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001932:	2101      	movs	r1, #1
 8001934:	430a      	orrs	r2, r1
 8001936:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff fa34 	bl	8000da4 <HAL_GetTick>
 800193c:	0003      	movs	r3, r0
 800193e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001942:	f7ff fa2f 	bl	8000da4 <HAL_GetTick>
 8001946:	0002      	movs	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e1ad      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001954:	4b1d      	ldr	r3, [pc, #116]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001958:	2202      	movs	r2, #2
 800195a:	4013      	ands	r3, r2
 800195c:	d0f1      	beq.n	8001942 <HAL_RCC_OscConfig+0x2a2>
 800195e:	e018      	b.n	8001992 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001960:	4b1a      	ldr	r3, [pc, #104]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001962:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001964:	4b19      	ldr	r3, [pc, #100]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001966:	2101      	movs	r1, #1
 8001968:	438a      	bics	r2, r1
 800196a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196c:	f7ff fa1a 	bl	8000da4 <HAL_GetTick>
 8001970:	0003      	movs	r3, r0
 8001972:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001976:	f7ff fa15 	bl	8000da4 <HAL_GetTick>
 800197a:	0002      	movs	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e193      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001988:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 800198a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800198c:	2202      	movs	r2, #2
 800198e:	4013      	ands	r3, r2
 8001990:	d1f1      	bne.n	8001976 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2204      	movs	r2, #4
 8001998:	4013      	ands	r3, r2
 800199a:	d100      	bne.n	800199e <HAL_RCC_OscConfig+0x2fe>
 800199c:	e0c6      	b.n	8001b2c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800199e:	231f      	movs	r3, #31
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019a6:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2238      	movs	r2, #56	@ 0x38
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b20      	cmp	r3, #32
 80019b0:	d11e      	bne.n	80019f0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80019b2:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80019b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019b6:	2202      	movs	r2, #2
 80019b8:	4013      	ands	r3, r2
 80019ba:	d100      	bne.n	80019be <HAL_RCC_OscConfig+0x31e>
 80019bc:	e0b6      	b.n	8001b2c <HAL_RCC_OscConfig+0x48c>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d000      	beq.n	80019c8 <HAL_RCC_OscConfig+0x328>
 80019c6:	e0b1      	b.n	8001b2c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e171      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
 80019cc:	40021000 	.word	0x40021000
 80019d0:	fffeffff 	.word	0xfffeffff
 80019d4:	fffbffff 	.word	0xfffbffff
 80019d8:	ffff80ff 	.word	0xffff80ff
 80019dc:	ffffc7ff 	.word	0xffffc7ff
 80019e0:	00f42400 	.word	0x00f42400
 80019e4:	20000004 	.word	0x20000004
 80019e8:	20000008 	.word	0x20000008
 80019ec:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019f0:	4bb1      	ldr	r3, [pc, #708]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 80019f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019f4:	2380      	movs	r3, #128	@ 0x80
 80019f6:	055b      	lsls	r3, r3, #21
 80019f8:	4013      	ands	r3, r2
 80019fa:	d101      	bne.n	8001a00 <HAL_RCC_OscConfig+0x360>
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <HAL_RCC_OscConfig+0x362>
 8001a00:	2300      	movs	r3, #0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d011      	beq.n	8001a2a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a06:	4bac      	ldr	r3, [pc, #688]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001a08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a0a:	4bab      	ldr	r3, [pc, #684]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001a0c:	2180      	movs	r1, #128	@ 0x80
 8001a0e:	0549      	lsls	r1, r1, #21
 8001a10:	430a      	orrs	r2, r1
 8001a12:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a14:	4ba8      	ldr	r3, [pc, #672]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001a16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a18:	2380      	movs	r3, #128	@ 0x80
 8001a1a:	055b      	lsls	r3, r3, #21
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001a22:	231f      	movs	r3, #31
 8001a24:	18fb      	adds	r3, r7, r3
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a2a:	4ba4      	ldr	r3, [pc, #656]	@ (8001cbc <HAL_RCC_OscConfig+0x61c>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	2380      	movs	r3, #128	@ 0x80
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4013      	ands	r3, r2
 8001a34:	d11a      	bne.n	8001a6c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a36:	4ba1      	ldr	r3, [pc, #644]	@ (8001cbc <HAL_RCC_OscConfig+0x61c>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4ba0      	ldr	r3, [pc, #640]	@ (8001cbc <HAL_RCC_OscConfig+0x61c>)
 8001a3c:	2180      	movs	r1, #128	@ 0x80
 8001a3e:	0049      	lsls	r1, r1, #1
 8001a40:	430a      	orrs	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001a44:	f7ff f9ae 	bl	8000da4 <HAL_GetTick>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a4e:	f7ff f9a9 	bl	8000da4 <HAL_GetTick>
 8001a52:	0002      	movs	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e127      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a60:	4b96      	ldr	r3, [pc, #600]	@ (8001cbc <HAL_RCC_OscConfig+0x61c>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	2380      	movs	r3, #128	@ 0x80
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d0f0      	beq.n	8001a4e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d106      	bne.n	8001a82 <HAL_RCC_OscConfig+0x3e2>
 8001a74:	4b90      	ldr	r3, [pc, #576]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001a76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a78:	4b8f      	ldr	r3, [pc, #572]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a80:	e01c      	b.n	8001abc <HAL_RCC_OscConfig+0x41c>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b05      	cmp	r3, #5
 8001a88:	d10c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x404>
 8001a8a:	4b8b      	ldr	r3, [pc, #556]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001a8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a8e:	4b8a      	ldr	r3, [pc, #552]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001a90:	2104      	movs	r1, #4
 8001a92:	430a      	orrs	r2, r1
 8001a94:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a96:	4b88      	ldr	r3, [pc, #544]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001a98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a9a:	4b87      	ldr	r3, [pc, #540]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001aa2:	e00b      	b.n	8001abc <HAL_RCC_OscConfig+0x41c>
 8001aa4:	4b84      	ldr	r3, [pc, #528]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001aa6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001aa8:	4b83      	ldr	r3, [pc, #524]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001aaa:	2101      	movs	r1, #1
 8001aac:	438a      	bics	r2, r1
 8001aae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ab0:	4b81      	ldr	r3, [pc, #516]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001ab2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ab4:	4b80      	ldr	r3, [pc, #512]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001ab6:	2104      	movs	r1, #4
 8001ab8:	438a      	bics	r2, r1
 8001aba:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d014      	beq.n	8001aee <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac4:	f7ff f96e 	bl	8000da4 <HAL_GetTick>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001acc:	e009      	b.n	8001ae2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ace:	f7ff f969 	bl	8000da4 <HAL_GetTick>
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	4a79      	ldr	r2, [pc, #484]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e0e6      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ae2:	4b75      	ldr	r3, [pc, #468]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x42e>
 8001aec:	e013      	b.n	8001b16 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aee:	f7ff f959 	bl	8000da4 <HAL_GetTick>
 8001af2:	0003      	movs	r3, r0
 8001af4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001af6:	e009      	b.n	8001b0c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af8:	f7ff f954 	bl	8000da4 <HAL_GetTick>
 8001afc:	0002      	movs	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	4a6f      	ldr	r2, [pc, #444]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e0d1      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b0c:	4b6a      	ldr	r3, [pc, #424]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b10:	2202      	movs	r2, #2
 8001b12:	4013      	ands	r3, r2
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b16:	231f      	movs	r3, #31
 8001b18:	18fb      	adds	r3, r7, r3
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d105      	bne.n	8001b2c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b20:	4b65      	ldr	r3, [pc, #404]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001b22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b24:	4b64      	ldr	r3, [pc, #400]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001b26:	4967      	ldr	r1, [pc, #412]	@ (8001cc4 <HAL_RCC_OscConfig+0x624>)
 8001b28:	400a      	ands	r2, r1
 8001b2a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d100      	bne.n	8001b36 <HAL_RCC_OscConfig+0x496>
 8001b34:	e0bb      	b.n	8001cae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b36:	4b60      	ldr	r3, [pc, #384]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2238      	movs	r2, #56	@ 0x38
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2b10      	cmp	r3, #16
 8001b40:	d100      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4a4>
 8001b42:	e07b      	b.n	8001c3c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d156      	bne.n	8001bfa <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4c:	4b5a      	ldr	r3, [pc, #360]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b59      	ldr	r3, [pc, #356]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001b52:	495d      	ldr	r1, [pc, #372]	@ (8001cc8 <HAL_RCC_OscConfig+0x628>)
 8001b54:	400a      	ands	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b58:	f7ff f924 	bl	8000da4 <HAL_GetTick>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b62:	f7ff f91f 	bl	8000da4 <HAL_GetTick>
 8001b66:	0002      	movs	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e09d      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b74:	4b50      	ldr	r3, [pc, #320]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	2380      	movs	r3, #128	@ 0x80
 8001b7a:	049b      	lsls	r3, r3, #18
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d1f0      	bne.n	8001b62 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b80:	4b4d      	ldr	r3, [pc, #308]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	4a51      	ldr	r2, [pc, #324]	@ (8001ccc <HAL_RCC_OscConfig+0x62c>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	0019      	movs	r1, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a1a      	ldr	r2, [r3, #32]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bac:	431a      	orrs	r2, r3
 8001bae:	4b42      	ldr	r3, [pc, #264]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bb4:	4b40      	ldr	r3, [pc, #256]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b3f      	ldr	r3, [pc, #252]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001bba:	2180      	movs	r1, #128	@ 0x80
 8001bbc:	0449      	lsls	r1, r1, #17
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001bc2:	4b3d      	ldr	r3, [pc, #244]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	4b3c      	ldr	r3, [pc, #240]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001bc8:	2180      	movs	r1, #128	@ 0x80
 8001bca:	0549      	lsls	r1, r1, #21
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7ff f8e8 	bl	8000da4 <HAL_GetTick>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bda:	f7ff f8e3 	bl	8000da4 <HAL_GetTick>
 8001bde:	0002      	movs	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e061      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bec:	4b32      	ldr	r3, [pc, #200]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2380      	movs	r3, #128	@ 0x80
 8001bf2:	049b      	lsls	r3, r3, #18
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x53a>
 8001bf8:	e059      	b.n	8001cae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001c00:	4931      	ldr	r1, [pc, #196]	@ (8001cc8 <HAL_RCC_OscConfig+0x628>)
 8001c02:	400a      	ands	r2, r1
 8001c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c06:	f7ff f8cd 	bl	8000da4 <HAL_GetTick>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c10:	f7ff f8c8 	bl	8000da4 <HAL_GetTick>
 8001c14:	0002      	movs	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e046      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c22:	4b25      	ldr	r3, [pc, #148]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	2380      	movs	r3, #128	@ 0x80
 8001c28:	049b      	lsls	r3, r3, #18
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001c2e:	4b22      	ldr	r3, [pc, #136]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	4b21      	ldr	r3, [pc, #132]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001c34:	4926      	ldr	r1, [pc, #152]	@ (8001cd0 <HAL_RCC_OscConfig+0x630>)
 8001c36:	400a      	ands	r2, r1
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	e038      	b.n	8001cae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e033      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001c48:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2203      	movs	r2, #3
 8001c52:	401a      	ands	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d126      	bne.n	8001caa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	2270      	movs	r2, #112	@ 0x70
 8001c60:	401a      	ands	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d11f      	bne.n	8001caa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	23fe      	movs	r3, #254	@ 0xfe
 8001c6e:	01db      	lsls	r3, r3, #7
 8001c70:	401a      	ands	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c76:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d116      	bne.n	8001caa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	23f8      	movs	r3, #248	@ 0xf8
 8001c80:	039b      	lsls	r3, r3, #14
 8001c82:	401a      	ands	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d10e      	bne.n	8001caa <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	23e0      	movs	r3, #224	@ 0xe0
 8001c90:	051b      	lsls	r3, r3, #20
 8001c92:	401a      	ands	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d106      	bne.n	8001caa <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	0f5b      	lsrs	r3, r3, #29
 8001ca0:	075a      	lsls	r2, r3, #29
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d001      	beq.n	8001cae <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b008      	add	sp, #32
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40007000 	.word	0x40007000
 8001cc0:	00001388 	.word	0x00001388
 8001cc4:	efffffff 	.word	0xefffffff
 8001cc8:	feffffff 	.word	0xfeffffff
 8001ccc:	11c1808c 	.word	0x11c1808c
 8001cd0:	eefefffc 	.word	0xeefefffc

08001cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0e9      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce8:	4b76      	ldr	r3, [pc, #472]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2207      	movs	r2, #7
 8001cee:	4013      	ands	r3, r2
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d91e      	bls.n	8001d34 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf6:	4b73      	ldr	r3, [pc, #460]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2207      	movs	r2, #7
 8001cfc:	4393      	bics	r3, r2
 8001cfe:	0019      	movs	r1, r3
 8001d00:	4b70      	ldr	r3, [pc, #448]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d08:	f7ff f84c 	bl	8000da4 <HAL_GetTick>
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d10:	e009      	b.n	8001d26 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d12:	f7ff f847 	bl	8000da4 <HAL_GetTick>
 8001d16:	0002      	movs	r2, r0
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1f4>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e0ca      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d26:	4b67      	ldr	r3, [pc, #412]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d1ee      	bne.n	8001d12 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2202      	movs	r2, #2
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d015      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2204      	movs	r2, #4
 8001d44:	4013      	ands	r3, r2
 8001d46:	d006      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d48:	4b60      	ldr	r3, [pc, #384]	@ (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	4b5f      	ldr	r3, [pc, #380]	@ (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001d4e:	21e0      	movs	r1, #224	@ 0xe0
 8001d50:	01c9      	lsls	r1, r1, #7
 8001d52:	430a      	orrs	r2, r1
 8001d54:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d56:	4b5d      	ldr	r3, [pc, #372]	@ (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	4a5d      	ldr	r2, [pc, #372]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1fc>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	0019      	movs	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	4b59      	ldr	r3, [pc, #356]	@ (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001d66:	430a      	orrs	r2, r1
 8001d68:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	4013      	ands	r3, r2
 8001d72:	d057      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d107      	bne.n	8001d8c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d7c:	4b53      	ldr	r3, [pc, #332]	@ (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	2380      	movs	r3, #128	@ 0x80
 8001d82:	029b      	lsls	r3, r3, #10
 8001d84:	4013      	ands	r3, r2
 8001d86:	d12b      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e097      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d107      	bne.n	8001da4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d94:	4b4d      	ldr	r3, [pc, #308]	@ (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	2380      	movs	r3, #128	@ 0x80
 8001d9a:	049b      	lsls	r3, r3, #18
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d11f      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e08b      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d107      	bne.n	8001dbc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dac:	4b47      	ldr	r3, [pc, #284]	@ (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	2380      	movs	r3, #128	@ 0x80
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4013      	ands	r3, r2
 8001db6:	d113      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e07f      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d106      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dc4:	4b41      	ldr	r3, [pc, #260]	@ (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001dc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dc8:	2202      	movs	r2, #2
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d108      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e074      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dd2:	4b3e      	ldr	r3, [pc, #248]	@ (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e06d      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001de0:	4b3a      	ldr	r3, [pc, #232]	@ (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2207      	movs	r2, #7
 8001de6:	4393      	bics	r3, r2
 8001de8:	0019      	movs	r1, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	4b37      	ldr	r3, [pc, #220]	@ (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001df0:	430a      	orrs	r2, r1
 8001df2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001df4:	f7fe ffd6 	bl	8000da4 <HAL_GetTick>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfc:	e009      	b.n	8001e12 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfe:	f7fe ffd1 	bl	8000da4 <HAL_GetTick>
 8001e02:	0002      	movs	r2, r0
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	4a2f      	ldr	r2, [pc, #188]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1f4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e054      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e12:	4b2e      	ldr	r3, [pc, #184]	@ (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2238      	movs	r2, #56	@ 0x38
 8001e18:	401a      	ands	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d1ec      	bne.n	8001dfe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e24:	4b27      	ldr	r3, [pc, #156]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2207      	movs	r2, #7
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d21e      	bcs.n	8001e70 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b24      	ldr	r3, [pc, #144]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2207      	movs	r2, #7
 8001e38:	4393      	bics	r3, r2
 8001e3a:	0019      	movs	r1, r3
 8001e3c:	4b21      	ldr	r3, [pc, #132]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e44:	f7fe ffae 	bl	8000da4 <HAL_GetTick>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e4c:	e009      	b.n	8001e62 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4e:	f7fe ffa9 	bl	8000da4 <HAL_GetTick>
 8001e52:	0002      	movs	r2, r0
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1f4>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e02c      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e62:	4b18      	ldr	r3, [pc, #96]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2207      	movs	r2, #7
 8001e68:	4013      	ands	r3, r2
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d1ee      	bne.n	8001e4e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2204      	movs	r2, #4
 8001e76:	4013      	ands	r3, r2
 8001e78:	d009      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e7a:	4b14      	ldr	r3, [pc, #80]	@ (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	4a15      	ldr	r2, [pc, #84]	@ (8001ed4 <HAL_RCC_ClockConfig+0x200>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	0019      	movs	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	4b10      	ldr	r3, [pc, #64]	@ (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e8e:	f000 f829 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 8001e92:	0001      	movs	r1, r0
 8001e94:	4b0d      	ldr	r3, [pc, #52]	@ (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	220f      	movs	r2, #15
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed8 <HAL_RCC_ClockConfig+0x204>)
 8001ea0:	0092      	lsls	r2, r2, #2
 8001ea2:	58d3      	ldr	r3, [r2, r3]
 8001ea4:	221f      	movs	r2, #31
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	000a      	movs	r2, r1
 8001eaa:	40da      	lsrs	r2, r3
 8001eac:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <HAL_RCC_ClockConfig+0x208>)
 8001eae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <HAL_RCC_ClockConfig+0x20c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f7fe ff19 	bl	8000cec <HAL_InitTick>
 8001eba:	0003      	movs	r3, r0
}
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b004      	add	sp, #16
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40022000 	.word	0x40022000
 8001ec8:	00001388 	.word	0x00001388
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	fffff0ff 	.word	0xfffff0ff
 8001ed4:	ffff8fff 	.word	0xffff8fff
 8001ed8:	08004214 	.word	0x08004214
 8001edc:	20000004 	.word	0x20000004
 8001ee0:	20000008 	.word	0x20000008

08001ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eea:	4b3c      	ldr	r3, [pc, #240]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2238      	movs	r2, #56	@ 0x38
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d10f      	bne.n	8001f14 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ef4:	4b39      	ldr	r3, [pc, #228]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	0adb      	lsrs	r3, r3, #11
 8001efa:	2207      	movs	r2, #7
 8001efc:	4013      	ands	r3, r2
 8001efe:	2201      	movs	r2, #1
 8001f00:	409a      	lsls	r2, r3
 8001f02:	0013      	movs	r3, r2
 8001f04:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f06:	6839      	ldr	r1, [r7, #0]
 8001f08:	4835      	ldr	r0, [pc, #212]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f0a:	f7fe f905 	bl	8000118 <__udivsi3>
 8001f0e:	0003      	movs	r3, r0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	e05d      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f14:	4b31      	ldr	r3, [pc, #196]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2238      	movs	r2, #56	@ 0x38
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d102      	bne.n	8001f26 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f20:	4b30      	ldr	r3, [pc, #192]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	e054      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f26:	4b2d      	ldr	r3, [pc, #180]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2238      	movs	r2, #56	@ 0x38
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b10      	cmp	r3, #16
 8001f30:	d138      	bne.n	8001fa4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f32:	4b2a      	ldr	r3, [pc, #168]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2203      	movs	r2, #3
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f3c:	4b27      	ldr	r3, [pc, #156]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	091b      	lsrs	r3, r3, #4
 8001f42:	2207      	movs	r2, #7
 8001f44:	4013      	ands	r3, r2
 8001f46:	3301      	adds	r3, #1
 8001f48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d10d      	bne.n	8001f6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	4824      	ldr	r0, [pc, #144]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f54:	f7fe f8e0 	bl	8000118 <__udivsi3>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	0a1b      	lsrs	r3, r3, #8
 8001f62:	227f      	movs	r2, #127	@ 0x7f
 8001f64:	4013      	ands	r3, r2
 8001f66:	434b      	muls	r3, r1
 8001f68:	617b      	str	r3, [r7, #20]
        break;
 8001f6a:	e00d      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	481c      	ldr	r0, [pc, #112]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f70:	f7fe f8d2 	bl	8000118 <__udivsi3>
 8001f74:	0003      	movs	r3, r0
 8001f76:	0019      	movs	r1, r3
 8001f78:	4b18      	ldr	r3, [pc, #96]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	227f      	movs	r2, #127	@ 0x7f
 8001f80:	4013      	ands	r3, r2
 8001f82:	434b      	muls	r3, r1
 8001f84:	617b      	str	r3, [r7, #20]
        break;
 8001f86:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f88:	4b14      	ldr	r3, [pc, #80]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0f5b      	lsrs	r3, r3, #29
 8001f8e:	2207      	movs	r2, #7
 8001f90:	4013      	ands	r3, r2
 8001f92:	3301      	adds	r3, #1
 8001f94:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	6978      	ldr	r0, [r7, #20]
 8001f9a:	f7fe f8bd 	bl	8000118 <__udivsi3>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	e015      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2238      	movs	r2, #56	@ 0x38
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b20      	cmp	r3, #32
 8001fae:	d103      	bne.n	8001fb8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001fb0:	2380      	movs	r3, #128	@ 0x80
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	e00b      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001fb8:	4b08      	ldr	r3, [pc, #32]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	2238      	movs	r2, #56	@ 0x38
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2b18      	cmp	r3, #24
 8001fc2:	d103      	bne.n	8001fcc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001fc4:	23fa      	movs	r3, #250	@ 0xfa
 8001fc6:	01db      	lsls	r3, r3, #7
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	e001      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fd0:	693b      	ldr	r3, [r7, #16]
}
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	b006      	add	sp, #24
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	46c0      	nop			@ (mov r8, r8)
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	00f42400 	.word	0x00f42400
 8001fe4:	007a1200 	.word	0x007a1200

08001fe8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fec:	4b02      	ldr	r3, [pc, #8]	@ (8001ff8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			@ (mov r8, r8)
 8001ff8:	20000004 	.word	0x20000004

08001ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ffc:	b5b0      	push	{r4, r5, r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002000:	f7ff fff2 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 8002004:	0004      	movs	r4, r0
 8002006:	f7ff fb3f 	bl	8001688 <LL_RCC_GetAPB1Prescaler>
 800200a:	0003      	movs	r3, r0
 800200c:	0b1a      	lsrs	r2, r3, #12
 800200e:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002010:	0092      	lsls	r2, r2, #2
 8002012:	58d3      	ldr	r3, [r2, r3]
 8002014:	221f      	movs	r2, #31
 8002016:	4013      	ands	r3, r2
 8002018:	40dc      	lsrs	r4, r3
 800201a:	0023      	movs	r3, r4
}
 800201c:	0018      	movs	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	bdb0      	pop	{r4, r5, r7, pc}
 8002022:	46c0      	nop			@ (mov r8, r8)
 8002024:	08004254 	.word	0x08004254

08002028 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002030:	2313      	movs	r3, #19
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002038:	2312      	movs	r3, #18
 800203a:	18fb      	adds	r3, r7, r3
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	2380      	movs	r3, #128	@ 0x80
 8002046:	029b      	lsls	r3, r3, #10
 8002048:	4013      	ands	r3, r2
 800204a:	d100      	bne.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800204c:	e0a3      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204e:	2011      	movs	r0, #17
 8002050:	183b      	adds	r3, r7, r0
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002056:	4bc3      	ldr	r3, [pc, #780]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002058:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800205a:	2380      	movs	r3, #128	@ 0x80
 800205c:	055b      	lsls	r3, r3, #21
 800205e:	4013      	ands	r3, r2
 8002060:	d110      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	4bc0      	ldr	r3, [pc, #768]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002064:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002066:	4bbf      	ldr	r3, [pc, #764]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002068:	2180      	movs	r1, #128	@ 0x80
 800206a:	0549      	lsls	r1, r1, #21
 800206c:	430a      	orrs	r2, r1
 800206e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002070:	4bbc      	ldr	r3, [pc, #752]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002072:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002074:	2380      	movs	r3, #128	@ 0x80
 8002076:	055b      	lsls	r3, r3, #21
 8002078:	4013      	ands	r3, r2
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800207e:	183b      	adds	r3, r7, r0
 8002080:	2201      	movs	r2, #1
 8002082:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002084:	4bb8      	ldr	r3, [pc, #736]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4bb7      	ldr	r3, [pc, #732]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800208a:	2180      	movs	r1, #128	@ 0x80
 800208c:	0049      	lsls	r1, r1, #1
 800208e:	430a      	orrs	r2, r1
 8002090:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002092:	f7fe fe87 	bl	8000da4 <HAL_GetTick>
 8002096:	0003      	movs	r3, r0
 8002098:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800209a:	e00b      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209c:	f7fe fe82 	bl	8000da4 <HAL_GetTick>
 80020a0:	0002      	movs	r2, r0
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d904      	bls.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80020aa:	2313      	movs	r3, #19
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	2203      	movs	r2, #3
 80020b0:	701a      	strb	r2, [r3, #0]
        break;
 80020b2:	e005      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020b4:	4bac      	ldr	r3, [pc, #688]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	2380      	movs	r3, #128	@ 0x80
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4013      	ands	r3, r2
 80020be:	d0ed      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80020c0:	2313      	movs	r3, #19
 80020c2:	18fb      	adds	r3, r7, r3
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d154      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020ca:	4ba6      	ldr	r3, [pc, #664]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020ce:	23c0      	movs	r3, #192	@ 0xc0
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4013      	ands	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d019      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d014      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020e6:	4b9f      	ldr	r3, [pc, #636]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ea:	4aa0      	ldr	r2, [pc, #640]	@ (800236c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020f0:	4b9c      	ldr	r3, [pc, #624]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020f4:	4b9b      	ldr	r3, [pc, #620]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020f6:	2180      	movs	r1, #128	@ 0x80
 80020f8:	0249      	lsls	r1, r1, #9
 80020fa:	430a      	orrs	r2, r1
 80020fc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020fe:	4b99      	ldr	r3, [pc, #612]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002100:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002102:	4b98      	ldr	r3, [pc, #608]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002104:	499a      	ldr	r1, [pc, #616]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002106:	400a      	ands	r2, r1
 8002108:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800210a:	4b96      	ldr	r3, [pc, #600]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2201      	movs	r2, #1
 8002114:	4013      	ands	r3, r2
 8002116:	d016      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002118:	f7fe fe44 	bl	8000da4 <HAL_GetTick>
 800211c:	0003      	movs	r3, r0
 800211e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002120:	e00c      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002122:	f7fe fe3f 	bl	8000da4 <HAL_GetTick>
 8002126:	0002      	movs	r2, r0
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	4a91      	ldr	r2, [pc, #580]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d904      	bls.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002132:	2313      	movs	r3, #19
 8002134:	18fb      	adds	r3, r7, r3
 8002136:	2203      	movs	r2, #3
 8002138:	701a      	strb	r2, [r3, #0]
            break;
 800213a:	e004      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800213c:	4b89      	ldr	r3, [pc, #548]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800213e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002140:	2202      	movs	r2, #2
 8002142:	4013      	ands	r3, r2
 8002144:	d0ed      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002146:	2313      	movs	r3, #19
 8002148:	18fb      	adds	r3, r7, r3
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10a      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002150:	4b84      	ldr	r3, [pc, #528]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002154:	4a85      	ldr	r2, [pc, #532]	@ (800236c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002156:	4013      	ands	r3, r2
 8002158:	0019      	movs	r1, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800215e:	4b81      	ldr	r3, [pc, #516]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002160:	430a      	orrs	r2, r1
 8002162:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002164:	e00c      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002166:	2312      	movs	r3, #18
 8002168:	18fb      	adds	r3, r7, r3
 800216a:	2213      	movs	r2, #19
 800216c:	18ba      	adds	r2, r7, r2
 800216e:	7812      	ldrb	r2, [r2, #0]
 8002170:	701a      	strb	r2, [r3, #0]
 8002172:	e005      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002174:	2312      	movs	r3, #18
 8002176:	18fb      	adds	r3, r7, r3
 8002178:	2213      	movs	r2, #19
 800217a:	18ba      	adds	r2, r7, r2
 800217c:	7812      	ldrb	r2, [r2, #0]
 800217e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002180:	2311      	movs	r3, #17
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d105      	bne.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218a:	4b76      	ldr	r3, [pc, #472]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800218c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800218e:	4b75      	ldr	r3, [pc, #468]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002190:	4979      	ldr	r1, [pc, #484]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002192:	400a      	ands	r2, r1
 8002194:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2201      	movs	r2, #1
 800219c:	4013      	ands	r3, r2
 800219e:	d009      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021a0:	4b70      	ldr	r3, [pc, #448]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a4:	2203      	movs	r2, #3
 80021a6:	4393      	bics	r3, r2
 80021a8:	0019      	movs	r1, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021b0:	430a      	orrs	r2, r1
 80021b2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2202      	movs	r2, #2
 80021ba:	4013      	ands	r3, r2
 80021bc:	d009      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021be:	4b69      	ldr	r3, [pc, #420]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c2:	220c      	movs	r2, #12
 80021c4:	4393      	bics	r3, r2
 80021c6:	0019      	movs	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	4b65      	ldr	r3, [pc, #404]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021ce:	430a      	orrs	r2, r1
 80021d0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2210      	movs	r2, #16
 80021d8:	4013      	ands	r3, r2
 80021da:	d009      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021dc:	4b61      	ldr	r3, [pc, #388]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e0:	4a66      	ldr	r2, [pc, #408]	@ (800237c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	0019      	movs	r1, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	4b5e      	ldr	r3, [pc, #376]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021ec:	430a      	orrs	r2, r1
 80021ee:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	2380      	movs	r3, #128	@ 0x80
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4013      	ands	r3, r2
 80021fa:	d009      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021fc:	4b59      	ldr	r3, [pc, #356]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002200:	4a5f      	ldr	r2, [pc, #380]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002202:	4013      	ands	r3, r2
 8002204:	0019      	movs	r1, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699a      	ldr	r2, [r3, #24]
 800220a:	4b56      	ldr	r3, [pc, #344]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800220c:	430a      	orrs	r2, r1
 800220e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	2380      	movs	r3, #128	@ 0x80
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4013      	ands	r3, r2
 800221a:	d009      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800221c:	4b51      	ldr	r3, [pc, #324]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800221e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002220:	4a58      	ldr	r2, [pc, #352]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002222:	4013      	ands	r3, r2
 8002224:	0019      	movs	r1, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69da      	ldr	r2, [r3, #28]
 800222a:	4b4e      	ldr	r3, [pc, #312]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800222c:	430a      	orrs	r2, r1
 800222e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2220      	movs	r2, #32
 8002236:	4013      	ands	r3, r2
 8002238:	d009      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800223a:	4b4a      	ldr	r3, [pc, #296]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800223c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800223e:	4a52      	ldr	r2, [pc, #328]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002240:	4013      	ands	r3, r2
 8002242:	0019      	movs	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	4b46      	ldr	r3, [pc, #280]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800224a:	430a      	orrs	r2, r1
 800224c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	2380      	movs	r3, #128	@ 0x80
 8002254:	01db      	lsls	r3, r3, #7
 8002256:	4013      	ands	r3, r2
 8002258:	d015      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800225a:	4b42      	ldr	r3, [pc, #264]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800225c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	0899      	lsrs	r1, r3, #2
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1a      	ldr	r2, [r3, #32]
 8002266:	4b3f      	ldr	r3, [pc, #252]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002268:	430a      	orrs	r2, r1
 800226a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1a      	ldr	r2, [r3, #32]
 8002270:	2380      	movs	r3, #128	@ 0x80
 8002272:	05db      	lsls	r3, r3, #23
 8002274:	429a      	cmp	r2, r3
 8002276:	d106      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002278:	4b3a      	ldr	r3, [pc, #232]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	4b39      	ldr	r3, [pc, #228]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800227e:	2180      	movs	r1, #128	@ 0x80
 8002280:	0249      	lsls	r1, r1, #9
 8002282:	430a      	orrs	r2, r1
 8002284:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	2380      	movs	r3, #128	@ 0x80
 800228c:	031b      	lsls	r3, r3, #12
 800228e:	4013      	ands	r3, r2
 8002290:	d009      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002292:	4b34      	ldr	r3, [pc, #208]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002296:	2240      	movs	r2, #64	@ 0x40
 8002298:	4393      	bics	r3, r2
 800229a:	0019      	movs	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022a0:	4b30      	ldr	r3, [pc, #192]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a2:	430a      	orrs	r2, r1
 80022a4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	2380      	movs	r3, #128	@ 0x80
 80022ac:	039b      	lsls	r3, r3, #14
 80022ae:	4013      	ands	r3, r2
 80022b0:	d016      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80022b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b6:	4a35      	ldr	r2, [pc, #212]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	0019      	movs	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022c0:	4b28      	ldr	r3, [pc, #160]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022c2:	430a      	orrs	r2, r1
 80022c4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022ca:	2380      	movs	r3, #128	@ 0x80
 80022cc:	03db      	lsls	r3, r3, #15
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d106      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80022d2:	4b24      	ldr	r3, [pc, #144]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	4b23      	ldr	r3, [pc, #140]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022d8:	2180      	movs	r1, #128	@ 0x80
 80022da:	0449      	lsls	r1, r1, #17
 80022dc:	430a      	orrs	r2, r1
 80022de:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	2380      	movs	r3, #128	@ 0x80
 80022e6:	03db      	lsls	r3, r3, #15
 80022e8:	4013      	ands	r3, r2
 80022ea:	d016      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80022ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f0:	4a27      	ldr	r2, [pc, #156]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	0019      	movs	r1, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022fc:	430a      	orrs	r2, r1
 80022fe:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002304:	2380      	movs	r3, #128	@ 0x80
 8002306:	045b      	lsls	r3, r3, #17
 8002308:	429a      	cmp	r2, r3
 800230a:	d106      	bne.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800230c:	4b15      	ldr	r3, [pc, #84]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	4b14      	ldr	r3, [pc, #80]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002312:	2180      	movs	r1, #128	@ 0x80
 8002314:	0449      	lsls	r1, r1, #17
 8002316:	430a      	orrs	r2, r1
 8002318:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	2380      	movs	r3, #128	@ 0x80
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	4013      	ands	r3, r2
 8002324:	d016      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002326:	4b0f      	ldr	r3, [pc, #60]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800232a:	4a1a      	ldr	r2, [pc, #104]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800232c:	4013      	ands	r3, r2
 800232e:	0019      	movs	r1, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	695a      	ldr	r2, [r3, #20]
 8002334:	4b0b      	ldr	r3, [pc, #44]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002336:	430a      	orrs	r2, r1
 8002338:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	2380      	movs	r3, #128	@ 0x80
 8002340:	01db      	lsls	r3, r3, #7
 8002342:	429a      	cmp	r2, r3
 8002344:	d106      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002346:	4b07      	ldr	r3, [pc, #28]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	4b06      	ldr	r3, [pc, #24]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800234c:	2180      	movs	r1, #128	@ 0x80
 800234e:	0249      	lsls	r1, r1, #9
 8002350:	430a      	orrs	r2, r1
 8002352:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002354:	2312      	movs	r3, #18
 8002356:	18fb      	adds	r3, r7, r3
 8002358:	781b      	ldrb	r3, [r3, #0]
}
 800235a:	0018      	movs	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	b006      	add	sp, #24
 8002360:	bd80      	pop	{r7, pc}
 8002362:	46c0      	nop			@ (mov r8, r8)
 8002364:	40021000 	.word	0x40021000
 8002368:	40007000 	.word	0x40007000
 800236c:	fffffcff 	.word	0xfffffcff
 8002370:	fffeffff 	.word	0xfffeffff
 8002374:	00001388 	.word	0x00001388
 8002378:	efffffff 	.word	0xefffffff
 800237c:	fffff3ff 	.word	0xfffff3ff
 8002380:	fff3ffff 	.word	0xfff3ffff
 8002384:	ffcfffff 	.word	0xffcfffff
 8002388:	ffffcfff 	.word	0xffffcfff
 800238c:	ffbfffff 	.word	0xffbfffff
 8002390:	feffffff 	.word	0xfeffffff
 8002394:	ffff3fff 	.word	0xffff3fff

08002398 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e046      	b.n	8002438 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2288      	movs	r2, #136	@ 0x88
 80023ae:	589b      	ldr	r3, [r3, r2]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d107      	bne.n	80023c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2284      	movs	r2, #132	@ 0x84
 80023b8:	2100      	movs	r1, #0
 80023ba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	0018      	movs	r0, r3
 80023c0:	f7fe fbe6 	bl	8000b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2288      	movs	r2, #136	@ 0x88
 80023c8:	2124      	movs	r1, #36	@ 0x24
 80023ca:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2101      	movs	r1, #1
 80023d8:	438a      	bics	r2, r1
 80023da:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	0018      	movs	r0, r3
 80023e8:	f000 fb8e 	bl	8002b08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	0018      	movs	r0, r3
 80023f0:	f000 f8cc 	bl	800258c <UART_SetConfig>
 80023f4:	0003      	movs	r3, r0
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e01c      	b.n	8002438 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	490d      	ldr	r1, [pc, #52]	@ (8002440 <HAL_UART_Init+0xa8>)
 800240a:	400a      	ands	r2, r1
 800240c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	212a      	movs	r1, #42	@ 0x2a
 800241a:	438a      	bics	r2, r1
 800241c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2101      	movs	r1, #1
 800242a:	430a      	orrs	r2, r1
 800242c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	0018      	movs	r0, r3
 8002432:	f000 fc1d 	bl	8002c70 <UART_CheckIdleState>
 8002436:	0003      	movs	r3, r0
}
 8002438:	0018      	movs	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	b002      	add	sp, #8
 800243e:	bd80      	pop	{r7, pc}
 8002440:	ffffb7ff 	.word	0xffffb7ff

08002444 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	@ 0x28
 8002448:	af02      	add	r7, sp, #8
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	603b      	str	r3, [r7, #0]
 8002450:	1dbb      	adds	r3, r7, #6
 8002452:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2288      	movs	r2, #136	@ 0x88
 8002458:	589b      	ldr	r3, [r3, r2]
 800245a:	2b20      	cmp	r3, #32
 800245c:	d000      	beq.n	8002460 <HAL_UART_Transmit+0x1c>
 800245e:	e090      	b.n	8002582 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_UART_Transmit+0x2a>
 8002466:	1dbb      	adds	r3, r7, #6
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e088      	b.n	8002584 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	2380      	movs	r3, #128	@ 0x80
 8002478:	015b      	lsls	r3, r3, #5
 800247a:	429a      	cmp	r2, r3
 800247c:	d109      	bne.n	8002492 <HAL_UART_Transmit+0x4e>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d105      	bne.n	8002492 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2201      	movs	r2, #1
 800248a:	4013      	ands	r3, r2
 800248c:	d001      	beq.n	8002492 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e078      	b.n	8002584 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2290      	movs	r2, #144	@ 0x90
 8002496:	2100      	movs	r1, #0
 8002498:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2288      	movs	r2, #136	@ 0x88
 800249e:	2121      	movs	r1, #33	@ 0x21
 80024a0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024a2:	f7fe fc7f 	bl	8000da4 <HAL_GetTick>
 80024a6:	0003      	movs	r3, r0
 80024a8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1dba      	adds	r2, r7, #6
 80024ae:	2154      	movs	r1, #84	@ 0x54
 80024b0:	8812      	ldrh	r2, [r2, #0]
 80024b2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1dba      	adds	r2, r7, #6
 80024b8:	2156      	movs	r1, #86	@ 0x56
 80024ba:	8812      	ldrh	r2, [r2, #0]
 80024bc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	2380      	movs	r3, #128	@ 0x80
 80024c4:	015b      	lsls	r3, r3, #5
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d108      	bne.n	80024dc <HAL_UART_Transmit+0x98>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d104      	bne.n	80024dc <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	e003      	b.n	80024e4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024e4:	e030      	b.n	8002548 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	0013      	movs	r3, r2
 80024f0:	2200      	movs	r2, #0
 80024f2:	2180      	movs	r1, #128	@ 0x80
 80024f4:	f000 fc66 	bl	8002dc4 <UART_WaitOnFlagUntilTimeout>
 80024f8:	1e03      	subs	r3, r0, #0
 80024fa:	d005      	beq.n	8002508 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2288      	movs	r2, #136	@ 0x88
 8002500:	2120      	movs	r1, #32
 8002502:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e03d      	b.n	8002584 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10b      	bne.n	8002526 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	001a      	movs	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	05d2      	lsls	r2, r2, #23
 800251a:	0dd2      	lsrs	r2, r2, #23
 800251c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	3302      	adds	r3, #2
 8002522:	61bb      	str	r3, [r7, #24]
 8002524:	e007      	b.n	8002536 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	781a      	ldrb	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	3301      	adds	r3, #1
 8002534:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2256      	movs	r2, #86	@ 0x56
 800253a:	5a9b      	ldrh	r3, [r3, r2]
 800253c:	b29b      	uxth	r3, r3
 800253e:	3b01      	subs	r3, #1
 8002540:	b299      	uxth	r1, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2256      	movs	r2, #86	@ 0x56
 8002546:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2256      	movs	r2, #86	@ 0x56
 800254c:	5a9b      	ldrh	r3, [r3, r2]
 800254e:	b29b      	uxth	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1c8      	bne.n	80024e6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	0013      	movs	r3, r2
 800255e:	2200      	movs	r2, #0
 8002560:	2140      	movs	r1, #64	@ 0x40
 8002562:	f000 fc2f 	bl	8002dc4 <UART_WaitOnFlagUntilTimeout>
 8002566:	1e03      	subs	r3, r0, #0
 8002568:	d005      	beq.n	8002576 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2288      	movs	r2, #136	@ 0x88
 800256e:	2120      	movs	r1, #32
 8002570:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e006      	b.n	8002584 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2288      	movs	r2, #136	@ 0x88
 800257a:	2120      	movs	r1, #32
 800257c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002582:	2302      	movs	r3, #2
  }
}
 8002584:	0018      	movs	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	b008      	add	sp, #32
 800258a:	bd80      	pop	{r7, pc}

0800258c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800258c:	b5b0      	push	{r4, r5, r7, lr}
 800258e:	b090      	sub	sp, #64	@ 0x40
 8002590:	af00      	add	r7, sp, #0
 8002592:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002594:	231a      	movs	r3, #26
 8002596:	2220      	movs	r2, #32
 8002598:	189b      	adds	r3, r3, r2
 800259a:	19db      	adds	r3, r3, r7
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	431a      	orrs	r2, r3
 80025aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	431a      	orrs	r2, r3
 80025b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4aaf      	ldr	r2, [pc, #700]	@ (800287c <UART_SetConfig+0x2f0>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	0019      	movs	r1, r3
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025ca:	430b      	orrs	r3, r1
 80025cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4aaa      	ldr	r2, [pc, #680]	@ (8002880 <UART_SetConfig+0x2f4>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	0018      	movs	r0, r3
 80025da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025dc:	68d9      	ldr	r1, [r3, #12]
 80025de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	0003      	movs	r3, r0
 80025e4:	430b      	orrs	r3, r1
 80025e6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4aa4      	ldr	r2, [pc, #656]	@ (8002884 <UART_SetConfig+0x2f8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d004      	beq.n	8002602 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025fe:	4313      	orrs	r3, r2
 8002600:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	4a9f      	ldr	r2, [pc, #636]	@ (8002888 <UART_SetConfig+0x2fc>)
 800260a:	4013      	ands	r3, r2
 800260c:	0019      	movs	r1, r3
 800260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002614:	430b      	orrs	r3, r1
 8002616:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261e:	220f      	movs	r2, #15
 8002620:	4393      	bics	r3, r2
 8002622:	0018      	movs	r0, r3
 8002624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002626:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	0003      	movs	r3, r0
 800262e:	430b      	orrs	r3, r1
 8002630:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a95      	ldr	r2, [pc, #596]	@ (800288c <UART_SetConfig+0x300>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d131      	bne.n	80026a0 <UART_SetConfig+0x114>
 800263c:	4b94      	ldr	r3, [pc, #592]	@ (8002890 <UART_SetConfig+0x304>)
 800263e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002640:	2203      	movs	r2, #3
 8002642:	4013      	ands	r3, r2
 8002644:	2b03      	cmp	r3, #3
 8002646:	d01d      	beq.n	8002684 <UART_SetConfig+0xf8>
 8002648:	d823      	bhi.n	8002692 <UART_SetConfig+0x106>
 800264a:	2b02      	cmp	r3, #2
 800264c:	d00c      	beq.n	8002668 <UART_SetConfig+0xdc>
 800264e:	d820      	bhi.n	8002692 <UART_SetConfig+0x106>
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <UART_SetConfig+0xce>
 8002654:	2b01      	cmp	r3, #1
 8002656:	d00e      	beq.n	8002676 <UART_SetConfig+0xea>
 8002658:	e01b      	b.n	8002692 <UART_SetConfig+0x106>
 800265a:	231b      	movs	r3, #27
 800265c:	2220      	movs	r2, #32
 800265e:	189b      	adds	r3, r3, r2
 8002660:	19db      	adds	r3, r3, r7
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
 8002666:	e0b4      	b.n	80027d2 <UART_SetConfig+0x246>
 8002668:	231b      	movs	r3, #27
 800266a:	2220      	movs	r2, #32
 800266c:	189b      	adds	r3, r3, r2
 800266e:	19db      	adds	r3, r3, r7
 8002670:	2202      	movs	r2, #2
 8002672:	701a      	strb	r2, [r3, #0]
 8002674:	e0ad      	b.n	80027d2 <UART_SetConfig+0x246>
 8002676:	231b      	movs	r3, #27
 8002678:	2220      	movs	r2, #32
 800267a:	189b      	adds	r3, r3, r2
 800267c:	19db      	adds	r3, r3, r7
 800267e:	2204      	movs	r2, #4
 8002680:	701a      	strb	r2, [r3, #0]
 8002682:	e0a6      	b.n	80027d2 <UART_SetConfig+0x246>
 8002684:	231b      	movs	r3, #27
 8002686:	2220      	movs	r2, #32
 8002688:	189b      	adds	r3, r3, r2
 800268a:	19db      	adds	r3, r3, r7
 800268c:	2208      	movs	r2, #8
 800268e:	701a      	strb	r2, [r3, #0]
 8002690:	e09f      	b.n	80027d2 <UART_SetConfig+0x246>
 8002692:	231b      	movs	r3, #27
 8002694:	2220      	movs	r2, #32
 8002696:	189b      	adds	r3, r3, r2
 8002698:	19db      	adds	r3, r3, r7
 800269a:	2210      	movs	r2, #16
 800269c:	701a      	strb	r2, [r3, #0]
 800269e:	e098      	b.n	80027d2 <UART_SetConfig+0x246>
 80026a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a7b      	ldr	r2, [pc, #492]	@ (8002894 <UART_SetConfig+0x308>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d131      	bne.n	800270e <UART_SetConfig+0x182>
 80026aa:	4b79      	ldr	r3, [pc, #484]	@ (8002890 <UART_SetConfig+0x304>)
 80026ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ae:	220c      	movs	r2, #12
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b0c      	cmp	r3, #12
 80026b4:	d01d      	beq.n	80026f2 <UART_SetConfig+0x166>
 80026b6:	d823      	bhi.n	8002700 <UART_SetConfig+0x174>
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d00c      	beq.n	80026d6 <UART_SetConfig+0x14a>
 80026bc:	d820      	bhi.n	8002700 <UART_SetConfig+0x174>
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <UART_SetConfig+0x13c>
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d00e      	beq.n	80026e4 <UART_SetConfig+0x158>
 80026c6:	e01b      	b.n	8002700 <UART_SetConfig+0x174>
 80026c8:	231b      	movs	r3, #27
 80026ca:	2220      	movs	r2, #32
 80026cc:	189b      	adds	r3, r3, r2
 80026ce:	19db      	adds	r3, r3, r7
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	e07d      	b.n	80027d2 <UART_SetConfig+0x246>
 80026d6:	231b      	movs	r3, #27
 80026d8:	2220      	movs	r2, #32
 80026da:	189b      	adds	r3, r3, r2
 80026dc:	19db      	adds	r3, r3, r7
 80026de:	2202      	movs	r2, #2
 80026e0:	701a      	strb	r2, [r3, #0]
 80026e2:	e076      	b.n	80027d2 <UART_SetConfig+0x246>
 80026e4:	231b      	movs	r3, #27
 80026e6:	2220      	movs	r2, #32
 80026e8:	189b      	adds	r3, r3, r2
 80026ea:	19db      	adds	r3, r3, r7
 80026ec:	2204      	movs	r2, #4
 80026ee:	701a      	strb	r2, [r3, #0]
 80026f0:	e06f      	b.n	80027d2 <UART_SetConfig+0x246>
 80026f2:	231b      	movs	r3, #27
 80026f4:	2220      	movs	r2, #32
 80026f6:	189b      	adds	r3, r3, r2
 80026f8:	19db      	adds	r3, r3, r7
 80026fa:	2208      	movs	r2, #8
 80026fc:	701a      	strb	r2, [r3, #0]
 80026fe:	e068      	b.n	80027d2 <UART_SetConfig+0x246>
 8002700:	231b      	movs	r3, #27
 8002702:	2220      	movs	r2, #32
 8002704:	189b      	adds	r3, r3, r2
 8002706:	19db      	adds	r3, r3, r7
 8002708:	2210      	movs	r2, #16
 800270a:	701a      	strb	r2, [r3, #0]
 800270c:	e061      	b.n	80027d2 <UART_SetConfig+0x246>
 800270e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a61      	ldr	r2, [pc, #388]	@ (8002898 <UART_SetConfig+0x30c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d106      	bne.n	8002726 <UART_SetConfig+0x19a>
 8002718:	231b      	movs	r3, #27
 800271a:	2220      	movs	r2, #32
 800271c:	189b      	adds	r3, r3, r2
 800271e:	19db      	adds	r3, r3, r7
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
 8002724:	e055      	b.n	80027d2 <UART_SetConfig+0x246>
 8002726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a5c      	ldr	r2, [pc, #368]	@ (800289c <UART_SetConfig+0x310>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d106      	bne.n	800273e <UART_SetConfig+0x1b2>
 8002730:	231b      	movs	r3, #27
 8002732:	2220      	movs	r2, #32
 8002734:	189b      	adds	r3, r3, r2
 8002736:	19db      	adds	r3, r3, r7
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
 800273c:	e049      	b.n	80027d2 <UART_SetConfig+0x246>
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a50      	ldr	r2, [pc, #320]	@ (8002884 <UART_SetConfig+0x2f8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d13e      	bne.n	80027c6 <UART_SetConfig+0x23a>
 8002748:	4b51      	ldr	r3, [pc, #324]	@ (8002890 <UART_SetConfig+0x304>)
 800274a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800274c:	23c0      	movs	r3, #192	@ 0xc0
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	4013      	ands	r3, r2
 8002752:	22c0      	movs	r2, #192	@ 0xc0
 8002754:	0112      	lsls	r2, r2, #4
 8002756:	4293      	cmp	r3, r2
 8002758:	d027      	beq.n	80027aa <UART_SetConfig+0x21e>
 800275a:	22c0      	movs	r2, #192	@ 0xc0
 800275c:	0112      	lsls	r2, r2, #4
 800275e:	4293      	cmp	r3, r2
 8002760:	d82a      	bhi.n	80027b8 <UART_SetConfig+0x22c>
 8002762:	2280      	movs	r2, #128	@ 0x80
 8002764:	0112      	lsls	r2, r2, #4
 8002766:	4293      	cmp	r3, r2
 8002768:	d011      	beq.n	800278e <UART_SetConfig+0x202>
 800276a:	2280      	movs	r2, #128	@ 0x80
 800276c:	0112      	lsls	r2, r2, #4
 800276e:	4293      	cmp	r3, r2
 8002770:	d822      	bhi.n	80027b8 <UART_SetConfig+0x22c>
 8002772:	2b00      	cmp	r3, #0
 8002774:	d004      	beq.n	8002780 <UART_SetConfig+0x1f4>
 8002776:	2280      	movs	r2, #128	@ 0x80
 8002778:	00d2      	lsls	r2, r2, #3
 800277a:	4293      	cmp	r3, r2
 800277c:	d00e      	beq.n	800279c <UART_SetConfig+0x210>
 800277e:	e01b      	b.n	80027b8 <UART_SetConfig+0x22c>
 8002780:	231b      	movs	r3, #27
 8002782:	2220      	movs	r2, #32
 8002784:	189b      	adds	r3, r3, r2
 8002786:	19db      	adds	r3, r3, r7
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
 800278c:	e021      	b.n	80027d2 <UART_SetConfig+0x246>
 800278e:	231b      	movs	r3, #27
 8002790:	2220      	movs	r2, #32
 8002792:	189b      	adds	r3, r3, r2
 8002794:	19db      	adds	r3, r3, r7
 8002796:	2202      	movs	r2, #2
 8002798:	701a      	strb	r2, [r3, #0]
 800279a:	e01a      	b.n	80027d2 <UART_SetConfig+0x246>
 800279c:	231b      	movs	r3, #27
 800279e:	2220      	movs	r2, #32
 80027a0:	189b      	adds	r3, r3, r2
 80027a2:	19db      	adds	r3, r3, r7
 80027a4:	2204      	movs	r2, #4
 80027a6:	701a      	strb	r2, [r3, #0]
 80027a8:	e013      	b.n	80027d2 <UART_SetConfig+0x246>
 80027aa:	231b      	movs	r3, #27
 80027ac:	2220      	movs	r2, #32
 80027ae:	189b      	adds	r3, r3, r2
 80027b0:	19db      	adds	r3, r3, r7
 80027b2:	2208      	movs	r2, #8
 80027b4:	701a      	strb	r2, [r3, #0]
 80027b6:	e00c      	b.n	80027d2 <UART_SetConfig+0x246>
 80027b8:	231b      	movs	r3, #27
 80027ba:	2220      	movs	r2, #32
 80027bc:	189b      	adds	r3, r3, r2
 80027be:	19db      	adds	r3, r3, r7
 80027c0:	2210      	movs	r2, #16
 80027c2:	701a      	strb	r2, [r3, #0]
 80027c4:	e005      	b.n	80027d2 <UART_SetConfig+0x246>
 80027c6:	231b      	movs	r3, #27
 80027c8:	2220      	movs	r2, #32
 80027ca:	189b      	adds	r3, r3, r2
 80027cc:	19db      	adds	r3, r3, r7
 80027ce:	2210      	movs	r2, #16
 80027d0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80027d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a2b      	ldr	r2, [pc, #172]	@ (8002884 <UART_SetConfig+0x2f8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d000      	beq.n	80027de <UART_SetConfig+0x252>
 80027dc:	e0a9      	b.n	8002932 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80027de:	231b      	movs	r3, #27
 80027e0:	2220      	movs	r2, #32
 80027e2:	189b      	adds	r3, r3, r2
 80027e4:	19db      	adds	r3, r3, r7
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d015      	beq.n	8002818 <UART_SetConfig+0x28c>
 80027ec:	dc18      	bgt.n	8002820 <UART_SetConfig+0x294>
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d00d      	beq.n	800280e <UART_SetConfig+0x282>
 80027f2:	dc15      	bgt.n	8002820 <UART_SetConfig+0x294>
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <UART_SetConfig+0x272>
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d005      	beq.n	8002808 <UART_SetConfig+0x27c>
 80027fc:	e010      	b.n	8002820 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027fe:	f7ff fbfd 	bl	8001ffc <HAL_RCC_GetPCLK1Freq>
 8002802:	0003      	movs	r3, r0
 8002804:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002806:	e014      	b.n	8002832 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002808:	4b25      	ldr	r3, [pc, #148]	@ (80028a0 <UART_SetConfig+0x314>)
 800280a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800280c:	e011      	b.n	8002832 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800280e:	f7ff fb69 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 8002812:	0003      	movs	r3, r0
 8002814:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002816:	e00c      	b.n	8002832 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002818:	2380      	movs	r3, #128	@ 0x80
 800281a:	021b      	lsls	r3, r3, #8
 800281c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800281e:	e008      	b.n	8002832 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002824:	231a      	movs	r3, #26
 8002826:	2220      	movs	r2, #32
 8002828:	189b      	adds	r3, r3, r2
 800282a:	19db      	adds	r3, r3, r7
 800282c:	2201      	movs	r2, #1
 800282e:	701a      	strb	r2, [r3, #0]
        break;
 8002830:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002834:	2b00      	cmp	r3, #0
 8002836:	d100      	bne.n	800283a <UART_SetConfig+0x2ae>
 8002838:	e14b      	b.n	8002ad2 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800283a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800283e:	4b19      	ldr	r3, [pc, #100]	@ (80028a4 <UART_SetConfig+0x318>)
 8002840:	0052      	lsls	r2, r2, #1
 8002842:	5ad3      	ldrh	r3, [r2, r3]
 8002844:	0019      	movs	r1, r3
 8002846:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002848:	f7fd fc66 	bl	8000118 <__udivsi3>
 800284c:	0003      	movs	r3, r0
 800284e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	0013      	movs	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	189b      	adds	r3, r3, r2
 800285a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800285c:	429a      	cmp	r2, r3
 800285e:	d305      	bcc.n	800286c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002866:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002868:	429a      	cmp	r2, r3
 800286a:	d91d      	bls.n	80028a8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800286c:	231a      	movs	r3, #26
 800286e:	2220      	movs	r2, #32
 8002870:	189b      	adds	r3, r3, r2
 8002872:	19db      	adds	r3, r3, r7
 8002874:	2201      	movs	r2, #1
 8002876:	701a      	strb	r2, [r3, #0]
 8002878:	e12b      	b.n	8002ad2 <UART_SetConfig+0x546>
 800287a:	46c0      	nop			@ (mov r8, r8)
 800287c:	cfff69f3 	.word	0xcfff69f3
 8002880:	ffffcfff 	.word	0xffffcfff
 8002884:	40008000 	.word	0x40008000
 8002888:	11fff4ff 	.word	0x11fff4ff
 800288c:	40013800 	.word	0x40013800
 8002890:	40021000 	.word	0x40021000
 8002894:	40004400 	.word	0x40004400
 8002898:	40004800 	.word	0x40004800
 800289c:	40004c00 	.word	0x40004c00
 80028a0:	00f42400 	.word	0x00f42400
 80028a4:	08004274 	.word	0x08004274
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80028a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028aa:	61bb      	str	r3, [r7, #24]
 80028ac:	2300      	movs	r3, #0
 80028ae:	61fb      	str	r3, [r7, #28]
 80028b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028b4:	4b92      	ldr	r3, [pc, #584]	@ (8002b00 <UART_SetConfig+0x574>)
 80028b6:	0052      	lsls	r2, r2, #1
 80028b8:	5ad3      	ldrh	r3, [r2, r3]
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	69b8      	ldr	r0, [r7, #24]
 80028c6:	69f9      	ldr	r1, [r7, #28]
 80028c8:	f7fd fd9c 	bl	8000404 <__aeabi_uldivmod>
 80028cc:	0002      	movs	r2, r0
 80028ce:	000b      	movs	r3, r1
 80028d0:	0e11      	lsrs	r1, r2, #24
 80028d2:	021d      	lsls	r5, r3, #8
 80028d4:	430d      	orrs	r5, r1
 80028d6:	0214      	lsls	r4, r2, #8
 80028d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	085b      	lsrs	r3, r3, #1
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68b8      	ldr	r0, [r7, #8]
 80028e6:	68f9      	ldr	r1, [r7, #12]
 80028e8:	1900      	adds	r0, r0, r4
 80028ea:	4169      	adcs	r1, r5
 80028ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	603b      	str	r3, [r7, #0]
 80028f2:	2300      	movs	r3, #0
 80028f4:	607b      	str	r3, [r7, #4]
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f7fd fd83 	bl	8000404 <__aeabi_uldivmod>
 80028fe:	0002      	movs	r2, r0
 8002900:	000b      	movs	r3, r1
 8002902:	0013      	movs	r3, r2
 8002904:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002906:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002908:	23c0      	movs	r3, #192	@ 0xc0
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	429a      	cmp	r2, r3
 800290e:	d309      	bcc.n	8002924 <UART_SetConfig+0x398>
 8002910:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002912:	2380      	movs	r3, #128	@ 0x80
 8002914:	035b      	lsls	r3, r3, #13
 8002916:	429a      	cmp	r2, r3
 8002918:	d204      	bcs.n	8002924 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	e0d6      	b.n	8002ad2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002924:	231a      	movs	r3, #26
 8002926:	2220      	movs	r2, #32
 8002928:	189b      	adds	r3, r3, r2
 800292a:	19db      	adds	r3, r3, r7
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
 8002930:	e0cf      	b.n	8002ad2 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	69da      	ldr	r2, [r3, #28]
 8002936:	2380      	movs	r3, #128	@ 0x80
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	429a      	cmp	r2, r3
 800293c:	d000      	beq.n	8002940 <UART_SetConfig+0x3b4>
 800293e:	e070      	b.n	8002a22 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002940:	231b      	movs	r3, #27
 8002942:	2220      	movs	r2, #32
 8002944:	189b      	adds	r3, r3, r2
 8002946:	19db      	adds	r3, r3, r7
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b08      	cmp	r3, #8
 800294c:	d015      	beq.n	800297a <UART_SetConfig+0x3ee>
 800294e:	dc18      	bgt.n	8002982 <UART_SetConfig+0x3f6>
 8002950:	2b04      	cmp	r3, #4
 8002952:	d00d      	beq.n	8002970 <UART_SetConfig+0x3e4>
 8002954:	dc15      	bgt.n	8002982 <UART_SetConfig+0x3f6>
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <UART_SetConfig+0x3d4>
 800295a:	2b02      	cmp	r3, #2
 800295c:	d005      	beq.n	800296a <UART_SetConfig+0x3de>
 800295e:	e010      	b.n	8002982 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002960:	f7ff fb4c 	bl	8001ffc <HAL_RCC_GetPCLK1Freq>
 8002964:	0003      	movs	r3, r0
 8002966:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002968:	e014      	b.n	8002994 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800296a:	4b66      	ldr	r3, [pc, #408]	@ (8002b04 <UART_SetConfig+0x578>)
 800296c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800296e:	e011      	b.n	8002994 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002970:	f7ff fab8 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 8002974:	0003      	movs	r3, r0
 8002976:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002978:	e00c      	b.n	8002994 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800297a:	2380      	movs	r3, #128	@ 0x80
 800297c:	021b      	lsls	r3, r3, #8
 800297e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002980:	e008      	b.n	8002994 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002986:	231a      	movs	r3, #26
 8002988:	2220      	movs	r2, #32
 800298a:	189b      	adds	r3, r3, r2
 800298c:	19db      	adds	r3, r3, r7
 800298e:	2201      	movs	r2, #1
 8002990:	701a      	strb	r2, [r3, #0]
        break;
 8002992:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002996:	2b00      	cmp	r3, #0
 8002998:	d100      	bne.n	800299c <UART_SetConfig+0x410>
 800299a:	e09a      	b.n	8002ad2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800299c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029a0:	4b57      	ldr	r3, [pc, #348]	@ (8002b00 <UART_SetConfig+0x574>)
 80029a2:	0052      	lsls	r2, r2, #1
 80029a4:	5ad3      	ldrh	r3, [r2, r3]
 80029a6:	0019      	movs	r1, r3
 80029a8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80029aa:	f7fd fbb5 	bl	8000118 <__udivsi3>
 80029ae:	0003      	movs	r3, r0
 80029b0:	005a      	lsls	r2, r3, #1
 80029b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	085b      	lsrs	r3, r3, #1
 80029b8:	18d2      	adds	r2, r2, r3
 80029ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	0019      	movs	r1, r3
 80029c0:	0010      	movs	r0, r2
 80029c2:	f7fd fba9 	bl	8000118 <__udivsi3>
 80029c6:	0003      	movs	r3, r0
 80029c8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029cc:	2b0f      	cmp	r3, #15
 80029ce:	d921      	bls.n	8002a14 <UART_SetConfig+0x488>
 80029d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029d2:	2380      	movs	r3, #128	@ 0x80
 80029d4:	025b      	lsls	r3, r3, #9
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d21c      	bcs.n	8002a14 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029dc:	b29a      	uxth	r2, r3
 80029de:	200e      	movs	r0, #14
 80029e0:	2420      	movs	r4, #32
 80029e2:	1903      	adds	r3, r0, r4
 80029e4:	19db      	adds	r3, r3, r7
 80029e6:	210f      	movs	r1, #15
 80029e8:	438a      	bics	r2, r1
 80029ea:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ee:	085b      	lsrs	r3, r3, #1
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	2207      	movs	r2, #7
 80029f4:	4013      	ands	r3, r2
 80029f6:	b299      	uxth	r1, r3
 80029f8:	1903      	adds	r3, r0, r4
 80029fa:	19db      	adds	r3, r3, r7
 80029fc:	1902      	adds	r2, r0, r4
 80029fe:	19d2      	adds	r2, r2, r7
 8002a00:	8812      	ldrh	r2, [r2, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	1902      	adds	r2, r0, r4
 8002a0c:	19d2      	adds	r2, r2, r7
 8002a0e:	8812      	ldrh	r2, [r2, #0]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	e05e      	b.n	8002ad2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002a14:	231a      	movs	r3, #26
 8002a16:	2220      	movs	r2, #32
 8002a18:	189b      	adds	r3, r3, r2
 8002a1a:	19db      	adds	r3, r3, r7
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	701a      	strb	r2, [r3, #0]
 8002a20:	e057      	b.n	8002ad2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a22:	231b      	movs	r3, #27
 8002a24:	2220      	movs	r2, #32
 8002a26:	189b      	adds	r3, r3, r2
 8002a28:	19db      	adds	r3, r3, r7
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d015      	beq.n	8002a5c <UART_SetConfig+0x4d0>
 8002a30:	dc18      	bgt.n	8002a64 <UART_SetConfig+0x4d8>
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d00d      	beq.n	8002a52 <UART_SetConfig+0x4c6>
 8002a36:	dc15      	bgt.n	8002a64 <UART_SetConfig+0x4d8>
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <UART_SetConfig+0x4b6>
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d005      	beq.n	8002a4c <UART_SetConfig+0x4c0>
 8002a40:	e010      	b.n	8002a64 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a42:	f7ff fadb 	bl	8001ffc <HAL_RCC_GetPCLK1Freq>
 8002a46:	0003      	movs	r3, r0
 8002a48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002a4a:	e014      	b.n	8002a76 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b04 <UART_SetConfig+0x578>)
 8002a4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002a50:	e011      	b.n	8002a76 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a52:	f7ff fa47 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 8002a56:	0003      	movs	r3, r0
 8002a58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002a5a:	e00c      	b.n	8002a76 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a5c:	2380      	movs	r3, #128	@ 0x80
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002a62:	e008      	b.n	8002a76 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002a68:	231a      	movs	r3, #26
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	189b      	adds	r3, r3, r2
 8002a6e:	19db      	adds	r3, r3, r7
 8002a70:	2201      	movs	r2, #1
 8002a72:	701a      	strb	r2, [r3, #0]
        break;
 8002a74:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d02a      	beq.n	8002ad2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a80:	4b1f      	ldr	r3, [pc, #124]	@ (8002b00 <UART_SetConfig+0x574>)
 8002a82:	0052      	lsls	r2, r2, #1
 8002a84:	5ad3      	ldrh	r3, [r2, r3]
 8002a86:	0019      	movs	r1, r3
 8002a88:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002a8a:	f7fd fb45 	bl	8000118 <__udivsi3>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	001a      	movs	r2, r3
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	085b      	lsrs	r3, r3, #1
 8002a98:	18d2      	adds	r2, r2, r3
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	0019      	movs	r1, r3
 8002aa0:	0010      	movs	r0, r2
 8002aa2:	f7fd fb39 	bl	8000118 <__udivsi3>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aac:	2b0f      	cmp	r3, #15
 8002aae:	d90a      	bls.n	8002ac6 <UART_SetConfig+0x53a>
 8002ab0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ab2:	2380      	movs	r3, #128	@ 0x80
 8002ab4:	025b      	lsls	r3, r3, #9
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d205      	bcs.n	8002ac6 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	60da      	str	r2, [r3, #12]
 8002ac4:	e005      	b.n	8002ad2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002ac6:	231a      	movs	r3, #26
 8002ac8:	2220      	movs	r2, #32
 8002aca:	189b      	adds	r3, r3, r2
 8002acc:	19db      	adds	r3, r3, r7
 8002ace:	2201      	movs	r2, #1
 8002ad0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad4:	226a      	movs	r2, #106	@ 0x6a
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002adc:	2268      	movs	r2, #104	@ 0x68
 8002ade:	2101      	movs	r1, #1
 8002ae0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aea:	2200      	movs	r2, #0
 8002aec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002aee:	231a      	movs	r3, #26
 8002af0:	2220      	movs	r2, #32
 8002af2:	189b      	adds	r3, r3, r2
 8002af4:	19db      	adds	r3, r3, r7
 8002af6:	781b      	ldrb	r3, [r3, #0]
}
 8002af8:	0018      	movs	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b010      	add	sp, #64	@ 0x40
 8002afe:	bdb0      	pop	{r4, r5, r7, pc}
 8002b00:	08004274 	.word	0x08004274
 8002b04:	00f42400 	.word	0x00f42400

08002b08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b14:	2208      	movs	r2, #8
 8002b16:	4013      	ands	r3, r2
 8002b18:	d00b      	beq.n	8002b32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	4a4a      	ldr	r2, [pc, #296]	@ (8002c4c <UART_AdvFeatureConfig+0x144>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	0019      	movs	r1, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b36:	2201      	movs	r2, #1
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d00b      	beq.n	8002b54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4a43      	ldr	r2, [pc, #268]	@ (8002c50 <UART_AdvFeatureConfig+0x148>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	0019      	movs	r1, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b58:	2202      	movs	r2, #2
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d00b      	beq.n	8002b76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	4a3b      	ldr	r2, [pc, #236]	@ (8002c54 <UART_AdvFeatureConfig+0x14c>)
 8002b66:	4013      	ands	r3, r2
 8002b68:	0019      	movs	r1, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d00b      	beq.n	8002b98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	4a34      	ldr	r2, [pc, #208]	@ (8002c58 <UART_AdvFeatureConfig+0x150>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	0019      	movs	r1, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9c:	2210      	movs	r2, #16
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d00b      	beq.n	8002bba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	4a2c      	ldr	r2, [pc, #176]	@ (8002c5c <UART_AdvFeatureConfig+0x154>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	0019      	movs	r1, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d00b      	beq.n	8002bdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	4a25      	ldr	r2, [pc, #148]	@ (8002c60 <UART_AdvFeatureConfig+0x158>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	0019      	movs	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be0:	2240      	movs	r2, #64	@ 0x40
 8002be2:	4013      	ands	r3, r2
 8002be4:	d01d      	beq.n	8002c22 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	4a1d      	ldr	r2, [pc, #116]	@ (8002c64 <UART_AdvFeatureConfig+0x15c>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c02:	2380      	movs	r3, #128	@ 0x80
 8002c04:	035b      	lsls	r3, r3, #13
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d10b      	bne.n	8002c22 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	4a15      	ldr	r2, [pc, #84]	@ (8002c68 <UART_AdvFeatureConfig+0x160>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	0019      	movs	r1, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c26:	2280      	movs	r2, #128	@ 0x80
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d00b      	beq.n	8002c44 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4a0e      	ldr	r2, [pc, #56]	@ (8002c6c <UART_AdvFeatureConfig+0x164>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	0019      	movs	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	605a      	str	r2, [r3, #4]
  }
}
 8002c44:	46c0      	nop			@ (mov r8, r8)
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b002      	add	sp, #8
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	ffff7fff 	.word	0xffff7fff
 8002c50:	fffdffff 	.word	0xfffdffff
 8002c54:	fffeffff 	.word	0xfffeffff
 8002c58:	fffbffff 	.word	0xfffbffff
 8002c5c:	ffffefff 	.word	0xffffefff
 8002c60:	ffffdfff 	.word	0xffffdfff
 8002c64:	ffefffff 	.word	0xffefffff
 8002c68:	ff9fffff 	.word	0xff9fffff
 8002c6c:	fff7ffff 	.word	0xfff7ffff

08002c70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b092      	sub	sp, #72	@ 0x48
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2290      	movs	r2, #144	@ 0x90
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c80:	f7fe f890 	bl	8000da4 <HAL_GetTick>
 8002c84:	0003      	movs	r3, r0
 8002c86:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2208      	movs	r2, #8
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d12d      	bne.n	8002cf2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c98:	2280      	movs	r2, #128	@ 0x80
 8002c9a:	0391      	lsls	r1, r2, #14
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	4a47      	ldr	r2, [pc, #284]	@ (8002dbc <UART_CheckIdleState+0x14c>)
 8002ca0:	9200      	str	r2, [sp, #0]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f000 f88e 	bl	8002dc4 <UART_WaitOnFlagUntilTimeout>
 8002ca8:	1e03      	subs	r3, r0, #0
 8002caa:	d022      	beq.n	8002cf2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cac:	f3ef 8310 	mrs	r3, PRIMASK
 8002cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cbc:	f383 8810 	msr	PRIMASK, r3
}
 8002cc0:	46c0      	nop			@ (mov r8, r8)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2180      	movs	r1, #128	@ 0x80
 8002cce:	438a      	bics	r2, r1
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cd8:	f383 8810 	msr	PRIMASK, r3
}
 8002cdc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2288      	movs	r2, #136	@ 0x88
 8002ce2:	2120      	movs	r1, #32
 8002ce4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2284      	movs	r2, #132	@ 0x84
 8002cea:	2100      	movs	r1, #0
 8002cec:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e060      	b.n	8002db4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d146      	bne.n	8002d8e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d02:	2280      	movs	r2, #128	@ 0x80
 8002d04:	03d1      	lsls	r1, r2, #15
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	4a2c      	ldr	r2, [pc, #176]	@ (8002dbc <UART_CheckIdleState+0x14c>)
 8002d0a:	9200      	str	r2, [sp, #0]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f000 f859 	bl	8002dc4 <UART_WaitOnFlagUntilTimeout>
 8002d12:	1e03      	subs	r3, r0, #0
 8002d14:	d03b      	beq.n	8002d8e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d16:	f3ef 8310 	mrs	r3, PRIMASK
 8002d1a:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d20:	2301      	movs	r3, #1
 8002d22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	f383 8810 	msr	PRIMASK, r3
}
 8002d2a:	46c0      	nop			@ (mov r8, r8)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4922      	ldr	r1, [pc, #136]	@ (8002dc0 <UART_CheckIdleState+0x150>)
 8002d38:	400a      	ands	r2, r1
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f383 8810 	msr	PRIMASK, r3
}
 8002d46:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d48:	f3ef 8310 	mrs	r3, PRIMASK
 8002d4c:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d4e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d50:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d52:	2301      	movs	r3, #1
 8002d54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	f383 8810 	msr	PRIMASK, r3
}
 8002d5c:	46c0      	nop			@ (mov r8, r8)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2101      	movs	r1, #1
 8002d6a:	438a      	bics	r2, r1
 8002d6c:	609a      	str	r2, [r3, #8]
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d70:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	f383 8810 	msr	PRIMASK, r3
}
 8002d78:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	228c      	movs	r2, #140	@ 0x8c
 8002d7e:	2120      	movs	r1, #32
 8002d80:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2284      	movs	r2, #132	@ 0x84
 8002d86:	2100      	movs	r1, #0
 8002d88:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e012      	b.n	8002db4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2288      	movs	r2, #136	@ 0x88
 8002d92:	2120      	movs	r1, #32
 8002d94:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	228c      	movs	r2, #140	@ 0x8c
 8002d9a:	2120      	movs	r1, #32
 8002d9c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2284      	movs	r2, #132	@ 0x84
 8002dae:	2100      	movs	r1, #0
 8002db0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	0018      	movs	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b010      	add	sp, #64	@ 0x40
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	01ffffff 	.word	0x01ffffff
 8002dc0:	fffffedf 	.word	0xfffffedf

08002dc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	1dfb      	adds	r3, r7, #7
 8002dd2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dd4:	e051      	b.n	8002e7a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	d04e      	beq.n	8002e7a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ddc:	f7fd ffe2 	bl	8000da4 <HAL_GetTick>
 8002de0:	0002      	movs	r2, r0
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d302      	bcc.n	8002df2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e051      	b.n	8002e9a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d03b      	beq.n	8002e7a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b80      	cmp	r3, #128	@ 0x80
 8002e06:	d038      	beq.n	8002e7a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b40      	cmp	r3, #64	@ 0x40
 8002e0c:	d035      	beq.n	8002e7a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	2208      	movs	r2, #8
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d111      	bne.n	8002e40 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2208      	movs	r2, #8
 8002e22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	0018      	movs	r0, r3
 8002e28:	f000 f83c 	bl	8002ea4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2290      	movs	r2, #144	@ 0x90
 8002e30:	2108      	movs	r1, #8
 8002e32:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2284      	movs	r2, #132	@ 0x84
 8002e38:	2100      	movs	r1, #0
 8002e3a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e02c      	b.n	8002e9a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	69da      	ldr	r2, [r3, #28]
 8002e46:	2380      	movs	r3, #128	@ 0x80
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	401a      	ands	r2, r3
 8002e4c:	2380      	movs	r3, #128	@ 0x80
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d112      	bne.n	8002e7a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2280      	movs	r2, #128	@ 0x80
 8002e5a:	0112      	lsls	r2, r2, #4
 8002e5c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	0018      	movs	r0, r3
 8002e62:	f000 f81f 	bl	8002ea4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2290      	movs	r2, #144	@ 0x90
 8002e6a:	2120      	movs	r1, #32
 8002e6c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2284      	movs	r2, #132	@ 0x84
 8002e72:	2100      	movs	r1, #0
 8002e74:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e00f      	b.n	8002e9a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	4013      	ands	r3, r2
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	425a      	negs	r2, r3
 8002e8a:	4153      	adcs	r3, r2
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	001a      	movs	r2, r3
 8002e90:	1dfb      	adds	r3, r7, #7
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d09e      	beq.n	8002dd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b004      	add	sp, #16
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08e      	sub	sp, #56	@ 0x38
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eac:	f3ef 8310 	mrs	r3, PRIMASK
 8002eb0:	617b      	str	r3, [r7, #20]
  return(result);
 8002eb2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002eb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	f383 8810 	msr	PRIMASK, r3
}
 8002ec0:	46c0      	nop			@ (mov r8, r8)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4926      	ldr	r1, [pc, #152]	@ (8002f68 <UART_EndRxTransfer+0xc4>)
 8002ece:	400a      	ands	r2, r1
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ed4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	f383 8810 	msr	PRIMASK, r3
}
 8002edc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ede:	f3ef 8310 	mrs	r3, PRIMASK
 8002ee2:	623b      	str	r3, [r7, #32]
  return(result);
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002ee6:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ee8:	2301      	movs	r3, #1
 8002eea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eee:	f383 8810 	msr	PRIMASK, r3
}
 8002ef2:	46c0      	nop			@ (mov r8, r8)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	491b      	ldr	r1, [pc, #108]	@ (8002f6c <UART_EndRxTransfer+0xc8>)
 8002f00:	400a      	ands	r2, r1
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f06:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f0a:	f383 8810 	msr	PRIMASK, r3
}
 8002f0e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d118      	bne.n	8002f4a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f18:	f3ef 8310 	mrs	r3, PRIMASK
 8002f1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f1e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f22:	2301      	movs	r3, #1
 8002f24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f383 8810 	msr	PRIMASK, r3
}
 8002f2c:	46c0      	nop			@ (mov r8, r8)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2110      	movs	r1, #16
 8002f3a:	438a      	bics	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f383 8810 	msr	PRIMASK, r3
}
 8002f48:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	228c      	movs	r2, #140	@ 0x8c
 8002f4e:	2120      	movs	r1, #32
 8002f50:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002f5e:	46c0      	nop			@ (mov r8, r8)
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b00e      	add	sp, #56	@ 0x38
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	46c0      	nop			@ (mov r8, r8)
 8002f68:	fffffedf 	.word	0xfffffedf
 8002f6c:	effffffe 	.word	0xeffffffe

08002f70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2284      	movs	r2, #132	@ 0x84
 8002f7c:	5c9b      	ldrb	r3, [r3, r2]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_UARTEx_DisableFifoMode+0x16>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e027      	b.n	8002fd6 <HAL_UARTEx_DisableFifoMode+0x66>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2284      	movs	r2, #132	@ 0x84
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2288      	movs	r2, #136	@ 0x88
 8002f92:	2124      	movs	r1, #36	@ 0x24
 8002f94:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2101      	movs	r1, #1
 8002faa:	438a      	bics	r2, r1
 8002fac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4a0b      	ldr	r2, [pc, #44]	@ (8002fe0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2288      	movs	r2, #136	@ 0x88
 8002fc8:	2120      	movs	r1, #32
 8002fca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2284      	movs	r2, #132	@ 0x84
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b004      	add	sp, #16
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	46c0      	nop			@ (mov r8, r8)
 8002fe0:	dfffffff 	.word	0xdfffffff

08002fe4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2284      	movs	r2, #132	@ 0x84
 8002ff2:	5c9b      	ldrb	r3, [r3, r2]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e02e      	b.n	800305a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2284      	movs	r2, #132	@ 0x84
 8003000:	2101      	movs	r1, #1
 8003002:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2288      	movs	r2, #136	@ 0x88
 8003008:	2124      	movs	r1, #36	@ 0x24
 800300a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2101      	movs	r1, #1
 8003020:	438a      	bics	r2, r1
 8003022:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	08d9      	lsrs	r1, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	0018      	movs	r0, r3
 800303c:	f000 f854 	bl	80030e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2288      	movs	r2, #136	@ 0x88
 800304c:	2120      	movs	r1, #32
 800304e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2284      	movs	r2, #132	@ 0x84
 8003054:	2100      	movs	r1, #0
 8003056:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	0018      	movs	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	b004      	add	sp, #16
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2284      	movs	r2, #132	@ 0x84
 8003072:	5c9b      	ldrb	r3, [r3, r2]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003078:	2302      	movs	r3, #2
 800307a:	e02f      	b.n	80030dc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2284      	movs	r2, #132	@ 0x84
 8003080:	2101      	movs	r1, #1
 8003082:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2288      	movs	r2, #136	@ 0x88
 8003088:	2124      	movs	r1, #36	@ 0x24
 800308a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2101      	movs	r1, #1
 80030a0:	438a      	bics	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	4a0e      	ldr	r2, [pc, #56]	@ (80030e4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	0019      	movs	r1, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	0018      	movs	r0, r3
 80030be:	f000 f813 	bl	80030e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2288      	movs	r2, #136	@ 0x88
 80030ce:	2120      	movs	r1, #32
 80030d0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2284      	movs	r2, #132	@ 0x84
 80030d6:	2100      	movs	r1, #0
 80030d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	0018      	movs	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	b004      	add	sp, #16
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	f1ffffff 	.word	0xf1ffffff

080030e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80030e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d108      	bne.n	800310a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	226a      	movs	r2, #106	@ 0x6a
 80030fc:	2101      	movs	r1, #1
 80030fe:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2268      	movs	r2, #104	@ 0x68
 8003104:	2101      	movs	r1, #1
 8003106:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003108:	e043      	b.n	8003192 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800310a:	260f      	movs	r6, #15
 800310c:	19bb      	adds	r3, r7, r6
 800310e:	2208      	movs	r2, #8
 8003110:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003112:	200e      	movs	r0, #14
 8003114:	183b      	adds	r3, r7, r0
 8003116:	2208      	movs	r2, #8
 8003118:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	0e5b      	lsrs	r3, r3, #25
 8003122:	b2da      	uxtb	r2, r3
 8003124:	240d      	movs	r4, #13
 8003126:	193b      	adds	r3, r7, r4
 8003128:	2107      	movs	r1, #7
 800312a:	400a      	ands	r2, r1
 800312c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	0f5b      	lsrs	r3, r3, #29
 8003136:	b2da      	uxtb	r2, r3
 8003138:	250c      	movs	r5, #12
 800313a:	197b      	adds	r3, r7, r5
 800313c:	2107      	movs	r1, #7
 800313e:	400a      	ands	r2, r1
 8003140:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003142:	183b      	adds	r3, r7, r0
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	197a      	adds	r2, r7, r5
 8003148:	7812      	ldrb	r2, [r2, #0]
 800314a:	4914      	ldr	r1, [pc, #80]	@ (800319c <UARTEx_SetNbDataToProcess+0xb4>)
 800314c:	5c8a      	ldrb	r2, [r1, r2]
 800314e:	435a      	muls	r2, r3
 8003150:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003152:	197b      	adds	r3, r7, r5
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	4a12      	ldr	r2, [pc, #72]	@ (80031a0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003158:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800315a:	0019      	movs	r1, r3
 800315c:	f7fd f866 	bl	800022c <__divsi3>
 8003160:	0003      	movs	r3, r0
 8003162:	b299      	uxth	r1, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	226a      	movs	r2, #106	@ 0x6a
 8003168:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800316a:	19bb      	adds	r3, r7, r6
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	193a      	adds	r2, r7, r4
 8003170:	7812      	ldrb	r2, [r2, #0]
 8003172:	490a      	ldr	r1, [pc, #40]	@ (800319c <UARTEx_SetNbDataToProcess+0xb4>)
 8003174:	5c8a      	ldrb	r2, [r1, r2]
 8003176:	435a      	muls	r2, r3
 8003178:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800317a:	193b      	adds	r3, r7, r4
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	4a08      	ldr	r2, [pc, #32]	@ (80031a0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003180:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003182:	0019      	movs	r1, r3
 8003184:	f7fd f852 	bl	800022c <__divsi3>
 8003188:	0003      	movs	r3, r0
 800318a:	b299      	uxth	r1, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2268      	movs	r2, #104	@ 0x68
 8003190:	5299      	strh	r1, [r3, r2]
}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	46bd      	mov	sp, r7
 8003196:	b005      	add	sp, #20
 8003198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800319a:	46c0      	nop			@ (mov r8, r8)
 800319c:	0800428c 	.word	0x0800428c
 80031a0:	08004294 	.word	0x08004294

080031a4 <std>:
 80031a4:	2300      	movs	r3, #0
 80031a6:	b510      	push	{r4, lr}
 80031a8:	0004      	movs	r4, r0
 80031aa:	6003      	str	r3, [r0, #0]
 80031ac:	6043      	str	r3, [r0, #4]
 80031ae:	6083      	str	r3, [r0, #8]
 80031b0:	8181      	strh	r1, [r0, #12]
 80031b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80031b4:	81c2      	strh	r2, [r0, #14]
 80031b6:	6103      	str	r3, [r0, #16]
 80031b8:	6143      	str	r3, [r0, #20]
 80031ba:	6183      	str	r3, [r0, #24]
 80031bc:	0019      	movs	r1, r3
 80031be:	2208      	movs	r2, #8
 80031c0:	305c      	adds	r0, #92	@ 0x5c
 80031c2:	f000 f90f 	bl	80033e4 <memset>
 80031c6:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <std+0x50>)
 80031c8:	6224      	str	r4, [r4, #32]
 80031ca:	6263      	str	r3, [r4, #36]	@ 0x24
 80031cc:	4b0a      	ldr	r3, [pc, #40]	@ (80031f8 <std+0x54>)
 80031ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80031d0:	4b0a      	ldr	r3, [pc, #40]	@ (80031fc <std+0x58>)
 80031d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80031d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003200 <std+0x5c>)
 80031d6:	6323      	str	r3, [r4, #48]	@ 0x30
 80031d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003204 <std+0x60>)
 80031da:	429c      	cmp	r4, r3
 80031dc:	d005      	beq.n	80031ea <std+0x46>
 80031de:	4b0a      	ldr	r3, [pc, #40]	@ (8003208 <std+0x64>)
 80031e0:	429c      	cmp	r4, r3
 80031e2:	d002      	beq.n	80031ea <std+0x46>
 80031e4:	4b09      	ldr	r3, [pc, #36]	@ (800320c <std+0x68>)
 80031e6:	429c      	cmp	r4, r3
 80031e8:	d103      	bne.n	80031f2 <std+0x4e>
 80031ea:	0020      	movs	r0, r4
 80031ec:	3058      	adds	r0, #88	@ 0x58
 80031ee:	f000 f979 	bl	80034e4 <__retarget_lock_init_recursive>
 80031f2:	bd10      	pop	{r4, pc}
 80031f4:	0800334d 	.word	0x0800334d
 80031f8:	08003375 	.word	0x08003375
 80031fc:	080033ad 	.word	0x080033ad
 8003200:	080033d9 	.word	0x080033d9
 8003204:	20000150 	.word	0x20000150
 8003208:	200001b8 	.word	0x200001b8
 800320c:	20000220 	.word	0x20000220

08003210 <stdio_exit_handler>:
 8003210:	b510      	push	{r4, lr}
 8003212:	4a03      	ldr	r2, [pc, #12]	@ (8003220 <stdio_exit_handler+0x10>)
 8003214:	4903      	ldr	r1, [pc, #12]	@ (8003224 <stdio_exit_handler+0x14>)
 8003216:	4804      	ldr	r0, [pc, #16]	@ (8003228 <stdio_exit_handler+0x18>)
 8003218:	f000 f86c 	bl	80032f4 <_fwalk_sglue>
 800321c:	bd10      	pop	{r4, pc}
 800321e:	46c0      	nop			@ (mov r8, r8)
 8003220:	20000010 	.word	0x20000010
 8003224:	08003d71 	.word	0x08003d71
 8003228:	20000020 	.word	0x20000020

0800322c <cleanup_stdio>:
 800322c:	6841      	ldr	r1, [r0, #4]
 800322e:	4b0b      	ldr	r3, [pc, #44]	@ (800325c <cleanup_stdio+0x30>)
 8003230:	b510      	push	{r4, lr}
 8003232:	0004      	movs	r4, r0
 8003234:	4299      	cmp	r1, r3
 8003236:	d001      	beq.n	800323c <cleanup_stdio+0x10>
 8003238:	f000 fd9a 	bl	8003d70 <_fflush_r>
 800323c:	68a1      	ldr	r1, [r4, #8]
 800323e:	4b08      	ldr	r3, [pc, #32]	@ (8003260 <cleanup_stdio+0x34>)
 8003240:	4299      	cmp	r1, r3
 8003242:	d002      	beq.n	800324a <cleanup_stdio+0x1e>
 8003244:	0020      	movs	r0, r4
 8003246:	f000 fd93 	bl	8003d70 <_fflush_r>
 800324a:	68e1      	ldr	r1, [r4, #12]
 800324c:	4b05      	ldr	r3, [pc, #20]	@ (8003264 <cleanup_stdio+0x38>)
 800324e:	4299      	cmp	r1, r3
 8003250:	d002      	beq.n	8003258 <cleanup_stdio+0x2c>
 8003252:	0020      	movs	r0, r4
 8003254:	f000 fd8c 	bl	8003d70 <_fflush_r>
 8003258:	bd10      	pop	{r4, pc}
 800325a:	46c0      	nop			@ (mov r8, r8)
 800325c:	20000150 	.word	0x20000150
 8003260:	200001b8 	.word	0x200001b8
 8003264:	20000220 	.word	0x20000220

08003268 <global_stdio_init.part.0>:
 8003268:	b510      	push	{r4, lr}
 800326a:	4b09      	ldr	r3, [pc, #36]	@ (8003290 <global_stdio_init.part.0+0x28>)
 800326c:	4a09      	ldr	r2, [pc, #36]	@ (8003294 <global_stdio_init.part.0+0x2c>)
 800326e:	2104      	movs	r1, #4
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	4809      	ldr	r0, [pc, #36]	@ (8003298 <global_stdio_init.part.0+0x30>)
 8003274:	2200      	movs	r2, #0
 8003276:	f7ff ff95 	bl	80031a4 <std>
 800327a:	2201      	movs	r2, #1
 800327c:	2109      	movs	r1, #9
 800327e:	4807      	ldr	r0, [pc, #28]	@ (800329c <global_stdio_init.part.0+0x34>)
 8003280:	f7ff ff90 	bl	80031a4 <std>
 8003284:	2202      	movs	r2, #2
 8003286:	2112      	movs	r1, #18
 8003288:	4805      	ldr	r0, [pc, #20]	@ (80032a0 <global_stdio_init.part.0+0x38>)
 800328a:	f7ff ff8b 	bl	80031a4 <std>
 800328e:	bd10      	pop	{r4, pc}
 8003290:	20000288 	.word	0x20000288
 8003294:	08003211 	.word	0x08003211
 8003298:	20000150 	.word	0x20000150
 800329c:	200001b8 	.word	0x200001b8
 80032a0:	20000220 	.word	0x20000220

080032a4 <__sfp_lock_acquire>:
 80032a4:	b510      	push	{r4, lr}
 80032a6:	4802      	ldr	r0, [pc, #8]	@ (80032b0 <__sfp_lock_acquire+0xc>)
 80032a8:	f000 f91d 	bl	80034e6 <__retarget_lock_acquire_recursive>
 80032ac:	bd10      	pop	{r4, pc}
 80032ae:	46c0      	nop			@ (mov r8, r8)
 80032b0:	20000291 	.word	0x20000291

080032b4 <__sfp_lock_release>:
 80032b4:	b510      	push	{r4, lr}
 80032b6:	4802      	ldr	r0, [pc, #8]	@ (80032c0 <__sfp_lock_release+0xc>)
 80032b8:	f000 f916 	bl	80034e8 <__retarget_lock_release_recursive>
 80032bc:	bd10      	pop	{r4, pc}
 80032be:	46c0      	nop			@ (mov r8, r8)
 80032c0:	20000291 	.word	0x20000291

080032c4 <__sinit>:
 80032c4:	b510      	push	{r4, lr}
 80032c6:	0004      	movs	r4, r0
 80032c8:	f7ff ffec 	bl	80032a4 <__sfp_lock_acquire>
 80032cc:	6a23      	ldr	r3, [r4, #32]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <__sinit+0x14>
 80032d2:	f7ff ffef 	bl	80032b4 <__sfp_lock_release>
 80032d6:	bd10      	pop	{r4, pc}
 80032d8:	4b04      	ldr	r3, [pc, #16]	@ (80032ec <__sinit+0x28>)
 80032da:	6223      	str	r3, [r4, #32]
 80032dc:	4b04      	ldr	r3, [pc, #16]	@ (80032f0 <__sinit+0x2c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f6      	bne.n	80032d2 <__sinit+0xe>
 80032e4:	f7ff ffc0 	bl	8003268 <global_stdio_init.part.0>
 80032e8:	e7f3      	b.n	80032d2 <__sinit+0xe>
 80032ea:	46c0      	nop			@ (mov r8, r8)
 80032ec:	0800322d 	.word	0x0800322d
 80032f0:	20000288 	.word	0x20000288

080032f4 <_fwalk_sglue>:
 80032f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032f6:	0014      	movs	r4, r2
 80032f8:	2600      	movs	r6, #0
 80032fa:	9000      	str	r0, [sp, #0]
 80032fc:	9101      	str	r1, [sp, #4]
 80032fe:	68a5      	ldr	r5, [r4, #8]
 8003300:	6867      	ldr	r7, [r4, #4]
 8003302:	3f01      	subs	r7, #1
 8003304:	d504      	bpl.n	8003310 <_fwalk_sglue+0x1c>
 8003306:	6824      	ldr	r4, [r4, #0]
 8003308:	2c00      	cmp	r4, #0
 800330a:	d1f8      	bne.n	80032fe <_fwalk_sglue+0xa>
 800330c:	0030      	movs	r0, r6
 800330e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003310:	89ab      	ldrh	r3, [r5, #12]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d908      	bls.n	8003328 <_fwalk_sglue+0x34>
 8003316:	220e      	movs	r2, #14
 8003318:	5eab      	ldrsh	r3, [r5, r2]
 800331a:	3301      	adds	r3, #1
 800331c:	d004      	beq.n	8003328 <_fwalk_sglue+0x34>
 800331e:	0029      	movs	r1, r5
 8003320:	9800      	ldr	r0, [sp, #0]
 8003322:	9b01      	ldr	r3, [sp, #4]
 8003324:	4798      	blx	r3
 8003326:	4306      	orrs	r6, r0
 8003328:	3568      	adds	r5, #104	@ 0x68
 800332a:	e7ea      	b.n	8003302 <_fwalk_sglue+0xe>

0800332c <iprintf>:
 800332c:	b40f      	push	{r0, r1, r2, r3}
 800332e:	b507      	push	{r0, r1, r2, lr}
 8003330:	4905      	ldr	r1, [pc, #20]	@ (8003348 <iprintf+0x1c>)
 8003332:	ab04      	add	r3, sp, #16
 8003334:	6808      	ldr	r0, [r1, #0]
 8003336:	cb04      	ldmia	r3!, {r2}
 8003338:	6881      	ldr	r1, [r0, #8]
 800333a:	9301      	str	r3, [sp, #4]
 800333c:	f000 f9fa 	bl	8003734 <_vfiprintf_r>
 8003340:	b003      	add	sp, #12
 8003342:	bc08      	pop	{r3}
 8003344:	b004      	add	sp, #16
 8003346:	4718      	bx	r3
 8003348:	2000001c 	.word	0x2000001c

0800334c <__sread>:
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	000c      	movs	r4, r1
 8003350:	250e      	movs	r5, #14
 8003352:	5f49      	ldrsh	r1, [r1, r5]
 8003354:	f000 f874 	bl	8003440 <_read_r>
 8003358:	2800      	cmp	r0, #0
 800335a:	db03      	blt.n	8003364 <__sread+0x18>
 800335c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800335e:	181b      	adds	r3, r3, r0
 8003360:	6563      	str	r3, [r4, #84]	@ 0x54
 8003362:	bd70      	pop	{r4, r5, r6, pc}
 8003364:	89a3      	ldrh	r3, [r4, #12]
 8003366:	4a02      	ldr	r2, [pc, #8]	@ (8003370 <__sread+0x24>)
 8003368:	4013      	ands	r3, r2
 800336a:	81a3      	strh	r3, [r4, #12]
 800336c:	e7f9      	b.n	8003362 <__sread+0x16>
 800336e:	46c0      	nop			@ (mov r8, r8)
 8003370:	ffffefff 	.word	0xffffefff

08003374 <__swrite>:
 8003374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003376:	001f      	movs	r7, r3
 8003378:	898b      	ldrh	r3, [r1, #12]
 800337a:	0005      	movs	r5, r0
 800337c:	000c      	movs	r4, r1
 800337e:	0016      	movs	r6, r2
 8003380:	05db      	lsls	r3, r3, #23
 8003382:	d505      	bpl.n	8003390 <__swrite+0x1c>
 8003384:	230e      	movs	r3, #14
 8003386:	5ec9      	ldrsh	r1, [r1, r3]
 8003388:	2200      	movs	r2, #0
 800338a:	2302      	movs	r3, #2
 800338c:	f000 f844 	bl	8003418 <_lseek_r>
 8003390:	89a3      	ldrh	r3, [r4, #12]
 8003392:	4a05      	ldr	r2, [pc, #20]	@ (80033a8 <__swrite+0x34>)
 8003394:	0028      	movs	r0, r5
 8003396:	4013      	ands	r3, r2
 8003398:	81a3      	strh	r3, [r4, #12]
 800339a:	0032      	movs	r2, r6
 800339c:	230e      	movs	r3, #14
 800339e:	5ee1      	ldrsh	r1, [r4, r3]
 80033a0:	003b      	movs	r3, r7
 80033a2:	f000 f861 	bl	8003468 <_write_r>
 80033a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033a8:	ffffefff 	.word	0xffffefff

080033ac <__sseek>:
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	000c      	movs	r4, r1
 80033b0:	250e      	movs	r5, #14
 80033b2:	5f49      	ldrsh	r1, [r1, r5]
 80033b4:	f000 f830 	bl	8003418 <_lseek_r>
 80033b8:	89a3      	ldrh	r3, [r4, #12]
 80033ba:	1c42      	adds	r2, r0, #1
 80033bc:	d103      	bne.n	80033c6 <__sseek+0x1a>
 80033be:	4a05      	ldr	r2, [pc, #20]	@ (80033d4 <__sseek+0x28>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	81a3      	strh	r3, [r4, #12]
 80033c4:	bd70      	pop	{r4, r5, r6, pc}
 80033c6:	2280      	movs	r2, #128	@ 0x80
 80033c8:	0152      	lsls	r2, r2, #5
 80033ca:	4313      	orrs	r3, r2
 80033cc:	81a3      	strh	r3, [r4, #12]
 80033ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80033d0:	e7f8      	b.n	80033c4 <__sseek+0x18>
 80033d2:	46c0      	nop			@ (mov r8, r8)
 80033d4:	ffffefff 	.word	0xffffefff

080033d8 <__sclose>:
 80033d8:	b510      	push	{r4, lr}
 80033da:	230e      	movs	r3, #14
 80033dc:	5ec9      	ldrsh	r1, [r1, r3]
 80033de:	f000 f809 	bl	80033f4 <_close_r>
 80033e2:	bd10      	pop	{r4, pc}

080033e4 <memset>:
 80033e4:	0003      	movs	r3, r0
 80033e6:	1882      	adds	r2, r0, r2
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d100      	bne.n	80033ee <memset+0xa>
 80033ec:	4770      	bx	lr
 80033ee:	7019      	strb	r1, [r3, #0]
 80033f0:	3301      	adds	r3, #1
 80033f2:	e7f9      	b.n	80033e8 <memset+0x4>

080033f4 <_close_r>:
 80033f4:	2300      	movs	r3, #0
 80033f6:	b570      	push	{r4, r5, r6, lr}
 80033f8:	4d06      	ldr	r5, [pc, #24]	@ (8003414 <_close_r+0x20>)
 80033fa:	0004      	movs	r4, r0
 80033fc:	0008      	movs	r0, r1
 80033fe:	602b      	str	r3, [r5, #0]
 8003400:	f7fd fb16 	bl	8000a30 <_close>
 8003404:	1c43      	adds	r3, r0, #1
 8003406:	d103      	bne.n	8003410 <_close_r+0x1c>
 8003408:	682b      	ldr	r3, [r5, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d000      	beq.n	8003410 <_close_r+0x1c>
 800340e:	6023      	str	r3, [r4, #0]
 8003410:	bd70      	pop	{r4, r5, r6, pc}
 8003412:	46c0      	nop			@ (mov r8, r8)
 8003414:	2000028c 	.word	0x2000028c

08003418 <_lseek_r>:
 8003418:	b570      	push	{r4, r5, r6, lr}
 800341a:	0004      	movs	r4, r0
 800341c:	0008      	movs	r0, r1
 800341e:	0011      	movs	r1, r2
 8003420:	001a      	movs	r2, r3
 8003422:	2300      	movs	r3, #0
 8003424:	4d05      	ldr	r5, [pc, #20]	@ (800343c <_lseek_r+0x24>)
 8003426:	602b      	str	r3, [r5, #0]
 8003428:	f7fd fb23 	bl	8000a72 <_lseek>
 800342c:	1c43      	adds	r3, r0, #1
 800342e:	d103      	bne.n	8003438 <_lseek_r+0x20>
 8003430:	682b      	ldr	r3, [r5, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d000      	beq.n	8003438 <_lseek_r+0x20>
 8003436:	6023      	str	r3, [r4, #0]
 8003438:	bd70      	pop	{r4, r5, r6, pc}
 800343a:	46c0      	nop			@ (mov r8, r8)
 800343c:	2000028c 	.word	0x2000028c

08003440 <_read_r>:
 8003440:	b570      	push	{r4, r5, r6, lr}
 8003442:	0004      	movs	r4, r0
 8003444:	0008      	movs	r0, r1
 8003446:	0011      	movs	r1, r2
 8003448:	001a      	movs	r2, r3
 800344a:	2300      	movs	r3, #0
 800344c:	4d05      	ldr	r5, [pc, #20]	@ (8003464 <_read_r+0x24>)
 800344e:	602b      	str	r3, [r5, #0]
 8003450:	f7fd fab5 	bl	80009be <_read>
 8003454:	1c43      	adds	r3, r0, #1
 8003456:	d103      	bne.n	8003460 <_read_r+0x20>
 8003458:	682b      	ldr	r3, [r5, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d000      	beq.n	8003460 <_read_r+0x20>
 800345e:	6023      	str	r3, [r4, #0]
 8003460:	bd70      	pop	{r4, r5, r6, pc}
 8003462:	46c0      	nop			@ (mov r8, r8)
 8003464:	2000028c 	.word	0x2000028c

08003468 <_write_r>:
 8003468:	b570      	push	{r4, r5, r6, lr}
 800346a:	0004      	movs	r4, r0
 800346c:	0008      	movs	r0, r1
 800346e:	0011      	movs	r1, r2
 8003470:	001a      	movs	r2, r3
 8003472:	2300      	movs	r3, #0
 8003474:	4d05      	ldr	r5, [pc, #20]	@ (800348c <_write_r+0x24>)
 8003476:	602b      	str	r3, [r5, #0]
 8003478:	f7fd fabe 	bl	80009f8 <_write>
 800347c:	1c43      	adds	r3, r0, #1
 800347e:	d103      	bne.n	8003488 <_write_r+0x20>
 8003480:	682b      	ldr	r3, [r5, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d000      	beq.n	8003488 <_write_r+0x20>
 8003486:	6023      	str	r3, [r4, #0]
 8003488:	bd70      	pop	{r4, r5, r6, pc}
 800348a:	46c0      	nop			@ (mov r8, r8)
 800348c:	2000028c 	.word	0x2000028c

08003490 <__errno>:
 8003490:	4b01      	ldr	r3, [pc, #4]	@ (8003498 <__errno+0x8>)
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	4770      	bx	lr
 8003496:	46c0      	nop			@ (mov r8, r8)
 8003498:	2000001c 	.word	0x2000001c

0800349c <__libc_init_array>:
 800349c:	b570      	push	{r4, r5, r6, lr}
 800349e:	2600      	movs	r6, #0
 80034a0:	4c0c      	ldr	r4, [pc, #48]	@ (80034d4 <__libc_init_array+0x38>)
 80034a2:	4d0d      	ldr	r5, [pc, #52]	@ (80034d8 <__libc_init_array+0x3c>)
 80034a4:	1b64      	subs	r4, r4, r5
 80034a6:	10a4      	asrs	r4, r4, #2
 80034a8:	42a6      	cmp	r6, r4
 80034aa:	d109      	bne.n	80034c0 <__libc_init_array+0x24>
 80034ac:	2600      	movs	r6, #0
 80034ae:	f000 fdd9 	bl	8004064 <_init>
 80034b2:	4c0a      	ldr	r4, [pc, #40]	@ (80034dc <__libc_init_array+0x40>)
 80034b4:	4d0a      	ldr	r5, [pc, #40]	@ (80034e0 <__libc_init_array+0x44>)
 80034b6:	1b64      	subs	r4, r4, r5
 80034b8:	10a4      	asrs	r4, r4, #2
 80034ba:	42a6      	cmp	r6, r4
 80034bc:	d105      	bne.n	80034ca <__libc_init_array+0x2e>
 80034be:	bd70      	pop	{r4, r5, r6, pc}
 80034c0:	00b3      	lsls	r3, r6, #2
 80034c2:	58eb      	ldr	r3, [r5, r3]
 80034c4:	4798      	blx	r3
 80034c6:	3601      	adds	r6, #1
 80034c8:	e7ee      	b.n	80034a8 <__libc_init_array+0xc>
 80034ca:	00b3      	lsls	r3, r6, #2
 80034cc:	58eb      	ldr	r3, [r5, r3]
 80034ce:	4798      	blx	r3
 80034d0:	3601      	adds	r6, #1
 80034d2:	e7f2      	b.n	80034ba <__libc_init_array+0x1e>
 80034d4:	080042d8 	.word	0x080042d8
 80034d8:	080042d8 	.word	0x080042d8
 80034dc:	080042dc 	.word	0x080042dc
 80034e0:	080042d8 	.word	0x080042d8

080034e4 <__retarget_lock_init_recursive>:
 80034e4:	4770      	bx	lr

080034e6 <__retarget_lock_acquire_recursive>:
 80034e6:	4770      	bx	lr

080034e8 <__retarget_lock_release_recursive>:
 80034e8:	4770      	bx	lr
	...

080034ec <_free_r>:
 80034ec:	b570      	push	{r4, r5, r6, lr}
 80034ee:	0005      	movs	r5, r0
 80034f0:	1e0c      	subs	r4, r1, #0
 80034f2:	d010      	beq.n	8003516 <_free_r+0x2a>
 80034f4:	3c04      	subs	r4, #4
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	da00      	bge.n	80034fe <_free_r+0x12>
 80034fc:	18e4      	adds	r4, r4, r3
 80034fe:	0028      	movs	r0, r5
 8003500:	f000 f8e0 	bl	80036c4 <__malloc_lock>
 8003504:	4a1d      	ldr	r2, [pc, #116]	@ (800357c <_free_r+0x90>)
 8003506:	6813      	ldr	r3, [r2, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d105      	bne.n	8003518 <_free_r+0x2c>
 800350c:	6063      	str	r3, [r4, #4]
 800350e:	6014      	str	r4, [r2, #0]
 8003510:	0028      	movs	r0, r5
 8003512:	f000 f8df 	bl	80036d4 <__malloc_unlock>
 8003516:	bd70      	pop	{r4, r5, r6, pc}
 8003518:	42a3      	cmp	r3, r4
 800351a:	d908      	bls.n	800352e <_free_r+0x42>
 800351c:	6820      	ldr	r0, [r4, #0]
 800351e:	1821      	adds	r1, r4, r0
 8003520:	428b      	cmp	r3, r1
 8003522:	d1f3      	bne.n	800350c <_free_r+0x20>
 8003524:	6819      	ldr	r1, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	1809      	adds	r1, r1, r0
 800352a:	6021      	str	r1, [r4, #0]
 800352c:	e7ee      	b.n	800350c <_free_r+0x20>
 800352e:	001a      	movs	r2, r3
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <_free_r+0x4e>
 8003536:	42a3      	cmp	r3, r4
 8003538:	d9f9      	bls.n	800352e <_free_r+0x42>
 800353a:	6811      	ldr	r1, [r2, #0]
 800353c:	1850      	adds	r0, r2, r1
 800353e:	42a0      	cmp	r0, r4
 8003540:	d10b      	bne.n	800355a <_free_r+0x6e>
 8003542:	6820      	ldr	r0, [r4, #0]
 8003544:	1809      	adds	r1, r1, r0
 8003546:	1850      	adds	r0, r2, r1
 8003548:	6011      	str	r1, [r2, #0]
 800354a:	4283      	cmp	r3, r0
 800354c:	d1e0      	bne.n	8003510 <_free_r+0x24>
 800354e:	6818      	ldr	r0, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	1841      	adds	r1, r0, r1
 8003554:	6011      	str	r1, [r2, #0]
 8003556:	6053      	str	r3, [r2, #4]
 8003558:	e7da      	b.n	8003510 <_free_r+0x24>
 800355a:	42a0      	cmp	r0, r4
 800355c:	d902      	bls.n	8003564 <_free_r+0x78>
 800355e:	230c      	movs	r3, #12
 8003560:	602b      	str	r3, [r5, #0]
 8003562:	e7d5      	b.n	8003510 <_free_r+0x24>
 8003564:	6820      	ldr	r0, [r4, #0]
 8003566:	1821      	adds	r1, r4, r0
 8003568:	428b      	cmp	r3, r1
 800356a:	d103      	bne.n	8003574 <_free_r+0x88>
 800356c:	6819      	ldr	r1, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	1809      	adds	r1, r1, r0
 8003572:	6021      	str	r1, [r4, #0]
 8003574:	6063      	str	r3, [r4, #4]
 8003576:	6054      	str	r4, [r2, #4]
 8003578:	e7ca      	b.n	8003510 <_free_r+0x24>
 800357a:	46c0      	nop			@ (mov r8, r8)
 800357c:	20000298 	.word	0x20000298

08003580 <sbrk_aligned>:
 8003580:	b570      	push	{r4, r5, r6, lr}
 8003582:	4e0f      	ldr	r6, [pc, #60]	@ (80035c0 <sbrk_aligned+0x40>)
 8003584:	000d      	movs	r5, r1
 8003586:	6831      	ldr	r1, [r6, #0]
 8003588:	0004      	movs	r4, r0
 800358a:	2900      	cmp	r1, #0
 800358c:	d102      	bne.n	8003594 <sbrk_aligned+0x14>
 800358e:	f000 fcbb 	bl	8003f08 <_sbrk_r>
 8003592:	6030      	str	r0, [r6, #0]
 8003594:	0029      	movs	r1, r5
 8003596:	0020      	movs	r0, r4
 8003598:	f000 fcb6 	bl	8003f08 <_sbrk_r>
 800359c:	1c43      	adds	r3, r0, #1
 800359e:	d103      	bne.n	80035a8 <sbrk_aligned+0x28>
 80035a0:	2501      	movs	r5, #1
 80035a2:	426d      	negs	r5, r5
 80035a4:	0028      	movs	r0, r5
 80035a6:	bd70      	pop	{r4, r5, r6, pc}
 80035a8:	2303      	movs	r3, #3
 80035aa:	1cc5      	adds	r5, r0, #3
 80035ac:	439d      	bics	r5, r3
 80035ae:	42a8      	cmp	r0, r5
 80035b0:	d0f8      	beq.n	80035a4 <sbrk_aligned+0x24>
 80035b2:	1a29      	subs	r1, r5, r0
 80035b4:	0020      	movs	r0, r4
 80035b6:	f000 fca7 	bl	8003f08 <_sbrk_r>
 80035ba:	3001      	adds	r0, #1
 80035bc:	d1f2      	bne.n	80035a4 <sbrk_aligned+0x24>
 80035be:	e7ef      	b.n	80035a0 <sbrk_aligned+0x20>
 80035c0:	20000294 	.word	0x20000294

080035c4 <_malloc_r>:
 80035c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035c6:	2203      	movs	r2, #3
 80035c8:	1ccb      	adds	r3, r1, #3
 80035ca:	4393      	bics	r3, r2
 80035cc:	3308      	adds	r3, #8
 80035ce:	0005      	movs	r5, r0
 80035d0:	001f      	movs	r7, r3
 80035d2:	2b0c      	cmp	r3, #12
 80035d4:	d234      	bcs.n	8003640 <_malloc_r+0x7c>
 80035d6:	270c      	movs	r7, #12
 80035d8:	42b9      	cmp	r1, r7
 80035da:	d833      	bhi.n	8003644 <_malloc_r+0x80>
 80035dc:	0028      	movs	r0, r5
 80035de:	f000 f871 	bl	80036c4 <__malloc_lock>
 80035e2:	4e37      	ldr	r6, [pc, #220]	@ (80036c0 <_malloc_r+0xfc>)
 80035e4:	6833      	ldr	r3, [r6, #0]
 80035e6:	001c      	movs	r4, r3
 80035e8:	2c00      	cmp	r4, #0
 80035ea:	d12f      	bne.n	800364c <_malloc_r+0x88>
 80035ec:	0039      	movs	r1, r7
 80035ee:	0028      	movs	r0, r5
 80035f0:	f7ff ffc6 	bl	8003580 <sbrk_aligned>
 80035f4:	0004      	movs	r4, r0
 80035f6:	1c43      	adds	r3, r0, #1
 80035f8:	d15f      	bne.n	80036ba <_malloc_r+0xf6>
 80035fa:	6834      	ldr	r4, [r6, #0]
 80035fc:	9400      	str	r4, [sp, #0]
 80035fe:	9b00      	ldr	r3, [sp, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d14a      	bne.n	800369a <_malloc_r+0xd6>
 8003604:	2c00      	cmp	r4, #0
 8003606:	d052      	beq.n	80036ae <_malloc_r+0xea>
 8003608:	6823      	ldr	r3, [r4, #0]
 800360a:	0028      	movs	r0, r5
 800360c:	18e3      	adds	r3, r4, r3
 800360e:	9900      	ldr	r1, [sp, #0]
 8003610:	9301      	str	r3, [sp, #4]
 8003612:	f000 fc79 	bl	8003f08 <_sbrk_r>
 8003616:	9b01      	ldr	r3, [sp, #4]
 8003618:	4283      	cmp	r3, r0
 800361a:	d148      	bne.n	80036ae <_malloc_r+0xea>
 800361c:	6823      	ldr	r3, [r4, #0]
 800361e:	0028      	movs	r0, r5
 8003620:	1aff      	subs	r7, r7, r3
 8003622:	0039      	movs	r1, r7
 8003624:	f7ff ffac 	bl	8003580 <sbrk_aligned>
 8003628:	3001      	adds	r0, #1
 800362a:	d040      	beq.n	80036ae <_malloc_r+0xea>
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	19db      	adds	r3, r3, r7
 8003630:	6023      	str	r3, [r4, #0]
 8003632:	6833      	ldr	r3, [r6, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	2a00      	cmp	r2, #0
 8003638:	d133      	bne.n	80036a2 <_malloc_r+0xde>
 800363a:	9b00      	ldr	r3, [sp, #0]
 800363c:	6033      	str	r3, [r6, #0]
 800363e:	e019      	b.n	8003674 <_malloc_r+0xb0>
 8003640:	2b00      	cmp	r3, #0
 8003642:	dac9      	bge.n	80035d8 <_malloc_r+0x14>
 8003644:	230c      	movs	r3, #12
 8003646:	602b      	str	r3, [r5, #0]
 8003648:	2000      	movs	r0, #0
 800364a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800364c:	6821      	ldr	r1, [r4, #0]
 800364e:	1bc9      	subs	r1, r1, r7
 8003650:	d420      	bmi.n	8003694 <_malloc_r+0xd0>
 8003652:	290b      	cmp	r1, #11
 8003654:	d90a      	bls.n	800366c <_malloc_r+0xa8>
 8003656:	19e2      	adds	r2, r4, r7
 8003658:	6027      	str	r7, [r4, #0]
 800365a:	42a3      	cmp	r3, r4
 800365c:	d104      	bne.n	8003668 <_malloc_r+0xa4>
 800365e:	6032      	str	r2, [r6, #0]
 8003660:	6863      	ldr	r3, [r4, #4]
 8003662:	6011      	str	r1, [r2, #0]
 8003664:	6053      	str	r3, [r2, #4]
 8003666:	e005      	b.n	8003674 <_malloc_r+0xb0>
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	e7f9      	b.n	8003660 <_malloc_r+0x9c>
 800366c:	6862      	ldr	r2, [r4, #4]
 800366e:	42a3      	cmp	r3, r4
 8003670:	d10e      	bne.n	8003690 <_malloc_r+0xcc>
 8003672:	6032      	str	r2, [r6, #0]
 8003674:	0028      	movs	r0, r5
 8003676:	f000 f82d 	bl	80036d4 <__malloc_unlock>
 800367a:	0020      	movs	r0, r4
 800367c:	2207      	movs	r2, #7
 800367e:	300b      	adds	r0, #11
 8003680:	1d23      	adds	r3, r4, #4
 8003682:	4390      	bics	r0, r2
 8003684:	1ac2      	subs	r2, r0, r3
 8003686:	4298      	cmp	r0, r3
 8003688:	d0df      	beq.n	800364a <_malloc_r+0x86>
 800368a:	1a1b      	subs	r3, r3, r0
 800368c:	50a3      	str	r3, [r4, r2]
 800368e:	e7dc      	b.n	800364a <_malloc_r+0x86>
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	e7ef      	b.n	8003674 <_malloc_r+0xb0>
 8003694:	0023      	movs	r3, r4
 8003696:	6864      	ldr	r4, [r4, #4]
 8003698:	e7a6      	b.n	80035e8 <_malloc_r+0x24>
 800369a:	9c00      	ldr	r4, [sp, #0]
 800369c:	6863      	ldr	r3, [r4, #4]
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	e7ad      	b.n	80035fe <_malloc_r+0x3a>
 80036a2:	001a      	movs	r2, r3
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	42a3      	cmp	r3, r4
 80036a8:	d1fb      	bne.n	80036a2 <_malloc_r+0xde>
 80036aa:	2300      	movs	r3, #0
 80036ac:	e7da      	b.n	8003664 <_malloc_r+0xa0>
 80036ae:	230c      	movs	r3, #12
 80036b0:	0028      	movs	r0, r5
 80036b2:	602b      	str	r3, [r5, #0]
 80036b4:	f000 f80e 	bl	80036d4 <__malloc_unlock>
 80036b8:	e7c6      	b.n	8003648 <_malloc_r+0x84>
 80036ba:	6007      	str	r7, [r0, #0]
 80036bc:	e7da      	b.n	8003674 <_malloc_r+0xb0>
 80036be:	46c0      	nop			@ (mov r8, r8)
 80036c0:	20000298 	.word	0x20000298

080036c4 <__malloc_lock>:
 80036c4:	b510      	push	{r4, lr}
 80036c6:	4802      	ldr	r0, [pc, #8]	@ (80036d0 <__malloc_lock+0xc>)
 80036c8:	f7ff ff0d 	bl	80034e6 <__retarget_lock_acquire_recursive>
 80036cc:	bd10      	pop	{r4, pc}
 80036ce:	46c0      	nop			@ (mov r8, r8)
 80036d0:	20000290 	.word	0x20000290

080036d4 <__malloc_unlock>:
 80036d4:	b510      	push	{r4, lr}
 80036d6:	4802      	ldr	r0, [pc, #8]	@ (80036e0 <__malloc_unlock+0xc>)
 80036d8:	f7ff ff06 	bl	80034e8 <__retarget_lock_release_recursive>
 80036dc:	bd10      	pop	{r4, pc}
 80036de:	46c0      	nop			@ (mov r8, r8)
 80036e0:	20000290 	.word	0x20000290

080036e4 <__sfputc_r>:
 80036e4:	6893      	ldr	r3, [r2, #8]
 80036e6:	b510      	push	{r4, lr}
 80036e8:	3b01      	subs	r3, #1
 80036ea:	6093      	str	r3, [r2, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	da04      	bge.n	80036fa <__sfputc_r+0x16>
 80036f0:	6994      	ldr	r4, [r2, #24]
 80036f2:	42a3      	cmp	r3, r4
 80036f4:	db07      	blt.n	8003706 <__sfputc_r+0x22>
 80036f6:	290a      	cmp	r1, #10
 80036f8:	d005      	beq.n	8003706 <__sfputc_r+0x22>
 80036fa:	6813      	ldr	r3, [r2, #0]
 80036fc:	1c58      	adds	r0, r3, #1
 80036fe:	6010      	str	r0, [r2, #0]
 8003700:	7019      	strb	r1, [r3, #0]
 8003702:	0008      	movs	r0, r1
 8003704:	bd10      	pop	{r4, pc}
 8003706:	f000 fb5e 	bl	8003dc6 <__swbuf_r>
 800370a:	0001      	movs	r1, r0
 800370c:	e7f9      	b.n	8003702 <__sfputc_r+0x1e>

0800370e <__sfputs_r>:
 800370e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003710:	0006      	movs	r6, r0
 8003712:	000f      	movs	r7, r1
 8003714:	0014      	movs	r4, r2
 8003716:	18d5      	adds	r5, r2, r3
 8003718:	42ac      	cmp	r4, r5
 800371a:	d101      	bne.n	8003720 <__sfputs_r+0x12>
 800371c:	2000      	movs	r0, #0
 800371e:	e007      	b.n	8003730 <__sfputs_r+0x22>
 8003720:	7821      	ldrb	r1, [r4, #0]
 8003722:	003a      	movs	r2, r7
 8003724:	0030      	movs	r0, r6
 8003726:	f7ff ffdd 	bl	80036e4 <__sfputc_r>
 800372a:	3401      	adds	r4, #1
 800372c:	1c43      	adds	r3, r0, #1
 800372e:	d1f3      	bne.n	8003718 <__sfputs_r+0xa>
 8003730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003734 <_vfiprintf_r>:
 8003734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003736:	b0a1      	sub	sp, #132	@ 0x84
 8003738:	000f      	movs	r7, r1
 800373a:	0015      	movs	r5, r2
 800373c:	001e      	movs	r6, r3
 800373e:	9003      	str	r0, [sp, #12]
 8003740:	2800      	cmp	r0, #0
 8003742:	d004      	beq.n	800374e <_vfiprintf_r+0x1a>
 8003744:	6a03      	ldr	r3, [r0, #32]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <_vfiprintf_r+0x1a>
 800374a:	f7ff fdbb 	bl	80032c4 <__sinit>
 800374e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003750:	07db      	lsls	r3, r3, #31
 8003752:	d405      	bmi.n	8003760 <_vfiprintf_r+0x2c>
 8003754:	89bb      	ldrh	r3, [r7, #12]
 8003756:	059b      	lsls	r3, r3, #22
 8003758:	d402      	bmi.n	8003760 <_vfiprintf_r+0x2c>
 800375a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800375c:	f7ff fec3 	bl	80034e6 <__retarget_lock_acquire_recursive>
 8003760:	89bb      	ldrh	r3, [r7, #12]
 8003762:	071b      	lsls	r3, r3, #28
 8003764:	d502      	bpl.n	800376c <_vfiprintf_r+0x38>
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d113      	bne.n	8003794 <_vfiprintf_r+0x60>
 800376c:	0039      	movs	r1, r7
 800376e:	9803      	ldr	r0, [sp, #12]
 8003770:	f000 fb6c 	bl	8003e4c <__swsetup_r>
 8003774:	2800      	cmp	r0, #0
 8003776:	d00d      	beq.n	8003794 <_vfiprintf_r+0x60>
 8003778:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800377a:	07db      	lsls	r3, r3, #31
 800377c:	d503      	bpl.n	8003786 <_vfiprintf_r+0x52>
 800377e:	2001      	movs	r0, #1
 8003780:	4240      	negs	r0, r0
 8003782:	b021      	add	sp, #132	@ 0x84
 8003784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003786:	89bb      	ldrh	r3, [r7, #12]
 8003788:	059b      	lsls	r3, r3, #22
 800378a:	d4f8      	bmi.n	800377e <_vfiprintf_r+0x4a>
 800378c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800378e:	f7ff feab 	bl	80034e8 <__retarget_lock_release_recursive>
 8003792:	e7f4      	b.n	800377e <_vfiprintf_r+0x4a>
 8003794:	2300      	movs	r3, #0
 8003796:	ac08      	add	r4, sp, #32
 8003798:	6163      	str	r3, [r4, #20]
 800379a:	3320      	adds	r3, #32
 800379c:	7663      	strb	r3, [r4, #25]
 800379e:	3310      	adds	r3, #16
 80037a0:	76a3      	strb	r3, [r4, #26]
 80037a2:	9607      	str	r6, [sp, #28]
 80037a4:	002e      	movs	r6, r5
 80037a6:	7833      	ldrb	r3, [r6, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <_vfiprintf_r+0x7c>
 80037ac:	2b25      	cmp	r3, #37	@ 0x25
 80037ae:	d148      	bne.n	8003842 <_vfiprintf_r+0x10e>
 80037b0:	1b73      	subs	r3, r6, r5
 80037b2:	9305      	str	r3, [sp, #20]
 80037b4:	42ae      	cmp	r6, r5
 80037b6:	d00b      	beq.n	80037d0 <_vfiprintf_r+0x9c>
 80037b8:	002a      	movs	r2, r5
 80037ba:	0039      	movs	r1, r7
 80037bc:	9803      	ldr	r0, [sp, #12]
 80037be:	f7ff ffa6 	bl	800370e <__sfputs_r>
 80037c2:	3001      	adds	r0, #1
 80037c4:	d100      	bne.n	80037c8 <_vfiprintf_r+0x94>
 80037c6:	e0ae      	b.n	8003926 <_vfiprintf_r+0x1f2>
 80037c8:	6963      	ldr	r3, [r4, #20]
 80037ca:	9a05      	ldr	r2, [sp, #20]
 80037cc:	189b      	adds	r3, r3, r2
 80037ce:	6163      	str	r3, [r4, #20]
 80037d0:	7833      	ldrb	r3, [r6, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d100      	bne.n	80037d8 <_vfiprintf_r+0xa4>
 80037d6:	e0a6      	b.n	8003926 <_vfiprintf_r+0x1f2>
 80037d8:	2201      	movs	r2, #1
 80037da:	2300      	movs	r3, #0
 80037dc:	4252      	negs	r2, r2
 80037de:	6062      	str	r2, [r4, #4]
 80037e0:	a904      	add	r1, sp, #16
 80037e2:	3254      	adds	r2, #84	@ 0x54
 80037e4:	1852      	adds	r2, r2, r1
 80037e6:	1c75      	adds	r5, r6, #1
 80037e8:	6023      	str	r3, [r4, #0]
 80037ea:	60e3      	str	r3, [r4, #12]
 80037ec:	60a3      	str	r3, [r4, #8]
 80037ee:	7013      	strb	r3, [r2, #0]
 80037f0:	65a3      	str	r3, [r4, #88]	@ 0x58
 80037f2:	4b59      	ldr	r3, [pc, #356]	@ (8003958 <_vfiprintf_r+0x224>)
 80037f4:	2205      	movs	r2, #5
 80037f6:	0018      	movs	r0, r3
 80037f8:	7829      	ldrb	r1, [r5, #0]
 80037fa:	9305      	str	r3, [sp, #20]
 80037fc:	f000 fb96 	bl	8003f2c <memchr>
 8003800:	1c6e      	adds	r6, r5, #1
 8003802:	2800      	cmp	r0, #0
 8003804:	d11f      	bne.n	8003846 <_vfiprintf_r+0x112>
 8003806:	6822      	ldr	r2, [r4, #0]
 8003808:	06d3      	lsls	r3, r2, #27
 800380a:	d504      	bpl.n	8003816 <_vfiprintf_r+0xe2>
 800380c:	2353      	movs	r3, #83	@ 0x53
 800380e:	a904      	add	r1, sp, #16
 8003810:	185b      	adds	r3, r3, r1
 8003812:	2120      	movs	r1, #32
 8003814:	7019      	strb	r1, [r3, #0]
 8003816:	0713      	lsls	r3, r2, #28
 8003818:	d504      	bpl.n	8003824 <_vfiprintf_r+0xf0>
 800381a:	2353      	movs	r3, #83	@ 0x53
 800381c:	a904      	add	r1, sp, #16
 800381e:	185b      	adds	r3, r3, r1
 8003820:	212b      	movs	r1, #43	@ 0x2b
 8003822:	7019      	strb	r1, [r3, #0]
 8003824:	782b      	ldrb	r3, [r5, #0]
 8003826:	2b2a      	cmp	r3, #42	@ 0x2a
 8003828:	d016      	beq.n	8003858 <_vfiprintf_r+0x124>
 800382a:	002e      	movs	r6, r5
 800382c:	2100      	movs	r1, #0
 800382e:	200a      	movs	r0, #10
 8003830:	68e3      	ldr	r3, [r4, #12]
 8003832:	7832      	ldrb	r2, [r6, #0]
 8003834:	1c75      	adds	r5, r6, #1
 8003836:	3a30      	subs	r2, #48	@ 0x30
 8003838:	2a09      	cmp	r2, #9
 800383a:	d950      	bls.n	80038de <_vfiprintf_r+0x1aa>
 800383c:	2900      	cmp	r1, #0
 800383e:	d111      	bne.n	8003864 <_vfiprintf_r+0x130>
 8003840:	e017      	b.n	8003872 <_vfiprintf_r+0x13e>
 8003842:	3601      	adds	r6, #1
 8003844:	e7af      	b.n	80037a6 <_vfiprintf_r+0x72>
 8003846:	9b05      	ldr	r3, [sp, #20]
 8003848:	6822      	ldr	r2, [r4, #0]
 800384a:	1ac0      	subs	r0, r0, r3
 800384c:	2301      	movs	r3, #1
 800384e:	4083      	lsls	r3, r0
 8003850:	4313      	orrs	r3, r2
 8003852:	0035      	movs	r5, r6
 8003854:	6023      	str	r3, [r4, #0]
 8003856:	e7cc      	b.n	80037f2 <_vfiprintf_r+0xbe>
 8003858:	9b07      	ldr	r3, [sp, #28]
 800385a:	1d19      	adds	r1, r3, #4
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	9107      	str	r1, [sp, #28]
 8003860:	2b00      	cmp	r3, #0
 8003862:	db01      	blt.n	8003868 <_vfiprintf_r+0x134>
 8003864:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003866:	e004      	b.n	8003872 <_vfiprintf_r+0x13e>
 8003868:	425b      	negs	r3, r3
 800386a:	60e3      	str	r3, [r4, #12]
 800386c:	2302      	movs	r3, #2
 800386e:	4313      	orrs	r3, r2
 8003870:	6023      	str	r3, [r4, #0]
 8003872:	7833      	ldrb	r3, [r6, #0]
 8003874:	2b2e      	cmp	r3, #46	@ 0x2e
 8003876:	d10c      	bne.n	8003892 <_vfiprintf_r+0x15e>
 8003878:	7873      	ldrb	r3, [r6, #1]
 800387a:	2b2a      	cmp	r3, #42	@ 0x2a
 800387c:	d134      	bne.n	80038e8 <_vfiprintf_r+0x1b4>
 800387e:	9b07      	ldr	r3, [sp, #28]
 8003880:	3602      	adds	r6, #2
 8003882:	1d1a      	adds	r2, r3, #4
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	9207      	str	r2, [sp, #28]
 8003888:	2b00      	cmp	r3, #0
 800388a:	da01      	bge.n	8003890 <_vfiprintf_r+0x15c>
 800388c:	2301      	movs	r3, #1
 800388e:	425b      	negs	r3, r3
 8003890:	9309      	str	r3, [sp, #36]	@ 0x24
 8003892:	4d32      	ldr	r5, [pc, #200]	@ (800395c <_vfiprintf_r+0x228>)
 8003894:	2203      	movs	r2, #3
 8003896:	0028      	movs	r0, r5
 8003898:	7831      	ldrb	r1, [r6, #0]
 800389a:	f000 fb47 	bl	8003f2c <memchr>
 800389e:	2800      	cmp	r0, #0
 80038a0:	d006      	beq.n	80038b0 <_vfiprintf_r+0x17c>
 80038a2:	2340      	movs	r3, #64	@ 0x40
 80038a4:	1b40      	subs	r0, r0, r5
 80038a6:	4083      	lsls	r3, r0
 80038a8:	6822      	ldr	r2, [r4, #0]
 80038aa:	3601      	adds	r6, #1
 80038ac:	4313      	orrs	r3, r2
 80038ae:	6023      	str	r3, [r4, #0]
 80038b0:	7831      	ldrb	r1, [r6, #0]
 80038b2:	2206      	movs	r2, #6
 80038b4:	482a      	ldr	r0, [pc, #168]	@ (8003960 <_vfiprintf_r+0x22c>)
 80038b6:	1c75      	adds	r5, r6, #1
 80038b8:	7621      	strb	r1, [r4, #24]
 80038ba:	f000 fb37 	bl	8003f2c <memchr>
 80038be:	2800      	cmp	r0, #0
 80038c0:	d040      	beq.n	8003944 <_vfiprintf_r+0x210>
 80038c2:	4b28      	ldr	r3, [pc, #160]	@ (8003964 <_vfiprintf_r+0x230>)
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d122      	bne.n	800390e <_vfiprintf_r+0x1da>
 80038c8:	2207      	movs	r2, #7
 80038ca:	9b07      	ldr	r3, [sp, #28]
 80038cc:	3307      	adds	r3, #7
 80038ce:	4393      	bics	r3, r2
 80038d0:	3308      	adds	r3, #8
 80038d2:	9307      	str	r3, [sp, #28]
 80038d4:	6963      	ldr	r3, [r4, #20]
 80038d6:	9a04      	ldr	r2, [sp, #16]
 80038d8:	189b      	adds	r3, r3, r2
 80038da:	6163      	str	r3, [r4, #20]
 80038dc:	e762      	b.n	80037a4 <_vfiprintf_r+0x70>
 80038de:	4343      	muls	r3, r0
 80038e0:	002e      	movs	r6, r5
 80038e2:	2101      	movs	r1, #1
 80038e4:	189b      	adds	r3, r3, r2
 80038e6:	e7a4      	b.n	8003832 <_vfiprintf_r+0xfe>
 80038e8:	2300      	movs	r3, #0
 80038ea:	200a      	movs	r0, #10
 80038ec:	0019      	movs	r1, r3
 80038ee:	3601      	adds	r6, #1
 80038f0:	6063      	str	r3, [r4, #4]
 80038f2:	7832      	ldrb	r2, [r6, #0]
 80038f4:	1c75      	adds	r5, r6, #1
 80038f6:	3a30      	subs	r2, #48	@ 0x30
 80038f8:	2a09      	cmp	r2, #9
 80038fa:	d903      	bls.n	8003904 <_vfiprintf_r+0x1d0>
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0c8      	beq.n	8003892 <_vfiprintf_r+0x15e>
 8003900:	9109      	str	r1, [sp, #36]	@ 0x24
 8003902:	e7c6      	b.n	8003892 <_vfiprintf_r+0x15e>
 8003904:	4341      	muls	r1, r0
 8003906:	002e      	movs	r6, r5
 8003908:	2301      	movs	r3, #1
 800390a:	1889      	adds	r1, r1, r2
 800390c:	e7f1      	b.n	80038f2 <_vfiprintf_r+0x1be>
 800390e:	aa07      	add	r2, sp, #28
 8003910:	9200      	str	r2, [sp, #0]
 8003912:	0021      	movs	r1, r4
 8003914:	003a      	movs	r2, r7
 8003916:	4b14      	ldr	r3, [pc, #80]	@ (8003968 <_vfiprintf_r+0x234>)
 8003918:	9803      	ldr	r0, [sp, #12]
 800391a:	e000      	b.n	800391e <_vfiprintf_r+0x1ea>
 800391c:	bf00      	nop
 800391e:	9004      	str	r0, [sp, #16]
 8003920:	9b04      	ldr	r3, [sp, #16]
 8003922:	3301      	adds	r3, #1
 8003924:	d1d6      	bne.n	80038d4 <_vfiprintf_r+0x1a0>
 8003926:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003928:	07db      	lsls	r3, r3, #31
 800392a:	d405      	bmi.n	8003938 <_vfiprintf_r+0x204>
 800392c:	89bb      	ldrh	r3, [r7, #12]
 800392e:	059b      	lsls	r3, r3, #22
 8003930:	d402      	bmi.n	8003938 <_vfiprintf_r+0x204>
 8003932:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003934:	f7ff fdd8 	bl	80034e8 <__retarget_lock_release_recursive>
 8003938:	89bb      	ldrh	r3, [r7, #12]
 800393a:	065b      	lsls	r3, r3, #25
 800393c:	d500      	bpl.n	8003940 <_vfiprintf_r+0x20c>
 800393e:	e71e      	b.n	800377e <_vfiprintf_r+0x4a>
 8003940:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003942:	e71e      	b.n	8003782 <_vfiprintf_r+0x4e>
 8003944:	aa07      	add	r2, sp, #28
 8003946:	9200      	str	r2, [sp, #0]
 8003948:	0021      	movs	r1, r4
 800394a:	003a      	movs	r2, r7
 800394c:	4b06      	ldr	r3, [pc, #24]	@ (8003968 <_vfiprintf_r+0x234>)
 800394e:	9803      	ldr	r0, [sp, #12]
 8003950:	f000 f87c 	bl	8003a4c <_printf_i>
 8003954:	e7e3      	b.n	800391e <_vfiprintf_r+0x1ea>
 8003956:	46c0      	nop			@ (mov r8, r8)
 8003958:	0800429c 	.word	0x0800429c
 800395c:	080042a2 	.word	0x080042a2
 8003960:	080042a6 	.word	0x080042a6
 8003964:	00000000 	.word	0x00000000
 8003968:	0800370f 	.word	0x0800370f

0800396c <_printf_common>:
 800396c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800396e:	0016      	movs	r6, r2
 8003970:	9301      	str	r3, [sp, #4]
 8003972:	688a      	ldr	r2, [r1, #8]
 8003974:	690b      	ldr	r3, [r1, #16]
 8003976:	000c      	movs	r4, r1
 8003978:	9000      	str	r0, [sp, #0]
 800397a:	4293      	cmp	r3, r2
 800397c:	da00      	bge.n	8003980 <_printf_common+0x14>
 800397e:	0013      	movs	r3, r2
 8003980:	0022      	movs	r2, r4
 8003982:	6033      	str	r3, [r6, #0]
 8003984:	3243      	adds	r2, #67	@ 0x43
 8003986:	7812      	ldrb	r2, [r2, #0]
 8003988:	2a00      	cmp	r2, #0
 800398a:	d001      	beq.n	8003990 <_printf_common+0x24>
 800398c:	3301      	adds	r3, #1
 800398e:	6033      	str	r3, [r6, #0]
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	069b      	lsls	r3, r3, #26
 8003994:	d502      	bpl.n	800399c <_printf_common+0x30>
 8003996:	6833      	ldr	r3, [r6, #0]
 8003998:	3302      	adds	r3, #2
 800399a:	6033      	str	r3, [r6, #0]
 800399c:	6822      	ldr	r2, [r4, #0]
 800399e:	2306      	movs	r3, #6
 80039a0:	0015      	movs	r5, r2
 80039a2:	401d      	ands	r5, r3
 80039a4:	421a      	tst	r2, r3
 80039a6:	d027      	beq.n	80039f8 <_printf_common+0x8c>
 80039a8:	0023      	movs	r3, r4
 80039aa:	3343      	adds	r3, #67	@ 0x43
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	1e5a      	subs	r2, r3, #1
 80039b0:	4193      	sbcs	r3, r2
 80039b2:	6822      	ldr	r2, [r4, #0]
 80039b4:	0692      	lsls	r2, r2, #26
 80039b6:	d430      	bmi.n	8003a1a <_printf_common+0xae>
 80039b8:	0022      	movs	r2, r4
 80039ba:	9901      	ldr	r1, [sp, #4]
 80039bc:	9800      	ldr	r0, [sp, #0]
 80039be:	9d08      	ldr	r5, [sp, #32]
 80039c0:	3243      	adds	r2, #67	@ 0x43
 80039c2:	47a8      	blx	r5
 80039c4:	3001      	adds	r0, #1
 80039c6:	d025      	beq.n	8003a14 <_printf_common+0xa8>
 80039c8:	2206      	movs	r2, #6
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	2500      	movs	r5, #0
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d105      	bne.n	80039e0 <_printf_common+0x74>
 80039d4:	6833      	ldr	r3, [r6, #0]
 80039d6:	68e5      	ldr	r5, [r4, #12]
 80039d8:	1aed      	subs	r5, r5, r3
 80039da:	43eb      	mvns	r3, r5
 80039dc:	17db      	asrs	r3, r3, #31
 80039de:	401d      	ands	r5, r3
 80039e0:	68a3      	ldr	r3, [r4, #8]
 80039e2:	6922      	ldr	r2, [r4, #16]
 80039e4:	4293      	cmp	r3, r2
 80039e6:	dd01      	ble.n	80039ec <_printf_common+0x80>
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	18ed      	adds	r5, r5, r3
 80039ec:	2600      	movs	r6, #0
 80039ee:	42b5      	cmp	r5, r6
 80039f0:	d120      	bne.n	8003a34 <_printf_common+0xc8>
 80039f2:	2000      	movs	r0, #0
 80039f4:	e010      	b.n	8003a18 <_printf_common+0xac>
 80039f6:	3501      	adds	r5, #1
 80039f8:	68e3      	ldr	r3, [r4, #12]
 80039fa:	6832      	ldr	r2, [r6, #0]
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	42ab      	cmp	r3, r5
 8003a00:	ddd2      	ble.n	80039a8 <_printf_common+0x3c>
 8003a02:	0022      	movs	r2, r4
 8003a04:	2301      	movs	r3, #1
 8003a06:	9901      	ldr	r1, [sp, #4]
 8003a08:	9800      	ldr	r0, [sp, #0]
 8003a0a:	9f08      	ldr	r7, [sp, #32]
 8003a0c:	3219      	adds	r2, #25
 8003a0e:	47b8      	blx	r7
 8003a10:	3001      	adds	r0, #1
 8003a12:	d1f0      	bne.n	80039f6 <_printf_common+0x8a>
 8003a14:	2001      	movs	r0, #1
 8003a16:	4240      	negs	r0, r0
 8003a18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a1a:	2030      	movs	r0, #48	@ 0x30
 8003a1c:	18e1      	adds	r1, r4, r3
 8003a1e:	3143      	adds	r1, #67	@ 0x43
 8003a20:	7008      	strb	r0, [r1, #0]
 8003a22:	0021      	movs	r1, r4
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	3145      	adds	r1, #69	@ 0x45
 8003a28:	7809      	ldrb	r1, [r1, #0]
 8003a2a:	18a2      	adds	r2, r4, r2
 8003a2c:	3243      	adds	r2, #67	@ 0x43
 8003a2e:	3302      	adds	r3, #2
 8003a30:	7011      	strb	r1, [r2, #0]
 8003a32:	e7c1      	b.n	80039b8 <_printf_common+0x4c>
 8003a34:	0022      	movs	r2, r4
 8003a36:	2301      	movs	r3, #1
 8003a38:	9901      	ldr	r1, [sp, #4]
 8003a3a:	9800      	ldr	r0, [sp, #0]
 8003a3c:	9f08      	ldr	r7, [sp, #32]
 8003a3e:	321a      	adds	r2, #26
 8003a40:	47b8      	blx	r7
 8003a42:	3001      	adds	r0, #1
 8003a44:	d0e6      	beq.n	8003a14 <_printf_common+0xa8>
 8003a46:	3601      	adds	r6, #1
 8003a48:	e7d1      	b.n	80039ee <_printf_common+0x82>
	...

08003a4c <_printf_i>:
 8003a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a4e:	b08b      	sub	sp, #44	@ 0x2c
 8003a50:	9206      	str	r2, [sp, #24]
 8003a52:	000a      	movs	r2, r1
 8003a54:	3243      	adds	r2, #67	@ 0x43
 8003a56:	9307      	str	r3, [sp, #28]
 8003a58:	9005      	str	r0, [sp, #20]
 8003a5a:	9203      	str	r2, [sp, #12]
 8003a5c:	7e0a      	ldrb	r2, [r1, #24]
 8003a5e:	000c      	movs	r4, r1
 8003a60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003a62:	2a78      	cmp	r2, #120	@ 0x78
 8003a64:	d809      	bhi.n	8003a7a <_printf_i+0x2e>
 8003a66:	2a62      	cmp	r2, #98	@ 0x62
 8003a68:	d80b      	bhi.n	8003a82 <_printf_i+0x36>
 8003a6a:	2a00      	cmp	r2, #0
 8003a6c:	d100      	bne.n	8003a70 <_printf_i+0x24>
 8003a6e:	e0ba      	b.n	8003be6 <_printf_i+0x19a>
 8003a70:	497a      	ldr	r1, [pc, #488]	@ (8003c5c <_printf_i+0x210>)
 8003a72:	9104      	str	r1, [sp, #16]
 8003a74:	2a58      	cmp	r2, #88	@ 0x58
 8003a76:	d100      	bne.n	8003a7a <_printf_i+0x2e>
 8003a78:	e08e      	b.n	8003b98 <_printf_i+0x14c>
 8003a7a:	0025      	movs	r5, r4
 8003a7c:	3542      	adds	r5, #66	@ 0x42
 8003a7e:	702a      	strb	r2, [r5, #0]
 8003a80:	e022      	b.n	8003ac8 <_printf_i+0x7c>
 8003a82:	0010      	movs	r0, r2
 8003a84:	3863      	subs	r0, #99	@ 0x63
 8003a86:	2815      	cmp	r0, #21
 8003a88:	d8f7      	bhi.n	8003a7a <_printf_i+0x2e>
 8003a8a:	f7fc fb3b 	bl	8000104 <__gnu_thumb1_case_shi>
 8003a8e:	0016      	.short	0x0016
 8003a90:	fff6001f 	.word	0xfff6001f
 8003a94:	fff6fff6 	.word	0xfff6fff6
 8003a98:	001ffff6 	.word	0x001ffff6
 8003a9c:	fff6fff6 	.word	0xfff6fff6
 8003aa0:	fff6fff6 	.word	0xfff6fff6
 8003aa4:	0036009f 	.word	0x0036009f
 8003aa8:	fff6007e 	.word	0xfff6007e
 8003aac:	00b0fff6 	.word	0x00b0fff6
 8003ab0:	0036fff6 	.word	0x0036fff6
 8003ab4:	fff6fff6 	.word	0xfff6fff6
 8003ab8:	0082      	.short	0x0082
 8003aba:	0025      	movs	r5, r4
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	3542      	adds	r5, #66	@ 0x42
 8003ac0:	1d11      	adds	r1, r2, #4
 8003ac2:	6019      	str	r1, [r3, #0]
 8003ac4:	6813      	ldr	r3, [r2, #0]
 8003ac6:	702b      	strb	r3, [r5, #0]
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e09e      	b.n	8003c0a <_printf_i+0x1be>
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	6809      	ldr	r1, [r1, #0]
 8003ad0:	1d02      	adds	r2, r0, #4
 8003ad2:	060d      	lsls	r5, r1, #24
 8003ad4:	d50b      	bpl.n	8003aee <_printf_i+0xa2>
 8003ad6:	6806      	ldr	r6, [r0, #0]
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	2e00      	cmp	r6, #0
 8003adc:	da03      	bge.n	8003ae6 <_printf_i+0x9a>
 8003ade:	232d      	movs	r3, #45	@ 0x2d
 8003ae0:	9a03      	ldr	r2, [sp, #12]
 8003ae2:	4276      	negs	r6, r6
 8003ae4:	7013      	strb	r3, [r2, #0]
 8003ae6:	4b5d      	ldr	r3, [pc, #372]	@ (8003c5c <_printf_i+0x210>)
 8003ae8:	270a      	movs	r7, #10
 8003aea:	9304      	str	r3, [sp, #16]
 8003aec:	e018      	b.n	8003b20 <_printf_i+0xd4>
 8003aee:	6806      	ldr	r6, [r0, #0]
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	0649      	lsls	r1, r1, #25
 8003af4:	d5f1      	bpl.n	8003ada <_printf_i+0x8e>
 8003af6:	b236      	sxth	r6, r6
 8003af8:	e7ef      	b.n	8003ada <_printf_i+0x8e>
 8003afa:	6808      	ldr	r0, [r1, #0]
 8003afc:	6819      	ldr	r1, [r3, #0]
 8003afe:	c940      	ldmia	r1!, {r6}
 8003b00:	0605      	lsls	r5, r0, #24
 8003b02:	d402      	bmi.n	8003b0a <_printf_i+0xbe>
 8003b04:	0640      	lsls	r0, r0, #25
 8003b06:	d500      	bpl.n	8003b0a <_printf_i+0xbe>
 8003b08:	b2b6      	uxth	r6, r6
 8003b0a:	6019      	str	r1, [r3, #0]
 8003b0c:	4b53      	ldr	r3, [pc, #332]	@ (8003c5c <_printf_i+0x210>)
 8003b0e:	270a      	movs	r7, #10
 8003b10:	9304      	str	r3, [sp, #16]
 8003b12:	2a6f      	cmp	r2, #111	@ 0x6f
 8003b14:	d100      	bne.n	8003b18 <_printf_i+0xcc>
 8003b16:	3f02      	subs	r7, #2
 8003b18:	0023      	movs	r3, r4
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	3343      	adds	r3, #67	@ 0x43
 8003b1e:	701a      	strb	r2, [r3, #0]
 8003b20:	6863      	ldr	r3, [r4, #4]
 8003b22:	60a3      	str	r3, [r4, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	db06      	blt.n	8003b36 <_printf_i+0xea>
 8003b28:	2104      	movs	r1, #4
 8003b2a:	6822      	ldr	r2, [r4, #0]
 8003b2c:	9d03      	ldr	r5, [sp, #12]
 8003b2e:	438a      	bics	r2, r1
 8003b30:	6022      	str	r2, [r4, #0]
 8003b32:	4333      	orrs	r3, r6
 8003b34:	d00c      	beq.n	8003b50 <_printf_i+0x104>
 8003b36:	9d03      	ldr	r5, [sp, #12]
 8003b38:	0030      	movs	r0, r6
 8003b3a:	0039      	movs	r1, r7
 8003b3c:	f7fc fb72 	bl	8000224 <__aeabi_uidivmod>
 8003b40:	9b04      	ldr	r3, [sp, #16]
 8003b42:	3d01      	subs	r5, #1
 8003b44:	5c5b      	ldrb	r3, [r3, r1]
 8003b46:	702b      	strb	r3, [r5, #0]
 8003b48:	0033      	movs	r3, r6
 8003b4a:	0006      	movs	r6, r0
 8003b4c:	429f      	cmp	r7, r3
 8003b4e:	d9f3      	bls.n	8003b38 <_printf_i+0xec>
 8003b50:	2f08      	cmp	r7, #8
 8003b52:	d109      	bne.n	8003b68 <_printf_i+0x11c>
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	07db      	lsls	r3, r3, #31
 8003b58:	d506      	bpl.n	8003b68 <_printf_i+0x11c>
 8003b5a:	6862      	ldr	r2, [r4, #4]
 8003b5c:	6923      	ldr	r3, [r4, #16]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	dc02      	bgt.n	8003b68 <_printf_i+0x11c>
 8003b62:	2330      	movs	r3, #48	@ 0x30
 8003b64:	3d01      	subs	r5, #1
 8003b66:	702b      	strb	r3, [r5, #0]
 8003b68:	9b03      	ldr	r3, [sp, #12]
 8003b6a:	1b5b      	subs	r3, r3, r5
 8003b6c:	6123      	str	r3, [r4, #16]
 8003b6e:	9b07      	ldr	r3, [sp, #28]
 8003b70:	0021      	movs	r1, r4
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	9805      	ldr	r0, [sp, #20]
 8003b76:	9b06      	ldr	r3, [sp, #24]
 8003b78:	aa09      	add	r2, sp, #36	@ 0x24
 8003b7a:	f7ff fef7 	bl	800396c <_printf_common>
 8003b7e:	3001      	adds	r0, #1
 8003b80:	d148      	bne.n	8003c14 <_printf_i+0x1c8>
 8003b82:	2001      	movs	r0, #1
 8003b84:	4240      	negs	r0, r0
 8003b86:	b00b      	add	sp, #44	@ 0x2c
 8003b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	6809      	ldr	r1, [r1, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	6022      	str	r2, [r4, #0]
 8003b92:	2278      	movs	r2, #120	@ 0x78
 8003b94:	4932      	ldr	r1, [pc, #200]	@ (8003c60 <_printf_i+0x214>)
 8003b96:	9104      	str	r1, [sp, #16]
 8003b98:	0021      	movs	r1, r4
 8003b9a:	3145      	adds	r1, #69	@ 0x45
 8003b9c:	700a      	strb	r2, [r1, #0]
 8003b9e:	6819      	ldr	r1, [r3, #0]
 8003ba0:	6822      	ldr	r2, [r4, #0]
 8003ba2:	c940      	ldmia	r1!, {r6}
 8003ba4:	0610      	lsls	r0, r2, #24
 8003ba6:	d402      	bmi.n	8003bae <_printf_i+0x162>
 8003ba8:	0650      	lsls	r0, r2, #25
 8003baa:	d500      	bpl.n	8003bae <_printf_i+0x162>
 8003bac:	b2b6      	uxth	r6, r6
 8003bae:	6019      	str	r1, [r3, #0]
 8003bb0:	07d3      	lsls	r3, r2, #31
 8003bb2:	d502      	bpl.n	8003bba <_printf_i+0x16e>
 8003bb4:	2320      	movs	r3, #32
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	6023      	str	r3, [r4, #0]
 8003bba:	2e00      	cmp	r6, #0
 8003bbc:	d001      	beq.n	8003bc2 <_printf_i+0x176>
 8003bbe:	2710      	movs	r7, #16
 8003bc0:	e7aa      	b.n	8003b18 <_printf_i+0xcc>
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	4393      	bics	r3, r2
 8003bc8:	6023      	str	r3, [r4, #0]
 8003bca:	e7f8      	b.n	8003bbe <_printf_i+0x172>
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	680d      	ldr	r5, [r1, #0]
 8003bd0:	1d10      	adds	r0, r2, #4
 8003bd2:	6949      	ldr	r1, [r1, #20]
 8003bd4:	6018      	str	r0, [r3, #0]
 8003bd6:	6813      	ldr	r3, [r2, #0]
 8003bd8:	062e      	lsls	r6, r5, #24
 8003bda:	d501      	bpl.n	8003be0 <_printf_i+0x194>
 8003bdc:	6019      	str	r1, [r3, #0]
 8003bde:	e002      	b.n	8003be6 <_printf_i+0x19a>
 8003be0:	066d      	lsls	r5, r5, #25
 8003be2:	d5fb      	bpl.n	8003bdc <_printf_i+0x190>
 8003be4:	8019      	strh	r1, [r3, #0]
 8003be6:	2300      	movs	r3, #0
 8003be8:	9d03      	ldr	r5, [sp, #12]
 8003bea:	6123      	str	r3, [r4, #16]
 8003bec:	e7bf      	b.n	8003b6e <_printf_i+0x122>
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	1d11      	adds	r1, r2, #4
 8003bf2:	6019      	str	r1, [r3, #0]
 8003bf4:	6815      	ldr	r5, [r2, #0]
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	0028      	movs	r0, r5
 8003bfa:	6862      	ldr	r2, [r4, #4]
 8003bfc:	f000 f996 	bl	8003f2c <memchr>
 8003c00:	2800      	cmp	r0, #0
 8003c02:	d001      	beq.n	8003c08 <_printf_i+0x1bc>
 8003c04:	1b40      	subs	r0, r0, r5
 8003c06:	6060      	str	r0, [r4, #4]
 8003c08:	6863      	ldr	r3, [r4, #4]
 8003c0a:	6123      	str	r3, [r4, #16]
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	9a03      	ldr	r2, [sp, #12]
 8003c10:	7013      	strb	r3, [r2, #0]
 8003c12:	e7ac      	b.n	8003b6e <_printf_i+0x122>
 8003c14:	002a      	movs	r2, r5
 8003c16:	6923      	ldr	r3, [r4, #16]
 8003c18:	9906      	ldr	r1, [sp, #24]
 8003c1a:	9805      	ldr	r0, [sp, #20]
 8003c1c:	9d07      	ldr	r5, [sp, #28]
 8003c1e:	47a8      	blx	r5
 8003c20:	3001      	adds	r0, #1
 8003c22:	d0ae      	beq.n	8003b82 <_printf_i+0x136>
 8003c24:	6823      	ldr	r3, [r4, #0]
 8003c26:	079b      	lsls	r3, r3, #30
 8003c28:	d415      	bmi.n	8003c56 <_printf_i+0x20a>
 8003c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c2c:	68e0      	ldr	r0, [r4, #12]
 8003c2e:	4298      	cmp	r0, r3
 8003c30:	daa9      	bge.n	8003b86 <_printf_i+0x13a>
 8003c32:	0018      	movs	r0, r3
 8003c34:	e7a7      	b.n	8003b86 <_printf_i+0x13a>
 8003c36:	0022      	movs	r2, r4
 8003c38:	2301      	movs	r3, #1
 8003c3a:	9906      	ldr	r1, [sp, #24]
 8003c3c:	9805      	ldr	r0, [sp, #20]
 8003c3e:	9e07      	ldr	r6, [sp, #28]
 8003c40:	3219      	adds	r2, #25
 8003c42:	47b0      	blx	r6
 8003c44:	3001      	adds	r0, #1
 8003c46:	d09c      	beq.n	8003b82 <_printf_i+0x136>
 8003c48:	3501      	adds	r5, #1
 8003c4a:	68e3      	ldr	r3, [r4, #12]
 8003c4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c4e:	1a9b      	subs	r3, r3, r2
 8003c50:	42ab      	cmp	r3, r5
 8003c52:	dcf0      	bgt.n	8003c36 <_printf_i+0x1ea>
 8003c54:	e7e9      	b.n	8003c2a <_printf_i+0x1de>
 8003c56:	2500      	movs	r5, #0
 8003c58:	e7f7      	b.n	8003c4a <_printf_i+0x1fe>
 8003c5a:	46c0      	nop			@ (mov r8, r8)
 8003c5c:	080042ad 	.word	0x080042ad
 8003c60:	080042be 	.word	0x080042be

08003c64 <__sflush_r>:
 8003c64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c66:	220c      	movs	r2, #12
 8003c68:	5e8b      	ldrsh	r3, [r1, r2]
 8003c6a:	0005      	movs	r5, r0
 8003c6c:	000c      	movs	r4, r1
 8003c6e:	071a      	lsls	r2, r3, #28
 8003c70:	d456      	bmi.n	8003d20 <__sflush_r+0xbc>
 8003c72:	684a      	ldr	r2, [r1, #4]
 8003c74:	2a00      	cmp	r2, #0
 8003c76:	dc02      	bgt.n	8003c7e <__sflush_r+0x1a>
 8003c78:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8003c7a:	2a00      	cmp	r2, #0
 8003c7c:	dd4e      	ble.n	8003d1c <__sflush_r+0xb8>
 8003c7e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003c80:	2f00      	cmp	r7, #0
 8003c82:	d04b      	beq.n	8003d1c <__sflush_r+0xb8>
 8003c84:	2200      	movs	r2, #0
 8003c86:	2080      	movs	r0, #128	@ 0x80
 8003c88:	682e      	ldr	r6, [r5, #0]
 8003c8a:	602a      	str	r2, [r5, #0]
 8003c8c:	001a      	movs	r2, r3
 8003c8e:	0140      	lsls	r0, r0, #5
 8003c90:	6a21      	ldr	r1, [r4, #32]
 8003c92:	4002      	ands	r2, r0
 8003c94:	4203      	tst	r3, r0
 8003c96:	d033      	beq.n	8003d00 <__sflush_r+0x9c>
 8003c98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003c9a:	89a3      	ldrh	r3, [r4, #12]
 8003c9c:	075b      	lsls	r3, r3, #29
 8003c9e:	d506      	bpl.n	8003cae <__sflush_r+0x4a>
 8003ca0:	6863      	ldr	r3, [r4, #4]
 8003ca2:	1ad2      	subs	r2, r2, r3
 8003ca4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <__sflush_r+0x4a>
 8003caa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003cac:	1ad2      	subs	r2, r2, r3
 8003cae:	2300      	movs	r3, #0
 8003cb0:	0028      	movs	r0, r5
 8003cb2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003cb4:	6a21      	ldr	r1, [r4, #32]
 8003cb6:	47b8      	blx	r7
 8003cb8:	89a2      	ldrh	r2, [r4, #12]
 8003cba:	1c43      	adds	r3, r0, #1
 8003cbc:	d106      	bne.n	8003ccc <__sflush_r+0x68>
 8003cbe:	6829      	ldr	r1, [r5, #0]
 8003cc0:	291d      	cmp	r1, #29
 8003cc2:	d846      	bhi.n	8003d52 <__sflush_r+0xee>
 8003cc4:	4b29      	ldr	r3, [pc, #164]	@ (8003d6c <__sflush_r+0x108>)
 8003cc6:	40cb      	lsrs	r3, r1
 8003cc8:	07db      	lsls	r3, r3, #31
 8003cca:	d542      	bpl.n	8003d52 <__sflush_r+0xee>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	6063      	str	r3, [r4, #4]
 8003cd0:	6923      	ldr	r3, [r4, #16]
 8003cd2:	6023      	str	r3, [r4, #0]
 8003cd4:	04d2      	lsls	r2, r2, #19
 8003cd6:	d505      	bpl.n	8003ce4 <__sflush_r+0x80>
 8003cd8:	1c43      	adds	r3, r0, #1
 8003cda:	d102      	bne.n	8003ce2 <__sflush_r+0x7e>
 8003cdc:	682b      	ldr	r3, [r5, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d100      	bne.n	8003ce4 <__sflush_r+0x80>
 8003ce2:	6560      	str	r0, [r4, #84]	@ 0x54
 8003ce4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ce6:	602e      	str	r6, [r5, #0]
 8003ce8:	2900      	cmp	r1, #0
 8003cea:	d017      	beq.n	8003d1c <__sflush_r+0xb8>
 8003cec:	0023      	movs	r3, r4
 8003cee:	3344      	adds	r3, #68	@ 0x44
 8003cf0:	4299      	cmp	r1, r3
 8003cf2:	d002      	beq.n	8003cfa <__sflush_r+0x96>
 8003cf4:	0028      	movs	r0, r5
 8003cf6:	f7ff fbf9 	bl	80034ec <_free_r>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8003cfe:	e00d      	b.n	8003d1c <__sflush_r+0xb8>
 8003d00:	2301      	movs	r3, #1
 8003d02:	0028      	movs	r0, r5
 8003d04:	47b8      	blx	r7
 8003d06:	0002      	movs	r2, r0
 8003d08:	1c43      	adds	r3, r0, #1
 8003d0a:	d1c6      	bne.n	8003c9a <__sflush_r+0x36>
 8003d0c:	682b      	ldr	r3, [r5, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0c3      	beq.n	8003c9a <__sflush_r+0x36>
 8003d12:	2b1d      	cmp	r3, #29
 8003d14:	d001      	beq.n	8003d1a <__sflush_r+0xb6>
 8003d16:	2b16      	cmp	r3, #22
 8003d18:	d11a      	bne.n	8003d50 <__sflush_r+0xec>
 8003d1a:	602e      	str	r6, [r5, #0]
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	e01e      	b.n	8003d5e <__sflush_r+0xfa>
 8003d20:	690e      	ldr	r6, [r1, #16]
 8003d22:	2e00      	cmp	r6, #0
 8003d24:	d0fa      	beq.n	8003d1c <__sflush_r+0xb8>
 8003d26:	680f      	ldr	r7, [r1, #0]
 8003d28:	600e      	str	r6, [r1, #0]
 8003d2a:	1bba      	subs	r2, r7, r6
 8003d2c:	9201      	str	r2, [sp, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	079b      	lsls	r3, r3, #30
 8003d32:	d100      	bne.n	8003d36 <__sflush_r+0xd2>
 8003d34:	694a      	ldr	r2, [r1, #20]
 8003d36:	60a2      	str	r2, [r4, #8]
 8003d38:	9b01      	ldr	r3, [sp, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	ddee      	ble.n	8003d1c <__sflush_r+0xb8>
 8003d3e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003d40:	0032      	movs	r2, r6
 8003d42:	001f      	movs	r7, r3
 8003d44:	0028      	movs	r0, r5
 8003d46:	9b01      	ldr	r3, [sp, #4]
 8003d48:	6a21      	ldr	r1, [r4, #32]
 8003d4a:	47b8      	blx	r7
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	dc07      	bgt.n	8003d60 <__sflush_r+0xfc>
 8003d50:	89a2      	ldrh	r2, [r4, #12]
 8003d52:	2340      	movs	r3, #64	@ 0x40
 8003d54:	2001      	movs	r0, #1
 8003d56:	4313      	orrs	r3, r2
 8003d58:	b21b      	sxth	r3, r3
 8003d5a:	81a3      	strh	r3, [r4, #12]
 8003d5c:	4240      	negs	r0, r0
 8003d5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d60:	9b01      	ldr	r3, [sp, #4]
 8003d62:	1836      	adds	r6, r6, r0
 8003d64:	1a1b      	subs	r3, r3, r0
 8003d66:	9301      	str	r3, [sp, #4]
 8003d68:	e7e6      	b.n	8003d38 <__sflush_r+0xd4>
 8003d6a:	46c0      	nop			@ (mov r8, r8)
 8003d6c:	20400001 	.word	0x20400001

08003d70 <_fflush_r>:
 8003d70:	690b      	ldr	r3, [r1, #16]
 8003d72:	b570      	push	{r4, r5, r6, lr}
 8003d74:	0005      	movs	r5, r0
 8003d76:	000c      	movs	r4, r1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d102      	bne.n	8003d82 <_fflush_r+0x12>
 8003d7c:	2500      	movs	r5, #0
 8003d7e:	0028      	movs	r0, r5
 8003d80:	bd70      	pop	{r4, r5, r6, pc}
 8003d82:	2800      	cmp	r0, #0
 8003d84:	d004      	beq.n	8003d90 <_fflush_r+0x20>
 8003d86:	6a03      	ldr	r3, [r0, #32]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <_fflush_r+0x20>
 8003d8c:	f7ff fa9a 	bl	80032c4 <__sinit>
 8003d90:	220c      	movs	r2, #12
 8003d92:	5ea3      	ldrsh	r3, [r4, r2]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0f1      	beq.n	8003d7c <_fflush_r+0xc>
 8003d98:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003d9a:	07d2      	lsls	r2, r2, #31
 8003d9c:	d404      	bmi.n	8003da8 <_fflush_r+0x38>
 8003d9e:	059b      	lsls	r3, r3, #22
 8003da0:	d402      	bmi.n	8003da8 <_fflush_r+0x38>
 8003da2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003da4:	f7ff fb9f 	bl	80034e6 <__retarget_lock_acquire_recursive>
 8003da8:	0028      	movs	r0, r5
 8003daa:	0021      	movs	r1, r4
 8003dac:	f7ff ff5a 	bl	8003c64 <__sflush_r>
 8003db0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003db2:	0005      	movs	r5, r0
 8003db4:	07db      	lsls	r3, r3, #31
 8003db6:	d4e2      	bmi.n	8003d7e <_fflush_r+0xe>
 8003db8:	89a3      	ldrh	r3, [r4, #12]
 8003dba:	059b      	lsls	r3, r3, #22
 8003dbc:	d4df      	bmi.n	8003d7e <_fflush_r+0xe>
 8003dbe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003dc0:	f7ff fb92 	bl	80034e8 <__retarget_lock_release_recursive>
 8003dc4:	e7db      	b.n	8003d7e <_fflush_r+0xe>

08003dc6 <__swbuf_r>:
 8003dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc8:	0006      	movs	r6, r0
 8003dca:	000d      	movs	r5, r1
 8003dcc:	0014      	movs	r4, r2
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	d004      	beq.n	8003ddc <__swbuf_r+0x16>
 8003dd2:	6a03      	ldr	r3, [r0, #32]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <__swbuf_r+0x16>
 8003dd8:	f7ff fa74 	bl	80032c4 <__sinit>
 8003ddc:	69a3      	ldr	r3, [r4, #24]
 8003dde:	60a3      	str	r3, [r4, #8]
 8003de0:	89a3      	ldrh	r3, [r4, #12]
 8003de2:	071b      	lsls	r3, r3, #28
 8003de4:	d502      	bpl.n	8003dec <__swbuf_r+0x26>
 8003de6:	6923      	ldr	r3, [r4, #16]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d109      	bne.n	8003e00 <__swbuf_r+0x3a>
 8003dec:	0021      	movs	r1, r4
 8003dee:	0030      	movs	r0, r6
 8003df0:	f000 f82c 	bl	8003e4c <__swsetup_r>
 8003df4:	2800      	cmp	r0, #0
 8003df6:	d003      	beq.n	8003e00 <__swbuf_r+0x3a>
 8003df8:	2501      	movs	r5, #1
 8003dfa:	426d      	negs	r5, r5
 8003dfc:	0028      	movs	r0, r5
 8003dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e00:	6923      	ldr	r3, [r4, #16]
 8003e02:	6820      	ldr	r0, [r4, #0]
 8003e04:	b2ef      	uxtb	r7, r5
 8003e06:	1ac0      	subs	r0, r0, r3
 8003e08:	6963      	ldr	r3, [r4, #20]
 8003e0a:	b2ed      	uxtb	r5, r5
 8003e0c:	4283      	cmp	r3, r0
 8003e0e:	dc05      	bgt.n	8003e1c <__swbuf_r+0x56>
 8003e10:	0021      	movs	r1, r4
 8003e12:	0030      	movs	r0, r6
 8003e14:	f7ff ffac 	bl	8003d70 <_fflush_r>
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	d1ed      	bne.n	8003df8 <__swbuf_r+0x32>
 8003e1c:	68a3      	ldr	r3, [r4, #8]
 8003e1e:	3001      	adds	r0, #1
 8003e20:	3b01      	subs	r3, #1
 8003e22:	60a3      	str	r3, [r4, #8]
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	6022      	str	r2, [r4, #0]
 8003e2a:	701f      	strb	r7, [r3, #0]
 8003e2c:	6963      	ldr	r3, [r4, #20]
 8003e2e:	4283      	cmp	r3, r0
 8003e30:	d004      	beq.n	8003e3c <__swbuf_r+0x76>
 8003e32:	89a3      	ldrh	r3, [r4, #12]
 8003e34:	07db      	lsls	r3, r3, #31
 8003e36:	d5e1      	bpl.n	8003dfc <__swbuf_r+0x36>
 8003e38:	2d0a      	cmp	r5, #10
 8003e3a:	d1df      	bne.n	8003dfc <__swbuf_r+0x36>
 8003e3c:	0021      	movs	r1, r4
 8003e3e:	0030      	movs	r0, r6
 8003e40:	f7ff ff96 	bl	8003d70 <_fflush_r>
 8003e44:	2800      	cmp	r0, #0
 8003e46:	d0d9      	beq.n	8003dfc <__swbuf_r+0x36>
 8003e48:	e7d6      	b.n	8003df8 <__swbuf_r+0x32>
	...

08003e4c <__swsetup_r>:
 8003e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8003f04 <__swsetup_r+0xb8>)
 8003e4e:	b570      	push	{r4, r5, r6, lr}
 8003e50:	0005      	movs	r5, r0
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	000c      	movs	r4, r1
 8003e56:	2800      	cmp	r0, #0
 8003e58:	d004      	beq.n	8003e64 <__swsetup_r+0x18>
 8003e5a:	6a03      	ldr	r3, [r0, #32]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <__swsetup_r+0x18>
 8003e60:	f7ff fa30 	bl	80032c4 <__sinit>
 8003e64:	220c      	movs	r2, #12
 8003e66:	5ea3      	ldrsh	r3, [r4, r2]
 8003e68:	071a      	lsls	r2, r3, #28
 8003e6a:	d423      	bmi.n	8003eb4 <__swsetup_r+0x68>
 8003e6c:	06da      	lsls	r2, r3, #27
 8003e6e:	d407      	bmi.n	8003e80 <__swsetup_r+0x34>
 8003e70:	2209      	movs	r2, #9
 8003e72:	602a      	str	r2, [r5, #0]
 8003e74:	2240      	movs	r2, #64	@ 0x40
 8003e76:	2001      	movs	r0, #1
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	81a3      	strh	r3, [r4, #12]
 8003e7c:	4240      	negs	r0, r0
 8003e7e:	e03a      	b.n	8003ef6 <__swsetup_r+0xaa>
 8003e80:	075b      	lsls	r3, r3, #29
 8003e82:	d513      	bpl.n	8003eac <__swsetup_r+0x60>
 8003e84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e86:	2900      	cmp	r1, #0
 8003e88:	d008      	beq.n	8003e9c <__swsetup_r+0x50>
 8003e8a:	0023      	movs	r3, r4
 8003e8c:	3344      	adds	r3, #68	@ 0x44
 8003e8e:	4299      	cmp	r1, r3
 8003e90:	d002      	beq.n	8003e98 <__swsetup_r+0x4c>
 8003e92:	0028      	movs	r0, r5
 8003e94:	f7ff fb2a 	bl	80034ec <_free_r>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e9c:	2224      	movs	r2, #36	@ 0x24
 8003e9e:	89a3      	ldrh	r3, [r4, #12]
 8003ea0:	4393      	bics	r3, r2
 8003ea2:	81a3      	strh	r3, [r4, #12]
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	6063      	str	r3, [r4, #4]
 8003ea8:	6923      	ldr	r3, [r4, #16]
 8003eaa:	6023      	str	r3, [r4, #0]
 8003eac:	2308      	movs	r3, #8
 8003eae:	89a2      	ldrh	r2, [r4, #12]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	81a3      	strh	r3, [r4, #12]
 8003eb4:	6923      	ldr	r3, [r4, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10b      	bne.n	8003ed2 <__swsetup_r+0x86>
 8003eba:	21a0      	movs	r1, #160	@ 0xa0
 8003ebc:	2280      	movs	r2, #128	@ 0x80
 8003ebe:	89a3      	ldrh	r3, [r4, #12]
 8003ec0:	0089      	lsls	r1, r1, #2
 8003ec2:	0092      	lsls	r2, r2, #2
 8003ec4:	400b      	ands	r3, r1
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d003      	beq.n	8003ed2 <__swsetup_r+0x86>
 8003eca:	0021      	movs	r1, r4
 8003ecc:	0028      	movs	r0, r5
 8003ece:	f000 f863 	bl	8003f98 <__smakebuf_r>
 8003ed2:	220c      	movs	r2, #12
 8003ed4:	5ea3      	ldrsh	r3, [r4, r2]
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	001a      	movs	r2, r3
 8003eda:	400a      	ands	r2, r1
 8003edc:	420b      	tst	r3, r1
 8003ede:	d00b      	beq.n	8003ef8 <__swsetup_r+0xac>
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	60a2      	str	r2, [r4, #8]
 8003ee4:	6962      	ldr	r2, [r4, #20]
 8003ee6:	4252      	negs	r2, r2
 8003ee8:	61a2      	str	r2, [r4, #24]
 8003eea:	2000      	movs	r0, #0
 8003eec:	6922      	ldr	r2, [r4, #16]
 8003eee:	4282      	cmp	r2, r0
 8003ef0:	d101      	bne.n	8003ef6 <__swsetup_r+0xaa>
 8003ef2:	061a      	lsls	r2, r3, #24
 8003ef4:	d4be      	bmi.n	8003e74 <__swsetup_r+0x28>
 8003ef6:	bd70      	pop	{r4, r5, r6, pc}
 8003ef8:	0799      	lsls	r1, r3, #30
 8003efa:	d400      	bmi.n	8003efe <__swsetup_r+0xb2>
 8003efc:	6962      	ldr	r2, [r4, #20]
 8003efe:	60a2      	str	r2, [r4, #8]
 8003f00:	e7f3      	b.n	8003eea <__swsetup_r+0x9e>
 8003f02:	46c0      	nop			@ (mov r8, r8)
 8003f04:	2000001c 	.word	0x2000001c

08003f08 <_sbrk_r>:
 8003f08:	2300      	movs	r3, #0
 8003f0a:	b570      	push	{r4, r5, r6, lr}
 8003f0c:	4d06      	ldr	r5, [pc, #24]	@ (8003f28 <_sbrk_r+0x20>)
 8003f0e:	0004      	movs	r4, r0
 8003f10:	0008      	movs	r0, r1
 8003f12:	602b      	str	r3, [r5, #0]
 8003f14:	f7fc fdb8 	bl	8000a88 <_sbrk>
 8003f18:	1c43      	adds	r3, r0, #1
 8003f1a:	d103      	bne.n	8003f24 <_sbrk_r+0x1c>
 8003f1c:	682b      	ldr	r3, [r5, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d000      	beq.n	8003f24 <_sbrk_r+0x1c>
 8003f22:	6023      	str	r3, [r4, #0]
 8003f24:	bd70      	pop	{r4, r5, r6, pc}
 8003f26:	46c0      	nop			@ (mov r8, r8)
 8003f28:	2000028c 	.word	0x2000028c

08003f2c <memchr>:
 8003f2c:	b2c9      	uxtb	r1, r1
 8003f2e:	1882      	adds	r2, r0, r2
 8003f30:	4290      	cmp	r0, r2
 8003f32:	d101      	bne.n	8003f38 <memchr+0xc>
 8003f34:	2000      	movs	r0, #0
 8003f36:	4770      	bx	lr
 8003f38:	7803      	ldrb	r3, [r0, #0]
 8003f3a:	428b      	cmp	r3, r1
 8003f3c:	d0fb      	beq.n	8003f36 <memchr+0xa>
 8003f3e:	3001      	adds	r0, #1
 8003f40:	e7f6      	b.n	8003f30 <memchr+0x4>
	...

08003f44 <__swhatbuf_r>:
 8003f44:	b570      	push	{r4, r5, r6, lr}
 8003f46:	000e      	movs	r6, r1
 8003f48:	001d      	movs	r5, r3
 8003f4a:	230e      	movs	r3, #14
 8003f4c:	5ec9      	ldrsh	r1, [r1, r3]
 8003f4e:	0014      	movs	r4, r2
 8003f50:	b096      	sub	sp, #88	@ 0x58
 8003f52:	2900      	cmp	r1, #0
 8003f54:	da0c      	bge.n	8003f70 <__swhatbuf_r+0x2c>
 8003f56:	89b2      	ldrh	r2, [r6, #12]
 8003f58:	2380      	movs	r3, #128	@ 0x80
 8003f5a:	0011      	movs	r1, r2
 8003f5c:	4019      	ands	r1, r3
 8003f5e:	421a      	tst	r2, r3
 8003f60:	d114      	bne.n	8003f8c <__swhatbuf_r+0x48>
 8003f62:	2380      	movs	r3, #128	@ 0x80
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	2000      	movs	r0, #0
 8003f68:	6029      	str	r1, [r5, #0]
 8003f6a:	6023      	str	r3, [r4, #0]
 8003f6c:	b016      	add	sp, #88	@ 0x58
 8003f6e:	bd70      	pop	{r4, r5, r6, pc}
 8003f70:	466a      	mov	r2, sp
 8003f72:	f000 f853 	bl	800401c <_fstat_r>
 8003f76:	2800      	cmp	r0, #0
 8003f78:	dbed      	blt.n	8003f56 <__swhatbuf_r+0x12>
 8003f7a:	23f0      	movs	r3, #240	@ 0xf0
 8003f7c:	9901      	ldr	r1, [sp, #4]
 8003f7e:	021b      	lsls	r3, r3, #8
 8003f80:	4019      	ands	r1, r3
 8003f82:	4b04      	ldr	r3, [pc, #16]	@ (8003f94 <__swhatbuf_r+0x50>)
 8003f84:	18c9      	adds	r1, r1, r3
 8003f86:	424b      	negs	r3, r1
 8003f88:	4159      	adcs	r1, r3
 8003f8a:	e7ea      	b.n	8003f62 <__swhatbuf_r+0x1e>
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	2340      	movs	r3, #64	@ 0x40
 8003f90:	e7e9      	b.n	8003f66 <__swhatbuf_r+0x22>
 8003f92:	46c0      	nop			@ (mov r8, r8)
 8003f94:	ffffe000 	.word	0xffffe000

08003f98 <__smakebuf_r>:
 8003f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f9a:	2602      	movs	r6, #2
 8003f9c:	898b      	ldrh	r3, [r1, #12]
 8003f9e:	0005      	movs	r5, r0
 8003fa0:	000c      	movs	r4, r1
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	4233      	tst	r3, r6
 8003fa6:	d007      	beq.n	8003fb8 <__smakebuf_r+0x20>
 8003fa8:	0023      	movs	r3, r4
 8003faa:	3347      	adds	r3, #71	@ 0x47
 8003fac:	6023      	str	r3, [r4, #0]
 8003fae:	6123      	str	r3, [r4, #16]
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	6163      	str	r3, [r4, #20]
 8003fb4:	b005      	add	sp, #20
 8003fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fb8:	ab03      	add	r3, sp, #12
 8003fba:	aa02      	add	r2, sp, #8
 8003fbc:	f7ff ffc2 	bl	8003f44 <__swhatbuf_r>
 8003fc0:	9f02      	ldr	r7, [sp, #8]
 8003fc2:	9001      	str	r0, [sp, #4]
 8003fc4:	0039      	movs	r1, r7
 8003fc6:	0028      	movs	r0, r5
 8003fc8:	f7ff fafc 	bl	80035c4 <_malloc_r>
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d108      	bne.n	8003fe2 <__smakebuf_r+0x4a>
 8003fd0:	220c      	movs	r2, #12
 8003fd2:	5ea3      	ldrsh	r3, [r4, r2]
 8003fd4:	059a      	lsls	r2, r3, #22
 8003fd6:	d4ed      	bmi.n	8003fb4 <__smakebuf_r+0x1c>
 8003fd8:	2203      	movs	r2, #3
 8003fda:	4393      	bics	r3, r2
 8003fdc:	431e      	orrs	r6, r3
 8003fde:	81a6      	strh	r6, [r4, #12]
 8003fe0:	e7e2      	b.n	8003fa8 <__smakebuf_r+0x10>
 8003fe2:	2380      	movs	r3, #128	@ 0x80
 8003fe4:	89a2      	ldrh	r2, [r4, #12]
 8003fe6:	6020      	str	r0, [r4, #0]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	81a3      	strh	r3, [r4, #12]
 8003fec:	9b03      	ldr	r3, [sp, #12]
 8003fee:	6120      	str	r0, [r4, #16]
 8003ff0:	6167      	str	r7, [r4, #20]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00c      	beq.n	8004010 <__smakebuf_r+0x78>
 8003ff6:	0028      	movs	r0, r5
 8003ff8:	230e      	movs	r3, #14
 8003ffa:	5ee1      	ldrsh	r1, [r4, r3]
 8003ffc:	f000 f820 	bl	8004040 <_isatty_r>
 8004000:	2800      	cmp	r0, #0
 8004002:	d005      	beq.n	8004010 <__smakebuf_r+0x78>
 8004004:	2303      	movs	r3, #3
 8004006:	89a2      	ldrh	r2, [r4, #12]
 8004008:	439a      	bics	r2, r3
 800400a:	3b02      	subs	r3, #2
 800400c:	4313      	orrs	r3, r2
 800400e:	81a3      	strh	r3, [r4, #12]
 8004010:	89a3      	ldrh	r3, [r4, #12]
 8004012:	9a01      	ldr	r2, [sp, #4]
 8004014:	4313      	orrs	r3, r2
 8004016:	81a3      	strh	r3, [r4, #12]
 8004018:	e7cc      	b.n	8003fb4 <__smakebuf_r+0x1c>
	...

0800401c <_fstat_r>:
 800401c:	2300      	movs	r3, #0
 800401e:	b570      	push	{r4, r5, r6, lr}
 8004020:	4d06      	ldr	r5, [pc, #24]	@ (800403c <_fstat_r+0x20>)
 8004022:	0004      	movs	r4, r0
 8004024:	0008      	movs	r0, r1
 8004026:	0011      	movs	r1, r2
 8004028:	602b      	str	r3, [r5, #0]
 800402a:	f7fc fd0b 	bl	8000a44 <_fstat>
 800402e:	1c43      	adds	r3, r0, #1
 8004030:	d103      	bne.n	800403a <_fstat_r+0x1e>
 8004032:	682b      	ldr	r3, [r5, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d000      	beq.n	800403a <_fstat_r+0x1e>
 8004038:	6023      	str	r3, [r4, #0]
 800403a:	bd70      	pop	{r4, r5, r6, pc}
 800403c:	2000028c 	.word	0x2000028c

08004040 <_isatty_r>:
 8004040:	2300      	movs	r3, #0
 8004042:	b570      	push	{r4, r5, r6, lr}
 8004044:	4d06      	ldr	r5, [pc, #24]	@ (8004060 <_isatty_r+0x20>)
 8004046:	0004      	movs	r4, r0
 8004048:	0008      	movs	r0, r1
 800404a:	602b      	str	r3, [r5, #0]
 800404c:	f7fc fd08 	bl	8000a60 <_isatty>
 8004050:	1c43      	adds	r3, r0, #1
 8004052:	d103      	bne.n	800405c <_isatty_r+0x1c>
 8004054:	682b      	ldr	r3, [r5, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d000      	beq.n	800405c <_isatty_r+0x1c>
 800405a:	6023      	str	r3, [r4, #0]
 800405c:	bd70      	pop	{r4, r5, r6, pc}
 800405e:	46c0      	nop			@ (mov r8, r8)
 8004060:	2000028c 	.word	0x2000028c

08004064 <_init>:
 8004064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004066:	46c0      	nop			@ (mov r8, r8)
 8004068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406a:	bc08      	pop	{r3}
 800406c:	469e      	mov	lr, r3
 800406e:	4770      	bx	lr

08004070 <_fini>:
 8004070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004072:	46c0      	nop			@ (mov r8, r8)
 8004074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004076:	bc08      	pop	{r3}
 8004078:	469e      	mov	lr, r3
 800407a:	4770      	bx	lr
